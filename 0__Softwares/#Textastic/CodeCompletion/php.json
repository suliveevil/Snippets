{
	"description": "Textastic Code Completion for PHP functions",
	"uuid": "3ED9F13D-5172-43FA-A0C9-9563AB6D4CA5",
	"completionSets": [{
			"name": "php.functions",
			"defaultAppend": "()",
			"strings": [{
					"string": "abs",
					"append": "(${1:number})"
				},
				{
					"string": "acos",
					"append": "(${1:arg})"
				},
				{
					"string": "acosh",
					"append": "(${1:arg})"
				},
				{
					"string": "addcslashes",
					"append": "(${1:str}, ${2:charlist})"
				},
				{
					"string": "addslashes",
					"append": "(${1:str})"
				},
				{
					"string": "aggregate",
					"append": "(${1:object}, ${2:class_name})"
				},
				{
					"string": "aggregate_info",
					"append": "(${1:object})"
				},
				{
					"string": "aggregate_methods",
					"append": "(${1:object}, ${2:class_name})"
				},
				{
					"string": "aggregate_methods_by_list",
					"append": "(${1:object}, ${2:class_name}, ${3:methods_list})"
				},
				{
					"string": "aggregate_methods_by_regexp",
					"append": "(${1:object}, ${2:class_name}, ${3:regexp})"
				},
				{
					"string": "aggregate_properties",
					"append": "(${1:object}, ${2:class_name})"
				},
				{
					"string": "aggregate_properties_by_list",
					"append": "(${1:object}, ${2:class_name}, ${3:properties_list})"
				},
				{
					"string": "aggregate_properties_by_regexp",
					"append": "(${1:object}, ${2:class_name}, ${3:regexp})"
				},
				{
					"string": "aggregation_info",
					"append": "()"
				},
				{
					"string": "apache_child_terminate",
					"append": "(${1:oid})"
				},
				{
					"string": "apache_get_modules",
					"append": "(${1:oid})"
				},
				{
					"string": "apache_get_version",
					"append": "(${1:oid})"
				},
				{
					"string": "apache_getenv",
					"append": "(${1:variable})"
				},
				{
					"string": "apache_lookup_uri",
					"append": "(${1:filename})"
				},
				{
					"string": "apache_note",
					"append": "(${1:note_name})"
				},
				{
					"string": "apache_request_headers",
					"append": "(${1:oid})"
				},
				{
					"string": "apache_reset_timeout",
					"append": "(${1:oid})"
				},
				{
					"string": "apache_response_headers",
					"append": "(${1:oid})"
				},
				{
					"string": "apache_setenv",
					"append": "(${1:variable}, ${2:value})"
				},
				{
					"string": "apc_add",
					"append": "(${1:key})"
				},
				{
					"string": "apc_bin_dump",
					"append": "()"
				},
				{
					"string": "apc_bin_dumpfile",
					"append": "(${1:files}, ${2:user_vars}, ${3:filename})"
				},
				{
					"string": "apc_bin_load",
					"append": "(${1:data})"
				},
				{
					"string": "apc_bin_loadfile",
					"append": "(${1:filename})"
				},
				{
					"string": "apc_cache_info",
					"append": "()"
				},
				{
					"string": "apc_cas",
					"append": "(${1:key}, ${2:old}, ${3:new})"
				},
				{
					"string": "apc_clear_cache",
					"append": "()"
				},
				{
					"string": "apc_compile_file",
					"append": "(${1:filename})"
				},
				{
					"string": "apc_dec",
					"append": "(${1:key})"
				},
				{
					"string": "apc_define_constants",
					"append": "(${1:key}, ${2:constants})"
				},
				{
					"string": "apc_delete",
					"append": "(${1:key})"
				},
				{
					"string": "apc_delete_file",
					"append": "(${1:keys})"
				},
				{
					"string": "apc_exists",
					"append": "(${1:keys})"
				},
				{
					"string": "apc_fetch",
					"append": "(${1:key})"
				},
				{
					"string": "apc_inc",
					"append": "(${1:key})"
				},
				{
					"string": "apc_load_constants",
					"append": "(${1:key})"
				},
				{
					"string": "apc_sma_info",
					"append": "()"
				},
				{
					"string": "apc_store",
					"append": "(${1:key}, ${2:var})"
				},
				{
					"string": "apd_breakpoint",
					"append": "(${1:debug_level})"
				},
				{
					"string": "apd_callstack",
					"append": "(${1:oid})"
				},
				{
					"string": "apd_clunk",
					"append": "(${1:warning})"
				},
				{
					"string": "apd_continue",
					"append": "(${1:debug_level})"
				},
				{
					"string": "apd_croak",
					"append": "(${1:warning})"
				},
				{
					"string": "apd_dump_function_table",
					"append": "(${1:oid})"
				},
				{
					"string": "apd_dump_persistent_resources",
					"append": "(${1:oid})"
				},
				{
					"string": "apd_dump_regular_resources",
					"append": "(${1:oid})"
				},
				{
					"string": "apd_echo",
					"append": "(${1:output})"
				},
				{
					"string": "apd_get_active_symbols",
					"append": "(${1:oid})"
				},
				{
					"string": "apd_set_pprof_trace",
					"append": "()"
				},
				{
					"string": "apd_set_session",
					"append": "(${1:debug_level})"
				},
				{
					"string": "apd_set_session_trace",
					"append": "(${1:debug_level})"
				},
				{
					"string": "apd_set_session_trace_socket",
					"append": "(${1:tcp_server}, ${2:socket_type}, ${3:port}, ${4:debug_level})"
				},
				{
					"string": "array",
					"append": "()"
				},
				{
					"string": "array_change_key_case",
					"append": "(${1:input})"
				},
				{
					"string": "array_chunk",
					"append": "(${1:input}, ${2:size})"
				},
				{
					"string": "array_combine",
					"append": "(${1:keys}, ${2:values})"
				},
				{
					"string": "array_count_values",
					"append": "(${1:input})"
				},
				{
					"string": "array_diff",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_diff_assoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_diff_key",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_diff_uassoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_diff_ukey",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_fill",
					"append": "(${1:start_index}, ${2:num}, ${3:value})"
				},
				{
					"string": "array_fill_keys",
					"append": "(${1:keys}, ${2:value})"
				},
				{
					"string": "array_filter",
					"append": "(${1:input})"
				},
				{
					"string": "array_flip",
					"append": "(${1:trans})"
				},
				{
					"string": "array_intersect",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_intersect_assoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_intersect_key",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_intersect_uassoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_intersect_ukey",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_key_exists",
					"append": "(${1:key}, ${2:search})"
				},
				{
					"string": "array_keys",
					"append": "(${1:input})"
				},
				{
					"string": "array_map",
					"append": "(${1:callback}, ${2:arr1})"
				},
				{
					"string": "array_merge",
					"append": "(${1:array1})"
				},
				{
					"string": "array_merge_recursive",
					"append": "(${1:array1})"
				},
				{
					"string": "array_multisort",
					"append": "(${1:arr})"
				},
				{
					"string": "array_pad",
					"append": "(${1:input}, ${2:pad_size}, ${3:pad_value})"
				},
				{
					"string": "array_pop",
					"append": "(${1:array})"
				},
				{
					"string": "array_product",
					"append": "(${1:array})"
				},
				{
					"string": "array_push",
					"append": "(${1:array}, ${2:var})"
				},
				{
					"string": "array_rand",
					"append": "(${1:input})"
				},
				{
					"string": "array_reduce",
					"append": "(${1:input}, ${2:function})"
				},
				{
					"string": "array_replace",
					"append": "(${1:array}, ${2:array1})"
				},
				{
					"string": "array_replace_recursive",
					"append": "(${1:array}, ${2:array1})"
				},
				{
					"string": "array_reverse",
					"append": "(${1:array})"
				},
				{
					"string": "array_search",
					"append": "(${1:needle}, ${2:haystack})"
				},
				{
					"string": "array_shift",
					"append": "(${1:array})"
				},
				{
					"string": "array_slice",
					"append": "(${1:array}, ${2:offset})"
				},
				{
					"string": "array_splice",
					"append": "(${1:input}, ${2:offset})"
				},
				{
					"string": "array_sum",
					"append": "(${1:array})"
				},
				{
					"string": "array_udiff",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_udiff_assoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_udiff_uassoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_uintersect",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_uintersect_assoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_uintersect_uassoc",
					"append": "(${1:array1}, ${2:array2})"
				},
				{
					"string": "array_unique",
					"append": "(${1:array})"
				},
				{
					"string": "array_unshift",
					"append": "(${1:array}, ${2:var})"
				},
				{
					"string": "array_values",
					"append": "(${1:input})"
				},
				{
					"string": "array_walk",
					"append": "(${1:array}, ${2:funcname})"
				},
				{
					"string": "array_walk_recursive",
					"append": "(${1:input}, ${2:funcname})"
				},
				{
					"string": "arsort",
					"append": "(${1:array})"
				},
				{
					"string": "asin",
					"append": "(${1:arg})"
				},
				{
					"string": "asinh",
					"append": "(${1:arg})"
				},
				{
					"string": "asort",
					"append": "(${1:array})"
				},
				{
					"string": "assert",
					"append": "(${1:assertion})"
				},
				{
					"string": "assert_options",
					"append": "(${1:what})"
				},
				{
					"string": "atan",
					"append": "(${1:arg})"
				},
				{
					"string": "atan2",
					"append": "(${1:y}, ${2:x})"
				},
				{
					"string": "atanh",
					"append": "(${1:arg})"
				},
				{
					"string": "base64_decode",
					"append": "(${1:data})"
				},
				{
					"string": "base64_encode",
					"append": "(${1:data})"
				},
				{
					"string": "base_convert",
					"append": "(${1:number}, ${2:frombase}, ${3:tobase})"
				},
				{
					"string": "basename",
					"append": "(${1:path})"
				},
				{
					"string": "bbcode_add_element",
					"append": "(${1:bbcode_container}, ${2:tag_name}, ${3:tag_rules})"
				},
				{
					"string": "bbcode_add_smiley",
					"append": "(${1:bbcode_container}, ${2:smiley}, ${3:replace_by})"
				},
				{
					"string": "bbcode_create",
					"append": "()"
				},
				{
					"string": "bbcode_destroy",
					"append": "(${1:bbcode_container})"
				},
				{
					"string": "bbcode_parse",
					"append": "(${1:bbcode_container}, ${2:to_parse})"
				},
				{
					"string": "bbcode_set_arg_parser",
					"append": "(${1:bbcode_container}, ${2:bbcode_arg_parser})"
				},
				{
					"string": "bbcode_set_flags",
					"append": "(${1:bbcode_container}, ${2:flags})"
				},
				{
					"string": "bcadd",
					"append": "(${1:left_operand}, ${2:right_operand})"
				},
				{
					"string": "bccomp",
					"append": "(${1:left_operand}, ${2:right_operand})"
				},
				{
					"string": "bcdiv",
					"append": "(${1:left_operand}, ${2:right_operand})"
				},
				{
					"string": "bcmod",
					"append": "(${1:left_operand}, ${2:modulus})"
				},
				{
					"string": "bcmul",
					"append": "(${1:left_operand}, ${2:right_operand})"
				},
				{
					"string": "bcompiler_load",
					"append": "(${1:filename})"
				},
				{
					"string": "bcompiler_load_exe",
					"append": "(${1:filename})"
				},
				{
					"string": "bcompiler_parse_class",
					"append": "(${1:class}, ${2:callback})"
				},
				{
					"string": "bcompiler_read",
					"append": "(${1:filehandle})"
				},
				{
					"string": "bcompiler_write_class",
					"append": "(${1:filehandle}, ${2:className})"
				},
				{
					"string": "bcompiler_write_constant",
					"append": "(${1:filehandle}, ${2:constantName})"
				},
				{
					"string": "bcompiler_write_exe_footer",
					"append": "(${1:filehandle}, ${2:startpos})"
				},
				{
					"string": "bcompiler_write_file",
					"append": "(${1:filehandle}, ${2:filename})"
				},
				{
					"string": "bcompiler_write_footer",
					"append": "(${1:filehandle})"
				},
				{
					"string": "bcompiler_write_function",
					"append": "(${1:filehandle}, ${2:functionName})"
				},
				{
					"string": "bcompiler_write_functions_from_file",
					"append": "(${1:filehandle}, ${2:fileName})"
				},
				{
					"string": "bcompiler_write_header",
					"append": "(${1:filehandle})"
				},
				{
					"string": "bcompiler_write_included_filename",
					"append": "(${1:filehandle}, ${2:filename})"
				},
				{
					"string": "bcpow",
					"append": "(${1:left_operand}, ${2:right_operand})"
				},
				{
					"string": "bcpowmod",
					"append": "(${1:left_operand}, ${2:right_operand}, ${3:modulus})"
				},
				{
					"string": "bcscale",
					"append": "(${1:scale})"
				},
				{
					"string": "bcsqrt",
					"append": "(${1:operand})"
				},
				{
					"string": "bcsub",
					"append": "(${1:left_operand}, ${2:right_operand})"
				},
				{
					"string": "bin2hex",
					"append": "(${1:str})"
				},
				{
					"string": "bind_textdomain_codeset",
					"append": "(${1:domain}, ${2:codeset})"
				},
				{
					"string": "bindec",
					"append": "(${1:binary_string})"
				},
				{
					"string": "bindtextdomain",
					"append": "(${1:domain}, ${2:directory})"
				},
				{
					"string": "bson_decode",
					"append": "(${1:bson})"
				},
				{
					"string": "bson_encode",
					"append": "(${1:anything})"
				},
				{
					"string": "bzclose",
					"append": "(${1:bz})"
				},
				{
					"string": "bzcompress",
					"append": "(${1:source})"
				},
				{
					"string": "bzdecompress",
					"append": "(${1:source})"
				},
				{
					"string": "bzerrno",
					"append": "(${1:bz})"
				},
				{
					"string": "bzerror",
					"append": "(${1:bz})"
				},
				{
					"string": "bzerrstr",
					"append": "(${1:bz})"
				},
				{
					"string": "bzflush",
					"append": "(${1:bz})"
				},
				{
					"string": "bzopen",
					"append": "(${1:filename}, ${2:mode})"
				},
				{
					"string": "bzread",
					"append": "(${1:bz})"
				},
				{
					"string": "bzwrite",
					"append": "(${1:bz}, ${2:data})"
				},
				{
					"string": "cairo_create",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_font_face_get_type",
					"append": "(${1:fontface})"
				},
				{
					"string": "cairo_font_face_status",
					"append": "(${1:fontface})"
				},
				{
					"string": "cairo_font_options_create",
					"append": "(${1:oid})"
				},
				{
					"string": "cairo_font_options_equal",
					"append": "(${1:options}, ${2:other})"
				},
				{
					"string": "cairo_font_options_get_antialias",
					"append": "(${1:options})"
				},
				{
					"string": "cairo_font_options_get_hint_metrics",
					"append": "(${1:options})"
				},
				{
					"string": "cairo_font_options_get_hint_style",
					"append": "(${1:options})"
				},
				{
					"string": "cairo_font_options_get_subpixel_order",
					"append": "(${1:options})"
				},
				{
					"string": "cairo_font_options_hash",
					"append": "(${1:options})"
				},
				{
					"string": "cairo_font_options_merge",
					"append": "(${1:options}, ${2:other})"
				},
				{
					"string": "cairo_font_options_set_antialias",
					"append": "(${1:options}, ${2:antialias})"
				},
				{
					"string": "cairo_font_options_set_hint_metrics",
					"append": "(${1:options}, ${2:hint_metrics})"
				},
				{
					"string": "cairo_font_options_set_hint_style",
					"append": "(${1:options}, ${2:hint_style})"
				},
				{
					"string": "cairo_font_options_set_subpixel_order",
					"append": "(${1:options}, ${2:subpixel_order})"
				},
				{
					"string": "cairo_font_options_status",
					"append": "(${1:options})"
				},
				{
					"string": "cairo_format_stride_for_width",
					"append": "(${1:format}, ${2:width})"
				},
				{
					"string": "cairo_image_surface_create",
					"append": "(${1:format}, ${2:width}, ${3:height})"
				},
				{
					"string": "cairo_image_surface_create_for_data",
					"append": "(${1:data}, ${2:format}, ${3:width}, ${4:height})"
				},
				{
					"string": "cairo_image_surface_create_from_png",
					"append": "(${1:file})"
				},
				{
					"string": "cairo_image_surface_get_data",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_image_surface_get_format",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_image_surface_get_height",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_image_surface_get_stride",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_image_surface_get_width",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_matrix_create_scale",
					"append": "()"
				},
				{
					"string": "cairo_matrix_create_translate",
					"append": "()"
				},
				{
					"string": "cairo_matrix_invert",
					"append": "(${1:matrix})"
				},
				{
					"string": "cairo_matrix_multiply",
					"append": "(${1:matrix1}, ${2:matrix2})"
				},
				{
					"string": "cairo_matrix_rotate",
					"append": "(${1:matrix}, ${2:radians})"
				},
				{
					"string": "cairo_matrix_transform_distance",
					"append": "(${1:matrix}, ${2:dx}, ${3:dy})"
				},
				{
					"string": "cairo_matrix_transform_point",
					"append": "(${1:matrix}, ${2:dx}, ${3:dy})"
				},
				{
					"string": "cairo_matrix_translate",
					"append": "(${1:matrix}, ${2:tx}, ${3:ty})"
				},
				{
					"string": "cairo_pattern_add_color_stop_rgb",
					"append": "(${1:pattern}, ${2:offset}, ${3:red}, ${4:green}, ${5:blue})"
				},
				{
					"string": "cairo_pattern_add_color_stop_rgba",
					"append": "(${1:pattern}, ${2:offset}, ${3:red}, ${4:green}, ${5:blue}, ${6:alpha})"
				},
				{
					"string": "cairo_pattern_create_for_surface",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_pattern_create_linear",
					"append": "(${1:x0}, ${2:y0}, ${3:x1}, ${4:y1})"
				},
				{
					"string": "cairo_pattern_create_radial",
					"append": "(${1:x0}, ${2:y0}, ${3:r0}, ${4:x1}, ${5:y1}, ${6:r1})"
				},
				{
					"string": "cairo_pattern_create_rgb",
					"append": "(${1:red}, ${2:green}, ${3:blue})"
				},
				{
					"string": "cairo_pattern_create_rgba",
					"append": "(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})"
				},
				{
					"string": "cairo_pattern_get_color_stop_count",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_color_stop_rgba",
					"append": "(${1:pattern}, ${2:index})"
				},
				{
					"string": "cairo_pattern_get_extend",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_filter",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_linear_points",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_matrix",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_radial_circles",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_rgba",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_surface",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_get_type",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pattern_set_extend",
					"append": "(${1:pattern}, ${2:extend})"
				},
				{
					"string": "cairo_pattern_set_filter",
					"append": "(${1:pattern}, ${2:filter})"
				},
				{
					"string": "cairo_pattern_set_matrix",
					"append": "(${1:pattern}, ${2:matrix})"
				},
				{
					"string": "cairo_pattern_status",
					"append": "(${1:pattern})"
				},
				{
					"string": "cairo_pdf_surface_create",
					"append": "(${1:file}, ${2:width}, ${3:height})"
				},
				{
					"string": "cairo_pdf_surface_set_size",
					"append": "(${1:surface}, ${2:width}, ${3:height})"
				},
				{
					"string": "cairo_ps_get_levels",
					"append": "(${1:oid})"
				},
				{
					"string": "cairo_ps_level_to_string",
					"append": "(${1:level})"
				},
				{
					"string": "cairo_ps_surface_create",
					"append": "(${1:file}, ${2:width}, ${3:height})"
				},
				{
					"string": "cairo_ps_surface_dsc_begin_page_setup",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_ps_surface_dsc_begin_setup",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_ps_surface_dsc_comment",
					"append": "(${1:surface}, ${2:comment})"
				},
				{
					"string": "cairo_ps_surface_get_eps",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_ps_surface_restrict_to_level",
					"append": "(${1:surface}, ${2:level})"
				},
				{
					"string": "cairo_ps_surface_set_eps",
					"append": "(${1:surface}, ${2:level})"
				},
				{
					"string": "cairo_ps_surface_set_size",
					"append": "(${1:surface}, ${2:width}, ${3:height})"
				},
				{
					"string": "cairo_scaled_font_create",
					"append": "(${1:fontface}, ${2:matrix}, ${3:ctm}, ${4:fontoptions})"
				},
				{
					"string": "cairo_scaled_font_extents",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_get_ctm",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_get_font_face",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_get_font_matrix",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_get_font_options",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_get_scale_matrix",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_get_type",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_glyph_extents",
					"append": "(${1:scaledfont}, ${2:glyphs})"
				},
				{
					"string": "cairo_scaled_font_status",
					"append": "(${1:scaledfont})"
				},
				{
					"string": "cairo_scaled_font_text_extents",
					"append": "(${1:scaledfont}, ${2:text})"
				},
				{
					"string": "cairo_surface_copy_page",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_create_similar",
					"append": "(${1:surface}, ${2:content}, ${3:width}, ${4:height})"
				},
				{
					"string": "cairo_surface_finish",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_flush",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_get_content",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_get_device_offset",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_get_font_options",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_get_type",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_mark_dirty",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_mark_dirty_rectangle",
					"append": "(${1:surface}, ${2:x}, ${3:y}, ${4:width}, ${5:height})"
				},
				{
					"string": "cairo_surface_set_device_offset",
					"append": "(${1:surface}, ${2:x}, ${3:y})"
				},
				{
					"string": "cairo_surface_set_fallback_resolution",
					"append": "(${1:surface}, ${2:x}, ${3:y})"
				},
				{
					"string": "cairo_surface_show_page",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_status",
					"append": "(${1:surface})"
				},
				{
					"string": "cairo_surface_write_to_png",
					"append": "(${1:surface}, ${2:stream})"
				},
				{
					"string": "cairo_svg_surface_create",
					"append": "(${1:file}, ${2:width}, ${3:height})"
				},
				{
					"string": "cairo_svg_surface_restrict_to_version",
					"append": "(${1:surface}, ${2:version})"
				},
				{
					"string": "cairo_svg_version_to_string",
					"append": "(${1:version})"
				},
				{
					"string": "cal_days_in_month",
					"append": "(${1:calendar}, ${2:month}, ${3:year})"
				},
				{
					"string": "cal_from_jd",
					"append": "(${1:jd}, ${2:calendar})"
				},
				{
					"string": "cal_info",
					"append": "()"
				},
				{
					"string": "cal_to_jd",
					"append": "(${1:calendar}, ${2:month}, ${3:day}, ${4:year})"
				},
				{
					"string": "calcul_hmac",
					"append": "(${1:clent}, ${2:siretcode}, ${3:price}, ${4:reference}, ${5:validity}, ${6:taxation}, ${7:devise}, ${8:language})"
				},
				{
					"string": "calculhmac",
					"append": "(${1:clent}, ${2:data})"
				},
				{
					"string": "call_user_func",
					"append": "(${1:function})"
				},
				{
					"string": "call_user_func_array",
					"append": "(${1:function}, ${2:param_arr})"
				},
				{
					"string": "call_user_method",
					"append": "(${1:method_name}, ${2:obj})"
				},
				{
					"string": "call_user_method_array",
					"append": "(${1:method_name}, ${2:obj}, ${3:params})"
				},
				{
					"string": "ceil",
					"append": "(${1:value})"
				},
				{
					"string": "chdb_create",
					"append": "(${1:pathname}, ${2:data})"
				},
				{
					"string": "chdir",
					"append": "(${1:directory})"
				},
				{
					"string": "checkdate",
					"append": "(${1:month}, ${2:day}, ${3:year})"
				},
				{
					"string": "checkdnsrr",
					"append": "(${1:host})"
				},
				{
					"string": "chgrp",
					"append": "(${1:filename}, ${2:group})"
				},
				{
					"string": "chmod",
					"append": "(${1:filename}, ${2:mode})"
				},
				{
					"string": "chop",
					"append": "()"
				},
				{
					"string": "chown",
					"append": "(${1:filename}, ${2:user})"
				},
				{
					"string": "chr",
					"append": "(${1:ascii})"
				},
				{
					"string": "chroot",
					"append": "(${1:directory})"
				},
				{
					"string": "chunk_split",
					"append": "(${1:body})"
				},
				{
					"string": "class_alias",
					"append": "()"
				},
				{
					"string": "class_exists",
					"append": "(${1:class_name})"
				},
				{
					"string": "class_implements",
					"append": "(${1:class})"
				},
				{
					"string": "class_parents",
					"append": "(${1:class})"
				},
				{
					"string": "classkit_import",
					"append": "(${1:filename})"
				},
				{
					"string": "classkit_method_add",
					"append": "(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})"
				},
				{
					"string": "classkit_method_copy",
					"append": "(${1:dClass}, ${2:dMethod}, ${3:sClass})"
				},
				{
					"string": "classkit_method_redefine",
					"append": "(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})"
				},
				{
					"string": "classkit_method_remove",
					"append": "(${1:classname}, ${2:methodname})"
				},
				{
					"string": "classkit_method_rename",
					"append": "(${1:classname}, ${2:methodname}, ${3:newname})"
				},
				{
					"string": "clearstatcache",
					"append": "()"
				},
				{
					"string": "closedir",
					"append": "()"
				},
				{
					"string": "closelog",
					"append": "(${1:oid})"
				},
				{
					"string": "com_addref",
					"append": "(${1:oid})"
				},
				{
					"string": "com_create_guid",
					"append": "(${1:oid})"
				},
				{
					"string": "com_event_sink",
					"append": "(${1:comobject}, ${2:sinkobject})"
				},
				{
					"string": "com_get",
					"append": "()"
				},
				{
					"string": "com_get_active_object",
					"append": "(${1:progid})"
				},
				{
					"string": "com_invoke",
					"append": "(${1:com_object}, ${2:function_name})"
				},
				{
					"string": "com_isenum",
					"append": "(${1:com_module})"
				},
				{
					"string": "com_load",
					"append": "()"
				},
				{
					"string": "com_load_typelib",
					"append": "(${1:typelib_name})"
				},
				{
					"string": "com_message_pump",
					"append": "()"
				},
				{
					"string": "com_print_typeinfo",
					"append": "(${1:comobject})"
				},
				{
					"string": "com_propget",
					"append": "()"
				},
				{
					"string": "com_propput",
					"append": "()"
				},
				{
					"string": "com_propset",
					"append": "()"
				},
				{
					"string": "com_release",
					"append": "(${1:oid})"
				},
				{
					"string": "com_set",
					"append": "()"
				},
				{
					"string": "compact",
					"append": "(${1:varname})"
				},
				{
					"string": "connection_aborted",
					"append": "(${1:oid})"
				},
				{
					"string": "connection_status",
					"append": "(${1:oid})"
				},
				{
					"string": "connection_timeout",
					"append": "(${1:oid})"
				},
				{
					"string": "constant",
					"append": "(${1:name})"
				},
				{
					"string": "convert_cyr_string",
					"append": "(${1:str}, ${2:from}, ${3:to})"
				},
				{
					"string": "convert_uudecode",
					"append": "(${1:data})"
				},
				{
					"string": "convert_uuencode",
					"append": "(${1:data})"
				},
				{
					"string": "copy",
					"append": "(${1:source}, ${2:dest})"
				},
				{
					"string": "cos",
					"append": "(${1:arg})"
				},
				{
					"string": "cosh",
					"append": "(${1:arg})"
				},
				{
					"string": "count",
					"append": "(${1:var})"
				},
				{
					"string": "count_chars",
					"append": "(${1:string})"
				},
				{
					"string": "counter_bump",
					"append": "(${1:offset})"
				},
				{
					"string": "counter_bump_value",
					"append": "(${1:counter}, ${2:offset})"
				},
				{
					"string": "counter_create",
					"append": "(${1:name})"
				},
				{
					"string": "counter_get",
					"append": "(${1:oid})"
				},
				{
					"string": "counter_get_meta",
					"append": "(${1:counter}, ${2:attribute})"
				},
				{
					"string": "counter_get_named",
					"append": "(${1:name})"
				},
				{
					"string": "counter_get_value",
					"append": "(${1:counter})"
				},
				{
					"string": "counter_reset",
					"append": "(${1:oid})"
				},
				{
					"string": "counter_reset_value",
					"append": "(${1:counter})"
				},
				{
					"string": "crack_check",
					"append": "(${1:dictionary}, ${2:password})"
				},
				{
					"string": "crack_closedict",
					"append": "()"
				},
				{
					"string": "crack_getlastmessage",
					"append": "(${1:oid})"
				},
				{
					"string": "crack_opendict",
					"append": "(${1:dictionary})"
				},
				{
					"string": "crc32",
					"append": "(${1:str})"
				},
				{
					"string": "create_function",
					"append": "(${1:args}, ${2:code})"
				},
				{
					"string": "crypt",
					"append": "(${1:str})"
				},
				{
					"string": "ctype_alnum",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_alpha",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_cntrl",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_digit",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_graph",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_lower",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_print",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_punct",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_space",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_upper",
					"append": "(${1:text})"
				},
				{
					"string": "ctype_xdigit",
					"append": "(${1:text})"
				},
				{
					"string": "cubrid_affected_rows",
					"append": "()"
				},
				{
					"string": "cubrid_bind",
					"append": "(${1:req_identifier}, ${2:bind_index}, ${3:bind_value})"
				},
				{
					"string": "cubrid_client_encoding",
					"append": "()"
				},
				{
					"string": "cubrid_close",
					"append": "()"
				},
				{
					"string": "cubrid_close_prepare",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_close_request",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_col_get",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:attr_name})"
				},
				{
					"string": "cubrid_col_size",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:attr_name})"
				},
				{
					"string": "cubrid_column_names",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_column_types",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_commit",
					"append": "(${1:conn_identifier})"
				},
				{
					"string": "cubrid_connect",
					"append": "(${1:host}, ${2:port}, ${3:dbname})"
				},
				{
					"string": "cubrid_connect_with_url",
					"append": "(${1:conn_url})"
				},
				{
					"string": "cubrid_current_oid",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_data_seek",
					"append": "(${1:req_identifier}, ${2:row_number})"
				},
				{
					"string": "cubrid_db_name",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "cubrid_disconnect",
					"append": "(${1:conn_identifier})"
				},
				{
					"string": "cubrid_drop",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_errno",
					"append": "()"
				},
				{
					"string": "cubrid_error",
					"append": "()"
				},
				{
					"string": "cubrid_error_code",
					"append": "(${1:oid})"
				},
				{
					"string": "cubrid_error_code_facility",
					"append": "(${1:oid})"
				},
				{
					"string": "cubrid_error_msg",
					"append": "(${1:oid})"
				},
				{
					"string": "cubrid_execute",
					"append": "(${1:conn_identifier}, ${2:SQL})"
				},
				{
					"string": "cubrid_fetch",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_fetch_assoc",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_fetch_field",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_fetch_lengths",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_field_flags",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "cubrid_field_len",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "cubrid_field_name",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "cubrid_field_seek",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_field_table",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "cubrid_field_type",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "cubrid_free_result",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_get",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_get_charset",
					"append": "(${1:conn_identifier})"
				},
				{
					"string": "cubrid_get_class_name",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_get_client_info",
					"append": "(${1:oid})"
				},
				{
					"string": "cubrid_get_db_parameter",
					"append": "(${1:conn_identifier})"
				},
				{
					"string": "cubrid_get_server_info",
					"append": "(${1:conn_identifier})"
				},
				{
					"string": "cubrid_insert_id",
					"append": "(${1:class_name})"
				},
				{
					"string": "cubrid_is_instance",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_list_dbs",
					"append": "(${1:conn_identifier})"
				},
				{
					"string": "cubrid_load_from_glo",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:file_name})"
				},
				{
					"string": "cubrid_lob_close",
					"append": "(${1:lob_identifier_array})"
				},
				{
					"string": "cubrid_lob_export",
					"append": "(${1:conn_identifier}, ${2:lob_identifier}, ${3:path_name})"
				},
				{
					"string": "cubrid_lob_get",
					"append": "(${1:conn_identifier}, ${2:SQL})"
				},
				{
					"string": "cubrid_lob_send",
					"append": "(${1:conn_identifier}, ${2:lob_identifier})"
				},
				{
					"string": "cubrid_lob_size",
					"append": "(${1:lob_identifier})"
				},
				{
					"string": "cubrid_lock_read",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_lock_write",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_move_cursor",
					"append": "(${1:req_identifier}, ${2:offset})"
				},
				{
					"string": "cubrid_new_glo",
					"append": "(${1:conn_identifier}, ${2:class_name}, ${3:file_name})"
				},
				{
					"string": "cubrid_num_cols",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "cubrid_num_rows",
					"append": "(${1:req_identifier})"
				},
				{
					"string": "cubrid_ping",
					"append": "()"
				},
				{
					"string": "cubrid_prepare",
					"append": "(${1:conn_identifier}, ${2:prepare_stmt})"
				},
				{
					"string": "cubrid_put",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_query",
					"append": "(${1:query})"
				},
				{
					"string": "cubrid_real_escape_string",
					"append": "(${1:unescaped_string})"
				},
				{
					"string": "cubrid_result",
					"append": "(${1:result}, ${2:row})"
				},
				{
					"string": "cubrid_rollback",
					"append": "(${1:conn_identifier})"
				},
				{
					"string": "cubrid_save_to_glo",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:file_name})"
				},
				{
					"string": "cubrid_schema",
					"append": "(${1:conn_identifier}, ${2:schema_type})"
				},
				{
					"string": "cubrid_send_glo",
					"append": "(${1:conn_identifier}, ${2:oid})"
				},
				{
					"string": "cubrid_seq_drop",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index})"
				},
				{
					"string": "cubrid_seq_insert",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index}, ${5:seq_element})"
				},
				{
					"string": "cubrid_seq_put",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index}, ${5:seq_element})"
				},
				{
					"string": "cubrid_set_add",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:set_element})"
				},
				{
					"string": "cubrid_set_drop",
					"append": "(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:set_element})"
				},
				{
					"string": "cubrid_unbuffered_query",
					"append": "(${1:query})"
				},
				{
					"string": "cubrid_version",
					"append": "(${1:oid})"
				},
				{
					"string": "curl_close",
					"append": "(${1:ch})"
				},
				{
					"string": "curl_copy_handle",
					"append": "(${1:ch})"
				},
				{
					"string": "curl_errno",
					"append": "(${1:ch})"
				},
				{
					"string": "curl_error",
					"append": "(${1:ch})"
				},
				{
					"string": "curl_exec",
					"append": "(${1:ch})"
				},
				{
					"string": "curl_getinfo",
					"append": "(${1:ch})"
				},
				{
					"string": "curl_init",
					"append": "()"
				},
				{
					"string": "curl_multi_add_handle",
					"append": "(${1:mh}, ${2:ch})"
				},
				{
					"string": "curl_multi_close",
					"append": "(${1:mh})"
				},
				{
					"string": "curl_multi_exec",
					"append": "(${1:mh}, ${2:still_running})"
				},
				{
					"string": "curl_multi_getcontent",
					"append": "(${1:ch})"
				},
				{
					"string": "curl_multi_info_read",
					"append": "(${1:mh})"
				},
				{
					"string": "curl_multi_init",
					"append": "(${1:oid})"
				},
				{
					"string": "curl_multi_remove_handle",
					"append": "(${1:mh}, ${2:ch})"
				},
				{
					"string": "curl_multi_select",
					"append": "(${1:mh})"
				},
				{
					"string": "curl_setopt",
					"append": "(${1:ch}, ${2:option}, ${3:value})"
				},
				{
					"string": "curl_setopt_array",
					"append": "(${1:ch}, ${2:options})"
				},
				{
					"string": "curl_version",
					"append": "()"
				},
				{
					"string": "current",
					"append": "(${1:array})"
				},
				{
					"string": "cyrus_authenticate",
					"append": "(${1:connection})"
				},
				{
					"string": "cyrus_bind",
					"append": "(${1:connection}, ${2:callbacks})"
				},
				{
					"string": "cyrus_close",
					"append": "(${1:connection})"
				},
				{
					"string": "cyrus_connect",
					"append": "()"
				},
				{
					"string": "cyrus_query",
					"append": "(${1:connection}, ${2:query})"
				},
				{
					"string": "cyrus_unbind",
					"append": "(${1:connection}, ${2:trigger_name})"
				},
				{
					"string": "date",
					"append": "(${1:format})"
				},
				{
					"string": "date_add",
					"append": "()"
				},
				{
					"string": "date_create",
					"append": "()"
				},
				{
					"string": "date_create_from_format",
					"append": "()"
				},
				{
					"string": "date_date_set",
					"append": "()"
				},
				{
					"string": "date_default_timezone_get",
					"append": "(${1:oid})"
				},
				{
					"string": "date_default_timezone_set",
					"append": "(${1:timezone_identifier})"
				},
				{
					"string": "date_diff",
					"append": "()"
				},
				{
					"string": "date_format",
					"append": "()"
				},
				{
					"string": "date_get_last_errors",
					"append": "()"
				},
				{
					"string": "date_interval_create_from_date_string",
					"append": "()"
				},
				{
					"string": "date_interval_format",
					"append": "()"
				},
				{
					"string": "date_isodate_set",
					"append": "()"
				},
				{
					"string": "date_modify",
					"append": "()"
				},
				{
					"string": "date_offset_get",
					"append": "()"
				},
				{
					"string": "date_parse",
					"append": "(${1:date})"
				},
				{
					"string": "date_parse_from_format",
					"append": "(${1:format}, ${2:date})"
				},
				{
					"string": "date_sub",
					"append": "()"
				},
				{
					"string": "date_sun_info",
					"append": "(${1:time}, ${2:latitude}, ${3:longitude})"
				},
				{
					"string": "date_sunrise",
					"append": "(${1:timestamp})"
				},
				{
					"string": "date_sunset",
					"append": "(${1:timestamp})"
				},
				{
					"string": "date_time_set",
					"append": "()"
				},
				{
					"string": "date_timestamp_get",
					"append": "()"
				},
				{
					"string": "date_timestamp_set",
					"append": "()"
				},
				{
					"string": "date_timezone_get",
					"append": "()"
				},
				{
					"string": "date_timezone_set",
					"append": "()"
				},
				{
					"string": "db2_autocommit",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_bind_param",
					"append": "(${1:stmt}, ${2:parameter-number}, ${3:variable-name})"
				},
				{
					"string": "db2_client_info",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_close",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_column_privileges",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_columns",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_commit",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_conn_error",
					"append": "()"
				},
				{
					"string": "db2_conn_errormsg",
					"append": "()"
				},
				{
					"string": "db2_connect",
					"append": "(${1:database}, ${2:username}, ${3:password})"
				},
				{
					"string": "db2_cursor_type",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_escape_string",
					"append": "(${1:string_literal})"
				},
				{
					"string": "db2_exec",
					"append": "(${1:connection}, ${2:statement})"
				},
				{
					"string": "db2_execute",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_fetch_array",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_fetch_assoc",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_fetch_both",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_fetch_object",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_fetch_row",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_field_display_size",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_field_name",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_field_num",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_field_precision",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_field_scale",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_field_type",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_field_width",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_foreign_keys",
					"append": "(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name})"
				},
				{
					"string": "db2_free_result",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_free_stmt",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_get_option",
					"append": "(${1:resource}, ${2:option})"
				},
				{
					"string": "db2_last_insert_id",
					"append": "(${1:resource})"
				},
				{
					"string": "db2_lob_read",
					"append": "(${1:stmt}, ${2:colnum}, ${3:length})"
				},
				{
					"string": "db2_next_result",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_num_fields",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_num_rows",
					"append": "(${1:stmt})"
				},
				{
					"string": "db2_pclose",
					"append": "(${1:resource})"
				},
				{
					"string": "db2_pconnect",
					"append": "(${1:database}, ${2:username}, ${3:password})"
				},
				{
					"string": "db2_prepare",
					"append": "(${1:connection}, ${2:statement})"
				},
				{
					"string": "db2_primary_keys",
					"append": "(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name})"
				},
				{
					"string": "db2_procedure_columns",
					"append": "(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:procedure}, ${5:parameter})"
				},
				{
					"string": "db2_procedures",
					"append": "(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:procedure})"
				},
				{
					"string": "db2_result",
					"append": "(${1:stmt}, ${2:column})"
				},
				{
					"string": "db2_rollback",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_server_info",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_set_option",
					"append": "(${1:resource}, ${2:options}, ${3:type})"
				},
				{
					"string": "db2_special_columns",
					"append": "(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table_name}, ${5:scope})"
				},
				{
					"string": "db2_statistics",
					"append": "(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name}, ${5:unique})"
				},
				{
					"string": "db2_stmt_error",
					"append": "()"
				},
				{
					"string": "db2_stmt_errormsg",
					"append": "()"
				},
				{
					"string": "db2_table_privileges",
					"append": "(${1:connection})"
				},
				{
					"string": "db2_tables",
					"append": "(${1:connection})"
				},
				{
					"string": "dba_close",
					"append": "(${1:handle})"
				},
				{
					"string": "dba_delete",
					"append": "(${1:key}, ${2:handle})"
				},
				{
					"string": "dba_exists",
					"append": "(${1:key}, ${2:handle})"
				},
				{
					"string": "dba_fetch",
					"append": "(${1:key}, ${2:handle})"
				},
				{
					"string": "dba_firstkey",
					"append": "(${1:handle})"
				},
				{
					"string": "dba_handlers",
					"append": "()"
				},
				{
					"string": "dba_insert",
					"append": "(${1:key}, ${2:value}, ${3:handle})"
				},
				{
					"string": "dba_key_split",
					"append": "(${1:key})"
				},
				{
					"string": "dba_list",
					"append": "(${1:oid})"
				},
				{
					"string": "dba_nextkey",
					"append": "(${1:handle})"
				},
				{
					"string": "dba_open",
					"append": "(${1:path}, ${2:mode})"
				},
				{
					"string": "dba_optimize",
					"append": "(${1:handle})"
				},
				{
					"string": "dba_popen",
					"append": "(${1:path}, ${2:mode})"
				},
				{
					"string": "dba_replace",
					"append": "(${1:key}, ${2:value}, ${3:handle})"
				},
				{
					"string": "dba_sync",
					"append": "(${1:handle})"
				},
				{
					"string": "dbase_add_record",
					"append": "(${1:dbase_identifier}, ${2:record})"
				},
				{
					"string": "dbase_close",
					"append": "(${1:dbase_identifier})"
				},
				{
					"string": "dbase_create",
					"append": "(${1:filename}, ${2:fields})"
				},
				{
					"string": "dbase_delete_record",
					"append": "(${1:dbase_identifier}, ${2:record_number})"
				},
				{
					"string": "dbase_get_header_info",
					"append": "(${1:dbase_identifier})"
				},
				{
					"string": "dbase_get_record",
					"append": "(${1:dbase_identifier}, ${2:record_number})"
				},
				{
					"string": "dbase_get_record_with_names",
					"append": "(${1:dbase_identifier}, ${2:record_number})"
				},
				{
					"string": "dbase_numfields",
					"append": "(${1:dbase_identifier})"
				},
				{
					"string": "dbase_numrecords",
					"append": "(${1:dbase_identifier})"
				},
				{
					"string": "dbase_open",
					"append": "(${1:filename}, ${2:mode})"
				},
				{
					"string": "dbase_pack",
					"append": "(${1:dbase_identifier})"
				},
				{
					"string": "dbase_replace_record",
					"append": "(${1:dbase_identifier}, ${2:record}, ${3:record_number})"
				},
				{
					"string": "dbplus_add",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_aql",
					"append": "(${1:query})"
				},
				{
					"string": "dbplus_chdir",
					"append": "()"
				},
				{
					"string": "dbplus_close",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_curr",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_errcode",
					"append": "()"
				},
				{
					"string": "dbplus_errno",
					"append": "(${1:oid})"
				},
				{
					"string": "dbplus_find",
					"append": "(${1:relation}, ${2:constraints}, ${3:tuple})"
				},
				{
					"string": "dbplus_first",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_flush",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_freealllocks",
					"append": "(${1:oid})"
				},
				{
					"string": "dbplus_freelock",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_freerlocks",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_getlock",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_getunique",
					"append": "(${1:relation}, ${2:uniqueid})"
				},
				{
					"string": "dbplus_info",
					"append": "(${1:relation}, ${2:key}, ${3:result})"
				},
				{
					"string": "dbplus_last",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_lockrel",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_next",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_open",
					"append": "(${1:name})"
				},
				{
					"string": "dbplus_prev",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_rchperm",
					"append": "(${1:relation}, ${2:mask}, ${3:user}, ${4:group})"
				},
				{
					"string": "dbplus_rcreate",
					"append": "(${1:name}, ${2:domlist})"
				},
				{
					"string": "dbplus_rcrtexact",
					"append": "(${1:name}, ${2:relation})"
				},
				{
					"string": "dbplus_rcrtlike",
					"append": "(${1:name}, ${2:relation})"
				},
				{
					"string": "dbplus_resolve",
					"append": "(${1:relation_name})"
				},
				{
					"string": "dbplus_restorepos",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_rkeys",
					"append": "(${1:relation}, ${2:domlist})"
				},
				{
					"string": "dbplus_ropen",
					"append": "(${1:name})"
				},
				{
					"string": "dbplus_rquery",
					"append": "(${1:query})"
				},
				{
					"string": "dbplus_rrename",
					"append": "(${1:relation}, ${2:name})"
				},
				{
					"string": "dbplus_rsecindex",
					"append": "(${1:relation}, ${2:domlist}, ${3:type})"
				},
				{
					"string": "dbplus_runlink",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_rzap",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_savepos",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_setindex",
					"append": "(${1:relation}, ${2:idx_name})"
				},
				{
					"string": "dbplus_setindexbynumber",
					"append": "(${1:relation}, ${2:idx_number})"
				},
				{
					"string": "dbplus_sql",
					"append": "(${1:query})"
				},
				{
					"string": "dbplus_tcl",
					"append": "(${1:sid}, ${2:script})"
				},
				{
					"string": "dbplus_tremove",
					"append": "(${1:relation}, ${2:tuple})"
				},
				{
					"string": "dbplus_undo",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_undoprepare",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_unlockrel",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_unselect",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_update",
					"append": "(${1:relation}, ${2:old}, ${3:new})"
				},
				{
					"string": "dbplus_xlockrel",
					"append": "(${1:relation})"
				},
				{
					"string": "dbplus_xunlockrel",
					"append": "(${1:relation})"
				},
				{
					"string": "dbx_close",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "dbx_compare",
					"append": "(${1:row_a}, ${2:row_b}, ${3:column_key})"
				},
				{
					"string": "dbx_connect",
					"append": "(${1:module}, ${2:host}, ${3:database}, ${4:username}, ${5:password})"
				},
				{
					"string": "dbx_error",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "dbx_escape_string",
					"append": "(${1:link_identifier}, ${2:text})"
				},
				{
					"string": "dbx_fetch_row",
					"append": "(${1:result_identifier})"
				},
				{
					"string": "dbx_query",
					"append": "(${1:link_identifier}, ${2:sql_statement})"
				},
				{
					"string": "dbx_sort",
					"append": "(${1:result}, ${2:user_compare_function})"
				},
				{
					"string": "dcgettext",
					"append": "(${1:domain}, ${2:message}, ${3:category})"
				},
				{
					"string": "dcngettext",
					"append": "(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:n}, ${5:category})"
				},
				{
					"string": "deaggregate",
					"append": "(${1:object})"
				},
				{
					"string": "debug_backtrace",
					"append": "()"
				},
				{
					"string": "debug_print_backtrace",
					"append": "(${1:oid})"
				},
				{
					"string": "debug_zval_dump",
					"append": "(${1:variable})"
				},
				{
					"string": "decbin",
					"append": "(${1:number})"
				},
				{
					"string": "dechex",
					"append": "(${1:number})"
				},
				{
					"string": "decoct",
					"append": "(${1:number})"
				},
				{
					"string": "define",
					"append": "(${1:name}, ${2:value})"
				},
				{
					"string": "define_syslog_variables",
					"append": "(${1:oid})"
				},
				{
					"string": "defined",
					"append": "(${1:name})"
				},
				{
					"string": "deg2rad",
					"append": "(${1:number})"
				},
				{
					"string": "delete",
					"append": "(${1:oid})"
				},
				{
					"string": "dgettext",
					"append": "(${1:domain}, ${2:message})"
				},
				{
					"string": "die",
					"append": "()"
				},
				{
					"string": "dio_close",
					"append": "(${1:fd})"
				},
				{
					"string": "dio_fcntl",
					"append": "(${1:fd}, ${2:cmd})"
				},
				{
					"string": "dio_open",
					"append": "(${1:filename}, ${2:flags})"
				},
				{
					"string": "dio_read",
					"append": "(${1:fd})"
				},
				{
					"string": "dio_seek",
					"append": "(${1:fd}, ${2:pos})"
				},
				{
					"string": "dio_stat",
					"append": "(${1:fd})"
				},
				{
					"string": "dio_tcsetattr",
					"append": "(${1:fd}, ${2:options})"
				},
				{
					"string": "dio_truncate",
					"append": "(${1:fd}, ${2:offset})"
				},
				{
					"string": "dio_write",
					"append": "(${1:fd}, ${2:data})"
				},
				{
					"string": "dirname",
					"append": "(${1:path})"
				},
				{
					"string": "disk_free_space",
					"append": "(${1:directory})"
				},
				{
					"string": "disk_total_space",
					"append": "(${1:directory})"
				},
				{
					"string": "diskfreespace",
					"append": "()"
				},
				{
					"string": "dl",
					"append": "(${1:library})"
				},
				{
					"string": "dngettext",
					"append": "(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:n})"
				},
				{
					"string": "dns_check_record",
					"append": "()"
				},
				{
					"string": "dns_get_mx",
					"append": "()"
				},
				{
					"string": "dns_get_record",
					"append": "(${1:hostname})"
				},
				{
					"string": "dom_import_simplexml",
					"append": "(${1:node})"
				},
				{
					"string": "domxml_new_doc",
					"append": "(${1:version})"
				},
				{
					"string": "domxml_open_file",
					"append": "(${1:filename})"
				},
				{
					"string": "domxml_open_mem",
					"append": "(${1:str})"
				},
				{
					"string": "domxml_version",
					"append": "(${1:oid})"
				},
				{
					"string": "domxml_xmltree",
					"append": "(${1:str})"
				},
				{
					"string": "domxml_xslt_stylesheet",
					"append": "(${1:xsl_buf})"
				},
				{
					"string": "domxml_xslt_stylesheet_doc",
					"append": "(${1:xsl_doc})"
				},
				{
					"string": "domxml_xslt_stylesheet_file",
					"append": "(${1:xsl_file})"
				},
				{
					"string": "domxml_xslt_version",
					"append": "(${1:oid})"
				},
				{
					"string": "dotnet_load",
					"append": "(${1:assembly_name})"
				},
				{
					"string": "doubleval",
					"append": "()"
				},
				{
					"string": "each",
					"append": "(${1:array})"
				},
				{
					"string": "easter_date",
					"append": "()"
				},
				{
					"string": "easter_days",
					"append": "()"
				},
				{
					"string": "echo",
					"append": "(${1:arg1})"
				},
				{
					"string": "empty",
					"append": "(${1:var})"
				},
				{
					"string": "enchant_broker_describe",
					"append": "(${1:broker})"
				},
				{
					"string": "enchant_broker_dict_exists",
					"append": "(${1:broker}, ${2:tag})"
				},
				{
					"string": "enchant_broker_free",
					"append": "(${1:broker})"
				},
				{
					"string": "enchant_broker_free_dict",
					"append": "(${1:dict})"
				},
				{
					"string": "enchant_broker_get_error",
					"append": "(${1:broker})"
				},
				{
					"string": "enchant_broker_init",
					"append": "(${1:oid})"
				},
				{
					"string": "enchant_broker_list_dicts",
					"append": "(${1:broker})"
				},
				{
					"string": "enchant_broker_request_dict",
					"append": "(${1:broker}, ${2:tag})"
				},
				{
					"string": "enchant_broker_request_pwl_dict",
					"append": "(${1:broker}, ${2:filename})"
				},
				{
					"string": "enchant_broker_set_ordering",
					"append": "(${1:broker}, ${2:tag}, ${3:ordering})"
				},
				{
					"string": "enchant_dict_add_to_personal",
					"append": "(${1:dict}, ${2:word})"
				},
				{
					"string": "enchant_dict_add_to_session",
					"append": "(${1:dict}, ${2:word})"
				},
				{
					"string": "enchant_dict_check",
					"append": "(${1:dict}, ${2:word})"
				},
				{
					"string": "enchant_dict_describe",
					"append": "(${1:dict})"
				},
				{
					"string": "enchant_dict_get_error",
					"append": "(${1:dict})"
				},
				{
					"string": "enchant_dict_is_in_session",
					"append": "(${1:dict}, ${2:word})"
				},
				{
					"string": "enchant_dict_quick_check",
					"append": "(${1:dict}, ${2:word})"
				},
				{
					"string": "enchant_dict_store_replacement",
					"append": "(${1:dict}, ${2:mis}, ${3:cor})"
				},
				{
					"string": "enchant_dict_suggest",
					"append": "(${1:dict}, ${2:word})"
				},
				{
					"string": "end",
					"append": "(${1:array})"
				},
				{
					"string": "ereg",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "ereg_replace",
					"append": "(${1:pattern}, ${2:replacement}, ${3:string})"
				},
				{
					"string": "eregi",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "eregi_replace",
					"append": "(${1:pattern}, ${2:replacement}, ${3:string})"
				},
				{
					"string": "error_get_last",
					"append": "(${1:oid})"
				},
				{
					"string": "error_log",
					"append": "(${1:message})"
				},
				{
					"string": "error_reporting",
					"append": "()"
				},
				{
					"string": "escapeshellarg",
					"append": "(${1:arg})"
				},
				{
					"string": "escapeshellcmd",
					"append": "(${1:command})"
				},
				{
					"string": "eval",
					"append": "(${1:code_str})"
				},
				{
					"string": "event_add",
					"append": "(${1:event})"
				},
				{
					"string": "event_base_free",
					"append": "(${1:event_base})"
				},
				{
					"string": "event_base_loop",
					"append": "(${1:event_base})"
				},
				{
					"string": "event_base_loopbreak",
					"append": "(${1:event_base})"
				},
				{
					"string": "event_base_loopexit",
					"append": "(${1:event_base})"
				},
				{
					"string": "event_base_new",
					"append": "(${1:oid})"
				},
				{
					"string": "event_base_priority_init",
					"append": "(${1:event_base}, ${2:npriorities})"
				},
				{
					"string": "event_base_set",
					"append": "(${1:event}, ${2:event_base})"
				},
				{
					"string": "event_buffer_base_set",
					"append": "(${1:bevent}, ${2:event_base})"
				},
				{
					"string": "event_buffer_disable",
					"append": "(${1:bevent}, ${2:events})"
				},
				{
					"string": "event_buffer_enable",
					"append": "(${1:bevent}, ${2:events})"
				},
				{
					"string": "event_buffer_fd_set",
					"append": "(${1:bevent}, ${2:fd})"
				},
				{
					"string": "event_buffer_free",
					"append": "(${1:bevent})"
				},
				{
					"string": "event_buffer_new",
					"append": "(${1:stream}, ${2:readcb}, ${3:writecb}, ${4:errorcb})"
				},
				{
					"string": "event_buffer_priority_set",
					"append": "(${1:bevent}, ${2:priority})"
				},
				{
					"string": "event_buffer_read",
					"append": "(${1:bevent}, ${2:data_size})"
				},
				{
					"string": "event_buffer_set_callback",
					"append": "(${1:event}, ${2:readcb}, ${3:writecb}, ${4:errorcb})"
				},
				{
					"string": "event_buffer_timeout_set",
					"append": "(${1:bevent}, ${2:read_timeout}, ${3:write_timeout})"
				},
				{
					"string": "event_buffer_watermark_set",
					"append": "(${1:bevent}, ${2:events}, ${3:lowmark}, ${4:highmark})"
				},
				{
					"string": "event_buffer_write",
					"append": "(${1:bevent}, ${2:data})"
				},
				{
					"string": "event_del",
					"append": "(${1:event})"
				},
				{
					"string": "event_free",
					"append": "(${1:event})"
				},
				{
					"string": "event_new",
					"append": "(${1:oid})"
				},
				{
					"string": "event_set",
					"append": "(${1:event}, ${2:fd}, ${3:events}, ${4:callback})"
				},
				{
					"string": "exec",
					"append": "(${1:command})"
				},
				{
					"string": "exif_imagetype",
					"append": "(${1:filename})"
				},
				{
					"string": "exif_read_data",
					"append": "(${1:filename})"
				},
				{
					"string": "exif_tagname",
					"append": "(${1:index})"
				},
				{
					"string": "exif_thumbnail",
					"append": "(${1:filename})"
				},
				{
					"string": "exit",
					"append": "()"
				},
				{
					"string": "exp",
					"append": "(${1:arg})"
				},
				{
					"string": "expect_expectl",
					"append": "(${1:expect}, ${2:cases})"
				},
				{
					"string": "expect_popen",
					"append": "(${1:command})"
				},
				{
					"string": "explode",
					"append": "(${1:delimiter}, ${2:string})"
				},
				{
					"string": "expm1",
					"append": "(${1:arg})"
				},
				{
					"string": "extension_loaded",
					"append": "(${1:name})"
				},
				{
					"string": "extract",
					"append": "(${1:var_array})"
				},
				{
					"string": "ezmlm_hash",
					"append": "(${1:addr})"
				},
				{
					"string": "fam_cancel_monitor",
					"append": "(${1:fam}, ${2:fam_monitor})"
				},
				{
					"string": "fam_close",
					"append": "(${1:fam})"
				},
				{
					"string": "fam_monitor_collection",
					"append": "(${1:fam}, ${2:dirname}, ${3:depth}, ${4:mask})"
				},
				{
					"string": "fam_monitor_directory",
					"append": "(${1:fam}, ${2:dirname})"
				},
				{
					"string": "fam_monitor_file",
					"append": "(${1:fam}, ${2:filename})"
				},
				{
					"string": "fam_next_event",
					"append": "(${1:fam})"
				},
				{
					"string": "fam_open",
					"append": "()"
				},
				{
					"string": "fam_pending",
					"append": "(${1:fam})"
				},
				{
					"string": "fam_resume_monitor",
					"append": "(${1:fam}, ${2:fam_monitor})"
				},
				{
					"string": "fam_suspend_monitor",
					"append": "(${1:fam}, ${2:fam_monitor})"
				},
				{
					"string": "fbsql_affected_rows",
					"append": "()"
				},
				{
					"string": "fbsql_autocommit",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "fbsql_blob_size",
					"append": "(${1:blob_handle})"
				},
				{
					"string": "fbsql_change_user",
					"append": "(${1:user}, ${2:password})"
				},
				{
					"string": "fbsql_clob_size",
					"append": "(${1:clob_handle})"
				},
				{
					"string": "fbsql_close",
					"append": "()"
				},
				{
					"string": "fbsql_commit",
					"append": "()"
				},
				{
					"string": "fbsql_connect",
					"append": "()"
				},
				{
					"string": "fbsql_create_blob",
					"append": "(${1:blob_data})"
				},
				{
					"string": "fbsql_create_clob",
					"append": "(${1:clob_data})"
				},
				{
					"string": "fbsql_create_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "fbsql_data_seek",
					"append": "(${1:result}, ${2:row_number})"
				},
				{
					"string": "fbsql_database",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "fbsql_database_password",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "fbsql_db_query",
					"append": "(${1:database}, ${2:query})"
				},
				{
					"string": "fbsql_db_status",
					"append": "(${1:database_name})"
				},
				{
					"string": "fbsql_drop_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "fbsql_errno",
					"append": "()"
				},
				{
					"string": "fbsql_error",
					"append": "()"
				},
				{
					"string": "fbsql_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_fetch_assoc",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_fetch_field",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_fetch_lengths",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_field_flags",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_field_len",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_field_name",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_field_seek",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_field_table",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_field_type",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_free_result",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_get_autostart_info",
					"append": "()"
				},
				{
					"string": "fbsql_hostname",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "fbsql_insert_id",
					"append": "()"
				},
				{
					"string": "fbsql_list_dbs",
					"append": "()"
				},
				{
					"string": "fbsql_list_fields",
					"append": "(${1:database_name}, ${2:table_name})"
				},
				{
					"string": "fbsql_list_tables",
					"append": "(${1:database})"
				},
				{
					"string": "fbsql_next_result",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_num_rows",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_password",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "fbsql_pconnect",
					"append": "()"
				},
				{
					"string": "fbsql_query",
					"append": "(${1:query})"
				},
				{
					"string": "fbsql_read_blob",
					"append": "(${1:blob_handle})"
				},
				{
					"string": "fbsql_read_clob",
					"append": "(${1:clob_handle})"
				},
				{
					"string": "fbsql_result",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_rollback",
					"append": "()"
				},
				{
					"string": "fbsql_rows_fetched",
					"append": "(${1:result})"
				},
				{
					"string": "fbsql_select_db",
					"append": "()"
				},
				{
					"string": "fbsql_set_characterset",
					"append": "(${1:link_identifier}, ${2:characterset})"
				},
				{
					"string": "fbsql_set_lob_mode",
					"append": "(${1:result}, ${2:lob_mode})"
				},
				{
					"string": "fbsql_set_password",
					"append": "(${1:link_identifier}, ${2:user}, ${3:password}, ${4:old_password})"
				},
				{
					"string": "fbsql_set_transaction",
					"append": "(${1:link_identifier}, ${2:locking}, ${3:isolation})"
				},
				{
					"string": "fbsql_start_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "fbsql_stop_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "fbsql_table_name",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "fbsql_tablename",
					"append": "()"
				},
				{
					"string": "fbsql_username",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "fbsql_warnings",
					"append": "()"
				},
				{
					"string": "fclose",
					"append": "(${1:handle})"
				},
				{
					"string": "fdf_add_doc_javascript",
					"append": "(${1:fdf_document}, ${2:script_name}, ${3:script_code})"
				},
				{
					"string": "fdf_add_template",
					"append": "(${1:fdf_document}, ${2:newpage}, ${3:filename}, ${4:template}, ${5:rename})"
				},
				{
					"string": "fdf_close",
					"append": "(${1:fdf_document})"
				},
				{
					"string": "fdf_create",
					"append": "(${1:oid})"
				},
				{
					"string": "fdf_enum_values",
					"append": "(${1:fdf_document}, ${2:function})"
				},
				{
					"string": "fdf_errno",
					"append": "(${1:oid})"
				},
				{
					"string": "fdf_error",
					"append": "()"
				},
				{
					"string": "fdf_get_ap",
					"append": "(${1:fdf_document}, ${2:field}, ${3:face}, ${4:filename})"
				},
				{
					"string": "fdf_get_attachment",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:savepath})"
				},
				{
					"string": "fdf_get_encoding",
					"append": "(${1:fdf_document})"
				},
				{
					"string": "fdf_get_file",
					"append": "(${1:fdf_document})"
				},
				{
					"string": "fdf_get_flags",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:whichflags})"
				},
				{
					"string": "fdf_get_opt",
					"append": "(${1:fdf_document}, ${2:fieldname})"
				},
				{
					"string": "fdf_get_status",
					"append": "(${1:fdf_document})"
				},
				{
					"string": "fdf_get_value",
					"append": "(${1:fdf_document}, ${2:fieldname})"
				},
				{
					"string": "fdf_get_version",
					"append": "()"
				},
				{
					"string": "fdf_header",
					"append": "(${1:oid})"
				},
				{
					"string": "fdf_next_field_name",
					"append": "(${1:fdf_document})"
				},
				{
					"string": "fdf_open",
					"append": "(${1:filename})"
				},
				{
					"string": "fdf_open_string",
					"append": "(${1:fdf_data})"
				},
				{
					"string": "fdf_remove_item",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:item})"
				},
				{
					"string": "fdf_save",
					"append": "(${1:fdf_document})"
				},
				{
					"string": "fdf_save_string",
					"append": "(${1:fdf_document})"
				},
				{
					"string": "fdf_set_ap",
					"append": "(${1:fdf_document}, ${2:field_name}, ${3:face}, ${4:filename}, ${5:page_number})"
				},
				{
					"string": "fdf_set_encoding",
					"append": "(${1:fdf_document}, ${2:encoding})"
				},
				{
					"string": "fdf_set_file",
					"append": "(${1:fdf_document}, ${2:url})"
				},
				{
					"string": "fdf_set_flags",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:whichFlags}, ${4:newFlags})"
				},
				{
					"string": "fdf_set_javascript_action",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:trigger}, ${4:script})"
				},
				{
					"string": "fdf_set_on_import_javascript",
					"append": "(${1:fdf_document}, ${2:script}, ${3:before_data_import})"
				},
				{
					"string": "fdf_set_opt",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:element}, ${4:str1}, ${5:str2})"
				},
				{
					"string": "fdf_set_status",
					"append": "(${1:fdf_document}, ${2:status})"
				},
				{
					"string": "fdf_set_submit_form_action",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:trigger}, ${4:script}, ${5:flags})"
				},
				{
					"string": "fdf_set_target_frame",
					"append": "(${1:fdf_document}, ${2:frame_name})"
				},
				{
					"string": "fdf_set_value",
					"append": "(${1:fdf_document}, ${2:fieldname}, ${3:value})"
				},
				{
					"string": "fdf_set_version",
					"append": "(${1:fdf_document}, ${2:version})"
				},
				{
					"string": "feof",
					"append": "(${1:handle})"
				},
				{
					"string": "fflush",
					"append": "(${1:handle})"
				},
				{
					"string": "fgetc",
					"append": "(${1:handle})"
				},
				{
					"string": "fgetcsv",
					"append": "(${1:handle})"
				},
				{
					"string": "fgets",
					"append": "(${1:handle})"
				},
				{
					"string": "fgetss",
					"append": "(${1:handle})"
				},
				{
					"string": "file",
					"append": "(${1:filename})"
				},
				{
					"string": "file_exists",
					"append": "(${1:filename})"
				},
				{
					"string": "file_get_contents",
					"append": "(${1:filename})"
				},
				{
					"string": "file_put_contents",
					"append": "(${1:filename}, ${2:data})"
				},
				{
					"string": "fileatime",
					"append": "(${1:filename})"
				},
				{
					"string": "filectime",
					"append": "(${1:filename})"
				},
				{
					"string": "filegroup",
					"append": "(${1:filename})"
				},
				{
					"string": "fileinode",
					"append": "(${1:filename})"
				},
				{
					"string": "filemtime",
					"append": "(${1:filename})"
				},
				{
					"string": "fileowner",
					"append": "(${1:filename})"
				},
				{
					"string": "fileperms",
					"append": "(${1:filename})"
				},
				{
					"string": "filepro",
					"append": "(${1:directory})"
				},
				{
					"string": "filepro_fieldcount",
					"append": "(${1:oid})"
				},
				{
					"string": "filepro_fieldname",
					"append": "(${1:field_number})"
				},
				{
					"string": "filepro_fieldtype",
					"append": "(${1:field_number})"
				},
				{
					"string": "filepro_fieldwidth",
					"append": "(${1:field_number})"
				},
				{
					"string": "filepro_retrieve",
					"append": "(${1:row_number}, ${2:field_number})"
				},
				{
					"string": "filepro_rowcount",
					"append": "(${1:oid})"
				},
				{
					"string": "filesize",
					"append": "(${1:filename})"
				},
				{
					"string": "filetype",
					"append": "(${1:filename})"
				},
				{
					"string": "filter_has_var",
					"append": "(${1:type}, ${2:variable_name})"
				},
				{
					"string": "filter_id",
					"append": "(${1:filtername})"
				},
				{
					"string": "filter_input",
					"append": "(${1:type}, ${2:variable_name})"
				},
				{
					"string": "filter_input_array",
					"append": "(${1:type})"
				},
				{
					"string": "filter_list",
					"append": "(${1:oid})"
				},
				{
					"string": "filter_var",
					"append": "(${1:variable})"
				},
				{
					"string": "filter_var_array",
					"append": "(${1:data})"
				},
				{
					"string": "finfo_buffer",
					"append": "(${1:finfo}, ${2:string = NULL})"
				},
				{
					"string": "finfo_close",
					"append": "(${1:finfo})"
				},
				{
					"string": "finfo_file",
					"append": "(${1:finfo}, ${2:file_name = NULL})"
				},
				{
					"string": "finfo_set_flags",
					"append": "(${1:finfo}, ${2:options})"
				},
				{
					"string": "floatval",
					"append": "(${1:var})"
				},
				{
					"string": "flock",
					"append": "(${1:handle}, ${2:operation})"
				},
				{
					"string": "floor",
					"append": "(${1:value})"
				},
				{
					"string": "flush",
					"append": "(${1:oid})"
				},
				{
					"string": "fmod",
					"append": "(${1:x}, ${2:y})"
				},
				{
					"string": "fnmatch",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "fopen",
					"append": "(${1:filename}, ${2:mode})"
				},
				{
					"string": "forward_static_call",
					"append": "(${1:function})"
				},
				{
					"string": "forward_static_call_array",
					"append": "(${1:function}, ${2:parameters})"
				},
				{
					"string": "fpassthru",
					"append": "(${1:handle})"
				},
				{
					"string": "fprintf",
					"append": "(${1:handle}, ${2:format})"
				},
				{
					"string": "fputcsv",
					"append": "(${1:handle}, ${2:fields})"
				},
				{
					"string": "fputs",
					"append": "()"
				},
				{
					"string": "fread",
					"append": "(${1:handle}, ${2:length})"
				},
				{
					"string": "FrenchToJD",
					"append": "(${1:month}, ${2:day}, ${3:year})"
				},
				{
					"string": "fribidi_log2vis",
					"append": "(${1:str}, ${2:direction}, ${3:charset})"
				},
				{
					"string": "fscanf",
					"append": "(${1:handle}, ${2:format})"
				},
				{
					"string": "fseek",
					"append": "(${1:handle}, ${2:offset})"
				},
				{
					"string": "fsockopen",
					"append": "(${1:hostname})"
				},
				{
					"string": "fstat",
					"append": "(${1:handle})"
				},
				{
					"string": "ftell",
					"append": "(${1:handle})"
				},
				{
					"string": "ftok",
					"append": "(${1:pathname}, ${2:proj})"
				},
				{
					"string": "ftp_alloc",
					"append": "(${1:ftp_stream}, ${2:filesize})"
				},
				{
					"string": "ftp_cdup",
					"append": "(${1:ftp_stream})"
				},
				{
					"string": "ftp_chdir",
					"append": "(${1:ftp_stream}, ${2:directory})"
				},
				{
					"string": "ftp_chmod",
					"append": "(${1:ftp_stream}, ${2:mode}, ${3:filename})"
				},
				{
					"string": "ftp_close",
					"append": "(${1:ftp_stream})"
				},
				{
					"string": "ftp_connect",
					"append": "(${1:host})"
				},
				{
					"string": "ftp_delete",
					"append": "(${1:ftp_stream}, ${2:path})"
				},
				{
					"string": "ftp_exec",
					"append": "(${1:ftp_stream}, ${2:command})"
				},
				{
					"string": "ftp_fget",
					"append": "(${1:ftp_stream}, ${2:handle}, ${3:remote_file}, ${4:mode})"
				},
				{
					"string": "ftp_fput",
					"append": "(${1:ftp_stream}, ${2:remote_file}, ${3:handle}, ${4:mode})"
				},
				{
					"string": "ftp_get",
					"append": "(${1:ftp_stream}, ${2:local_file}, ${3:remote_file}, ${4:mode})"
				},
				{
					"string": "ftp_get_option",
					"append": "(${1:ftp_stream}, ${2:option})"
				},
				{
					"string": "ftp_login",
					"append": "(${1:ftp_stream}, ${2:username}, ${3:password})"
				},
				{
					"string": "ftp_mdtm",
					"append": "(${1:ftp_stream}, ${2:remote_file})"
				},
				{
					"string": "ftp_mkdir",
					"append": "(${1:ftp_stream}, ${2:directory})"
				},
				{
					"string": "ftp_nb_continue",
					"append": "(${1:ftp_stream})"
				},
				{
					"string": "ftp_nb_fget",
					"append": "(${1:ftp_stream}, ${2:handle}, ${3:remote_file}, ${4:mode})"
				},
				{
					"string": "ftp_nb_fput",
					"append": "(${1:ftp_stream}, ${2:remote_file}, ${3:handle}, ${4:mode})"
				},
				{
					"string": "ftp_nb_get",
					"append": "(${1:ftp_stream}, ${2:local_file}, ${3:remote_file}, ${4:mode})"
				},
				{
					"string": "ftp_nb_put",
					"append": "(${1:ftp_stream}, ${2:remote_file}, ${3:local_file}, ${4:mode})"
				},
				{
					"string": "ftp_nlist",
					"append": "(${1:ftp_stream}, ${2:directory})"
				},
				{
					"string": "ftp_pasv",
					"append": "(${1:ftp_stream}, ${2:pasv})"
				},
				{
					"string": "ftp_put",
					"append": "(${1:ftp_stream}, ${2:remote_file}, ${3:local_file}, ${4:mode})"
				},
				{
					"string": "ftp_pwd",
					"append": "(${1:ftp_stream})"
				},
				{
					"string": "ftp_quit",
					"append": "()"
				},
				{
					"string": "ftp_raw",
					"append": "(${1:ftp_stream}, ${2:command})"
				},
				{
					"string": "ftp_rawlist",
					"append": "(${1:ftp_stream}, ${2:directory})"
				},
				{
					"string": "ftp_rename",
					"append": "(${1:ftp_stream}, ${2:oldname}, ${3:newname})"
				},
				{
					"string": "ftp_rmdir",
					"append": "(${1:ftp_stream}, ${2:directory})"
				},
				{
					"string": "ftp_set_option",
					"append": "(${1:ftp_stream}, ${2:option}, ${3:value})"
				},
				{
					"string": "ftp_site",
					"append": "(${1:ftp_stream}, ${2:command})"
				},
				{
					"string": "ftp_size",
					"append": "(${1:ftp_stream}, ${2:remote_file})"
				},
				{
					"string": "ftp_ssl_connect",
					"append": "(${1:host})"
				},
				{
					"string": "ftp_systype",
					"append": "(${1:ftp_stream})"
				},
				{
					"string": "ftruncate",
					"append": "(${1:handle}, ${2:size})"
				},
				{
					"string": "func_get_arg",
					"append": "(${1:arg_num})"
				},
				{
					"string": "func_get_args",
					"append": "(${1:oid})"
				},
				{
					"string": "func_num_args",
					"append": "(${1:oid})"
				},
				{
					"string": "function_exists",
					"append": "(${1:function_name})"
				},
				{
					"string": "fwrite",
					"append": "(${1:handle}, ${2:string})"
				},
				{
					"string": "gc_collect_cycles",
					"append": "(${1:oid})"
				},
				{
					"string": "gc_disable",
					"append": "(${1:oid})"
				},
				{
					"string": "gc_enable",
					"append": "(${1:oid})"
				},
				{
					"string": "gc_enabled",
					"append": "(${1:oid})"
				},
				{
					"string": "gd_info",
					"append": "(${1:oid})"
				},
				{
					"string": "geoip_continent_code_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_country_code3_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_country_code_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_country_name_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_database_info",
					"append": "()"
				},
				{
					"string": "geoip_db_avail",
					"append": "(${1:database})"
				},
				{
					"string": "geoip_db_filename",
					"append": "(${1:database})"
				},
				{
					"string": "geoip_db_get_all_info",
					"append": "(${1:oid})"
				},
				{
					"string": "geoip_id_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_isp_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_org_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_record_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_region_by_name",
					"append": "(${1:hostname})"
				},
				{
					"string": "geoip_region_name_by_code",
					"append": "(${1:country_code}, ${2:region_code})"
				},
				{
					"string": "geoip_time_zone_by_country_and_region",
					"append": "(${1:country_code})"
				},
				{
					"string": "get_browser",
					"append": "()"
				},
				{
					"string": "get_called_class",
					"append": "(${1:oid})"
				},
				{
					"string": "get_cfg_var",
					"append": "(${1:option})"
				},
				{
					"string": "get_class",
					"append": "()"
				},
				{
					"string": "get_class_methods",
					"append": "(${1:class_name})"
				},
				{
					"string": "get_class_vars",
					"append": "(${1:class_name})"
				},
				{
					"string": "get_current_user",
					"append": "(${1:oid})"
				},
				{
					"string": "get_declared_classes",
					"append": "(${1:oid})"
				},
				{
					"string": "get_declared_interfaces",
					"append": "(${1:oid})"
				},
				{
					"string": "get_defined_constants",
					"append": "()"
				},
				{
					"string": "get_defined_functions",
					"append": "(${1:oid})"
				},
				{
					"string": "get_defined_vars",
					"append": "(${1:oid})"
				},
				{
					"string": "get_extension_funcs",
					"append": "(${1:module_name})"
				},
				{
					"string": "get_headers",
					"append": "(${1:url})"
				},
				{
					"string": "get_html_translation_table",
					"append": "()"
				},
				{
					"string": "get_include_path",
					"append": "(${1:oid})"
				},
				{
					"string": "get_included_files",
					"append": "(${1:oid})"
				},
				{
					"string": "get_loaded_extensions",
					"append": "()"
				},
				{
					"string": "get_magic_quotes_gpc",
					"append": "(${1:oid})"
				},
				{
					"string": "get_magic_quotes_runtime",
					"append": "(${1:oid})"
				},
				{
					"string": "get_meta_tags",
					"append": "(${1:filename})"
				},
				{
					"string": "get_object_vars",
					"append": "(${1:object})"
				},
				{
					"string": "get_parent_class",
					"append": "()"
				},
				{
					"string": "get_required_files",
					"append": "()"
				},
				{
					"string": "get_resource_type",
					"append": "(${1:handle})"
				},
				{
					"string": "getallheaders",
					"append": "(${1:oid})"
				},
				{
					"string": "getcwd",
					"append": "(${1:oid})"
				},
				{
					"string": "getdate",
					"append": "()"
				},
				{
					"string": "getenv",
					"append": "(${1:varname})"
				},
				{
					"string": "gethostbyaddr",
					"append": "(${1:ip_address})"
				},
				{
					"string": "gethostbyname",
					"append": "(${1:hostname})"
				},
				{
					"string": "gethostbynamel",
					"append": "(${1:hostname})"
				},
				{
					"string": "gethostname",
					"append": "(${1:oid})"
				},
				{
					"string": "getimagesize",
					"append": "(${1:filename})"
				},
				{
					"string": "getlastmod",
					"append": "(${1:oid})"
				},
				{
					"string": "getmxrr",
					"append": "(${1:hostname}, ${2:mxhosts})"
				},
				{
					"string": "getmygid",
					"append": "(${1:oid})"
				},
				{
					"string": "getmyinode",
					"append": "(${1:oid})"
				},
				{
					"string": "getmypid",
					"append": "(${1:oid})"
				},
				{
					"string": "getmyuid",
					"append": "(${1:oid})"
				},
				{
					"string": "getopt",
					"append": "(${1:options})"
				},
				{
					"string": "getprotobyname",
					"append": "(${1:name})"
				},
				{
					"string": "getprotobynumber",
					"append": "(${1:number})"
				},
				{
					"string": "getrandmax",
					"append": "(${1:oid})"
				},
				{
					"string": "getrusage",
					"append": "()"
				},
				{
					"string": "getservbyname",
					"append": "(${1:service}, ${2:protocol})"
				},
				{
					"string": "getservbyport",
					"append": "(${1:port}, ${2:protocol})"
				},
				{
					"string": "gettext",
					"append": "(${1:message})"
				},
				{
					"string": "gettimeofday",
					"append": "()"
				},
				{
					"string": "gettype",
					"append": "(${1:var})"
				},
				{
					"string": "glob",
					"append": "(${1:pattern})"
				},
				{
					"string": "gmdate",
					"append": "(${1:format})"
				},
				{
					"string": "gmmktime",
					"append": "()"
				},
				{
					"string": "gmp_abs",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_add",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_and",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_clrbit",
					"append": "(${1:a}, ${2:index})"
				},
				{
					"string": "gmp_cmp",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_com",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_div",
					"append": "()"
				},
				{
					"string": "gmp_div_q",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_div_qr",
					"append": "(${1:n}, ${2:d})"
				},
				{
					"string": "gmp_div_r",
					"append": "(${1:n}, ${2:d})"
				},
				{
					"string": "gmp_divexact",
					"append": "(${1:n}, ${2:d})"
				},
				{
					"string": "gmp_fact",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_gcd",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_gcdext",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_hamdist",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_init",
					"append": "(${1:number})"
				},
				{
					"string": "gmp_intval",
					"append": "(${1:gmpnumber})"
				},
				{
					"string": "gmp_invert",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_jacobi",
					"append": "(${1:a}, ${2:p})"
				},
				{
					"string": "gmp_legendre",
					"append": "(${1:a}, ${2:p})"
				},
				{
					"string": "gmp_mod",
					"append": "(${1:n}, ${2:d})"
				},
				{
					"string": "gmp_mul",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_neg",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_nextprime",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_or",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_perfect_square",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_popcount",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_pow",
					"append": "(${1:base}, ${2:exp})"
				},
				{
					"string": "gmp_powm",
					"append": "(${1:base}, ${2:exp}, ${3:mod})"
				},
				{
					"string": "gmp_prob_prime",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_random",
					"append": "()"
				},
				{
					"string": "gmp_scan0",
					"append": "(${1:a}, ${2:start})"
				},
				{
					"string": "gmp_scan1",
					"append": "(${1:a}, ${2:start})"
				},
				{
					"string": "gmp_setbit",
					"append": "(${1:a}, ${2:index})"
				},
				{
					"string": "gmp_sign",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_sqrt",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_sqrtrem",
					"append": "(${1:a})"
				},
				{
					"string": "gmp_strval",
					"append": "(${1:gmpnumber})"
				},
				{
					"string": "gmp_sub",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmp_testbit",
					"append": "(${1:a}, ${2:index})"
				},
				{
					"string": "gmp_xor",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "gmstrftime",
					"append": "(${1:format})"
				},
				{
					"string": "gnupg_adddecryptkey",
					"append": "(${1:identifier}, ${2:fingerprint}, ${3:passphrase})"
				},
				{
					"string": "gnupg_addencryptkey",
					"append": "(${1:identifier}, ${2:fingerprint})"
				},
				{
					"string": "gnupg_addsignkey",
					"append": "(${1:identifier}, ${2:fingerprint})"
				},
				{
					"string": "gnupg_cleardecryptkeys",
					"append": "(${1:identifier})"
				},
				{
					"string": "gnupg_clearencryptkeys",
					"append": "(${1:identifier})"
				},
				{
					"string": "gnupg_clearsignkeys",
					"append": "(${1:identifier})"
				},
				{
					"string": "gnupg_decrypt",
					"append": "(${1:identifier}, ${2:text})"
				},
				{
					"string": "gnupg_decryptverify",
					"append": "(${1:identifier}, ${2:text}, ${3:plaintext})"
				},
				{
					"string": "gnupg_encrypt",
					"append": "(${1:identifier}, ${2:plaintext})"
				},
				{
					"string": "gnupg_encryptsign",
					"append": "(${1:identifier}, ${2:plaintext})"
				},
				{
					"string": "gnupg_export",
					"append": "(${1:identifier}, ${2:fingerprint})"
				},
				{
					"string": "gnupg_geterror",
					"append": "(${1:identifier})"
				},
				{
					"string": "gnupg_getprotocol",
					"append": "(${1:identifier})"
				},
				{
					"string": "gnupg_import",
					"append": "(${1:identifier}, ${2:keydata})"
				},
				{
					"string": "gnupg_init",
					"append": "(${1:oid})"
				},
				{
					"string": "gnupg_keyinfo",
					"append": "(${1:identifier}, ${2:pattern})"
				},
				{
					"string": "gnupg_setarmor",
					"append": "(${1:identifier}, ${2:armor})"
				},
				{
					"string": "gnupg_seterrormode",
					"append": "(${1:identifier}, ${2:errormode})"
				},
				{
					"string": "gnupg_setsignmode",
					"append": "(${1:identifier}, ${2:signmode})"
				},
				{
					"string": "gnupg_sign",
					"append": "(${1:identifier}, ${2:plaintext})"
				},
				{
					"string": "gnupg_verify",
					"append": "(${1:identifier}, ${2:signed_text}, ${3:signature})"
				},
				{
					"string": "gopher_parsedir",
					"append": "(${1:dirent})"
				},
				{
					"string": "grapheme_extract",
					"append": "(${1:haystack}, ${2:size})"
				},
				{
					"string": "grapheme_stripos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "grapheme_stristr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "grapheme_strlen",
					"append": "(${1:input})"
				},
				{
					"string": "grapheme_strpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "grapheme_strripos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "grapheme_strrpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "grapheme_strstr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "grapheme_substr",
					"append": "(${1:string}, ${2:start})"
				},
				{
					"string": "GregorianToJD",
					"append": "(${1:month}, ${2:day}, ${3:year})"
				},
				{
					"string": "gupnp_context_get_host_ip",
					"append": "(${1:context})"
				},
				{
					"string": "gupnp_context_get_port",
					"append": "(${1:context})"
				},
				{
					"string": "gupnp_context_get_subscription_timeout",
					"append": "(${1:context})"
				},
				{
					"string": "gupnp_context_host_path",
					"append": "(${1:context}, ${2:local_path}, ${3:server_path})"
				},
				{
					"string": "gupnp_context_new",
					"append": "()"
				},
				{
					"string": "gupnp_context_set_subscription_timeout",
					"append": "(${1:context}, ${2:timeout})"
				},
				{
					"string": "gupnp_context_timeout_add",
					"append": "(${1:context}, ${2:timeout}, ${3:callback})"
				},
				{
					"string": "gupnp_context_unhost_path",
					"append": "(${1:context}, ${2:server_path})"
				},
				{
					"string": "gupnp_control_point_browse_start",
					"append": "(${1:cpoint})"
				},
				{
					"string": "gupnp_control_point_browse_stop",
					"append": "(${1:cpoint})"
				},
				{
					"string": "gupnp_control_point_callback_set",
					"append": "(${1:cpoint}, ${2:signal}, ${3:callback})"
				},
				{
					"string": "gupnp_control_point_new",
					"append": "(${1:context}, ${2:target})"
				},
				{
					"string": "gupnp_device_action_callback_set",
					"append": "(${1:root_device}, ${2:signal}, ${3:action_name}, ${4:callback})"
				},
				{
					"string": "gupnp_device_info_get",
					"append": "(${1:root_device})"
				},
				{
					"string": "gupnp_device_info_get_service",
					"append": "(${1:root_device}, ${2:type})"
				},
				{
					"string": "gupnp_root_device_get_available",
					"append": "(${1:root_device})"
				},
				{
					"string": "gupnp_root_device_get_relative_location",
					"append": "(${1:root_device})"
				},
				{
					"string": "gupnp_root_device_new",
					"append": "(${1:context}, ${2:location}, ${3:description_dir})"
				},
				{
					"string": "gupnp_root_device_set_available",
					"append": "(${1:root_device}, ${2:available})"
				},
				{
					"string": "gupnp_root_device_start",
					"append": "(${1:root_device})"
				},
				{
					"string": "gupnp_root_device_stop",
					"append": "(${1:root_device})"
				},
				{
					"string": "gupnp_service_action_get",
					"append": "(${1:action}, ${2:name}, ${3:type})"
				},
				{
					"string": "gupnp_service_action_return",
					"append": "(${1:action})"
				},
				{
					"string": "gupnp_service_action_return_error",
					"append": "(${1:action}, ${2:error_code})"
				},
				{
					"string": "gupnp_service_action_set",
					"append": "(${1:action}, ${2:name}, ${3:type}, ${4:value})"
				},
				{
					"string": "gupnp_service_freeze_notify",
					"append": "(${1:service})"
				},
				{
					"string": "gupnp_service_info_get",
					"append": "(${1:proxy})"
				},
				{
					"string": "gupnp_service_info_get_introspection",
					"append": "(${1:proxy})"
				},
				{
					"string": "gupnp_service_introspection_get_state_variable",
					"append": "(${1:introspection}, ${2:variable_name})"
				},
				{
					"string": "gupnp_service_notify",
					"append": "(${1:service}, ${2:name}, ${3:type}, ${4:value})"
				},
				{
					"string": "gupnp_service_proxy_action_get",
					"append": "(${1:proxy}, ${2:action}, ${3:name}, ${4:type})"
				},
				{
					"string": "gupnp_service_proxy_action_set",
					"append": "(${1:proxy}, ${2:action}, ${3:name}, ${4:value}, ${5:type})"
				},
				{
					"string": "gupnp_service_proxy_add_notify",
					"append": "(${1:proxy}, ${2:value}, ${3:type}, ${4:callback})"
				},
				{
					"string": "gupnp_service_proxy_callback_set",
					"append": "(${1:proxy}, ${2:signal}, ${3:callback})"
				},
				{
					"string": "gupnp_service_proxy_get_subscribed",
					"append": "(${1:proxy})"
				},
				{
					"string": "gupnp_service_proxy_remove_notify",
					"append": "(${1:proxy}, ${2:value})"
				},
				{
					"string": "gupnp_service_proxy_set_subscribed",
					"append": "(${1:proxy}, ${2:subscribed})"
				},
				{
					"string": "gupnp_service_thaw_notify",
					"append": "(${1:service})"
				},
				{
					"string": "gzclose",
					"append": "(${1:zp})"
				},
				{
					"string": "gzcompress",
					"append": "(${1:data})"
				},
				{
					"string": "gzdecode",
					"append": "(${1:data})"
				},
				{
					"string": "gzdeflate",
					"append": "(${1:data})"
				},
				{
					"string": "gzencode",
					"append": "(${1:data})"
				},
				{
					"string": "gzeof",
					"append": "(${1:zp})"
				},
				{
					"string": "gzfile",
					"append": "(${1:filename})"
				},
				{
					"string": "gzgetc",
					"append": "(${1:zp})"
				},
				{
					"string": "gzgets",
					"append": "(${1:zp}, ${2:length})"
				},
				{
					"string": "gzgetss",
					"append": "(${1:zp}, ${2:length})"
				},
				{
					"string": "gzinflate",
					"append": "(${1:data})"
				},
				{
					"string": "gzopen",
					"append": "(${1:filename}, ${2:mode})"
				},
				{
					"string": "gzpassthru",
					"append": "(${1:zp})"
				},
				{
					"string": "gzputs",
					"append": "()"
				},
				{
					"string": "gzread",
					"append": "(${1:zp}, ${2:length})"
				},
				{
					"string": "gzrewind",
					"append": "(${1:zp})"
				},
				{
					"string": "gzseek",
					"append": "(${1:zp}, ${2:offset})"
				},
				{
					"string": "gztell",
					"append": "(${1:zp})"
				},
				{
					"string": "gzuncompress",
					"append": "(${1:data})"
				},
				{
					"string": "gzwrite",
					"append": "(${1:zp}, ${2:string})"
				},
				{
					"string": "__halt_compiler",
					"append": "(${1:oid})"
				},
				{
					"string": "hash",
					"append": "(${1:algo}, ${2:data})"
				},
				{
					"string": "hash_algos",
					"append": "(${1:oid})"
				},
				{
					"string": "hash_copy",
					"append": "(${1:context})"
				},
				{
					"string": "hash_file",
					"append": "(${1:algo}, ${2:filename})"
				},
				{
					"string": "hash_final",
					"append": "(${1:context})"
				},
				{
					"string": "hash_hmac",
					"append": "(${1:algo}, ${2:data}, ${3:key})"
				},
				{
					"string": "hash_hmac_file",
					"append": "(${1:algo}, ${2:filename}, ${3:key})"
				},
				{
					"string": "hash_init",
					"append": "(${1:algo})"
				},
				{
					"string": "hash_update",
					"append": "(${1:context}, ${2:data})"
				},
				{
					"string": "hash_update_file",
					"append": "(${1:context}, ${2:filename})"
				},
				{
					"string": "hash_update_stream",
					"append": "(${1:context}, ${2:handle})"
				},
				{
					"string": "header",
					"append": "(${1:string})"
				},
				{
					"string": "header_remove",
					"append": "()"
				},
				{
					"string": "headers_list",
					"append": "(${1:oid})"
				},
				{
					"string": "headers_sent",
					"append": "()"
				},
				{
					"string": "hebrev",
					"append": "(${1:hebrew_text})"
				},
				{
					"string": "hebrevc",
					"append": "(${1:hebrew_text})"
				},
				{
					"string": "hexdec",
					"append": "(${1:hex_string})"
				},
				{
					"string": "highlight_file",
					"append": "(${1:filename})"
				},
				{
					"string": "highlight_string",
					"append": "(${1:str})"
				},
				{
					"string": "html_entity_decode",
					"append": "(${1:string})"
				},
				{
					"string": "htmlentities",
					"append": "(${1:string})"
				},
				{
					"string": "htmlspecialchars",
					"append": "(${1:string})"
				},
				{
					"string": "htmlspecialchars_decode",
					"append": "(${1:string})"
				},
				{
					"string": "http_build_cookie",
					"append": "(${1:cookie})"
				},
				{
					"string": "http_build_query",
					"append": "(${1:query_data})"
				},
				{
					"string": "http_build_str",
					"append": "(${1:query})"
				},
				{
					"string": "http_build_url",
					"append": "()"
				},
				{
					"string": "http_cache_etag",
					"append": "()"
				},
				{
					"string": "http_cache_last_modified",
					"append": "()"
				},
				{
					"string": "http_chunked_decode",
					"append": "(${1:encoded})"
				},
				{
					"string": "http_date",
					"append": "()"
				},
				{
					"string": "http_deflate",
					"append": "(${1:data})"
				},
				{
					"string": "http_get",
					"append": "(${1:url})"
				},
				{
					"string": "http_get_request_body",
					"append": "(${1:oid})"
				},
				{
					"string": "http_get_request_body_stream",
					"append": "(${1:oid})"
				},
				{
					"string": "http_get_request_headers",
					"append": "(${1:oid})"
				},
				{
					"string": "http_head",
					"append": "(${1:url})"
				},
				{
					"string": "http_inflate",
					"append": "(${1:data})"
				},
				{
					"string": "http_match_etag",
					"append": "(${1:etag})"
				},
				{
					"string": "http_match_modified",
					"append": "()"
				},
				{
					"string": "http_match_request_header",
					"append": "(${1:header}, ${2:value})"
				},
				{
					"string": "http_negotiate_charset",
					"append": "(${1:supported})"
				},
				{
					"string": "http_negotiate_content_type",
					"append": "(${1:supported})"
				},
				{
					"string": "http_negotiate_language",
					"append": "(${1:supported})"
				},
				{
					"string": "http_parse_cookie",
					"append": "(${1:cookie})"
				},
				{
					"string": "http_parse_headers",
					"append": "(${1:header})"
				},
				{
					"string": "http_parse_message",
					"append": "(${1:message})"
				},
				{
					"string": "http_parse_params",
					"append": "(${1:param})"
				},
				{
					"string": "http_persistent_handles_clean",
					"append": "()"
				},
				{
					"string": "http_persistent_handles_count",
					"append": "(${1:oid})"
				},
				{
					"string": "http_persistent_handles_ident",
					"append": "()"
				},
				{
					"string": "http_post_data",
					"append": "(${1:url}, ${2:data})"
				},
				{
					"string": "http_post_fields",
					"append": "(${1:url}, ${2:data})"
				},
				{
					"string": "http_put_data",
					"append": "(${1:url}, ${2:data})"
				},
				{
					"string": "http_put_file",
					"append": "(${1:url}, ${2:file})"
				},
				{
					"string": "http_put_stream",
					"append": "(${1:url}, ${2:stream})"
				},
				{
					"string": "http_redirect",
					"append": "()"
				},
				{
					"string": "http_request",
					"append": "(${1:method}, ${2:url})"
				},
				{
					"string": "http_request_body_encode",
					"append": "(${1:fields}, ${2:files})"
				},
				{
					"string": "http_request_method_exists",
					"append": "(${1:method})"
				},
				{
					"string": "http_request_method_name",
					"append": "(${1:method})"
				},
				{
					"string": "http_request_method_register",
					"append": "(${1:method})"
				},
				{
					"string": "http_request_method_unregister",
					"append": "(${1:method})"
				},
				{
					"string": "http_send_content_disposition",
					"append": "(${1:filename})"
				},
				{
					"string": "http_send_content_type",
					"append": "()"
				},
				{
					"string": "http_send_data",
					"append": "(${1:data})"
				},
				{
					"string": "http_send_file",
					"append": "(${1:file})"
				},
				{
					"string": "http_send_last_modified",
					"append": "()"
				},
				{
					"string": "http_send_status",
					"append": "(${1:status})"
				},
				{
					"string": "http_send_stream",
					"append": "(${1:stream})"
				},
				{
					"string": "http_support",
					"append": "()"
				},
				{
					"string": "http_throttle",
					"append": "(${1:sec})"
				},
				{
					"string": "hw_Array2Objrec",
					"append": "(${1:object_array})"
				},
				{
					"string": "hw_changeobject",
					"append": "(${1:link}, ${2:objid}, ${3:attributes})"
				},
				{
					"string": "hw_Children",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_ChildrenObj",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_Close",
					"append": "(${1:connection})"
				},
				{
					"string": "hw_Connect",
					"append": "(${1:host}, ${2:port})"
				},
				{
					"string": "hw_connection_info",
					"append": "(${1:link})"
				},
				{
					"string": "hw_cp",
					"append": "(${1:connection}, ${2:object_id_array}, ${3:destination_id})"
				},
				{
					"string": "hw_Deleteobject",
					"append": "(${1:connection}, ${2:object_to_delete})"
				},
				{
					"string": "hw_DocByAnchor",
					"append": "(${1:connection}, ${2:anchorID})"
				},
				{
					"string": "hw_DocByAnchorObj",
					"append": "(${1:connection}, ${2:anchorID})"
				},
				{
					"string": "hw_Document_Attributes",
					"append": "(${1:hw_document})"
				},
				{
					"string": "hw_Document_BodyTag",
					"append": "(${1:hw_document})"
				},
				{
					"string": "hw_Document_Content",
					"append": "(${1:hw_document})"
				},
				{
					"string": "hw_Document_SetContent",
					"append": "(${1:hw_document}, ${2:content})"
				},
				{
					"string": "hw_Document_Size",
					"append": "(${1:hw_document})"
				},
				{
					"string": "hw_dummy",
					"append": "(${1:link}, ${2:id}, ${3:msgid})"
				},
				{
					"string": "hw_EditText",
					"append": "(${1:connection}, ${2:hw_document})"
				},
				{
					"string": "hw_Error",
					"append": "(${1:connection})"
				},
				{
					"string": "hw_ErrorMsg",
					"append": "(${1:connection})"
				},
				{
					"string": "hw_Free_Document",
					"append": "(${1:hw_document})"
				},
				{
					"string": "hw_GetAnchors",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetAnchorsObj",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetAndLock",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetChildColl",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetChildCollObj",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetChildDocColl",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetChildDocCollObj",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetObject",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetObjectByQuery",
					"append": "(${1:connection}, ${2:query}, ${3:max_hits})"
				},
				{
					"string": "hw_GetObjectByQueryColl",
					"append": "(${1:connection}, ${2:objectID}, ${3:query}, ${4:max_hits})"
				},
				{
					"string": "hw_GetObjectByQueryCollObj",
					"append": "(${1:connection}, ${2:objectID}, ${3:query}, ${4:max_hits})"
				},
				{
					"string": "hw_GetObjectByQueryObj",
					"append": "(${1:connection}, ${2:query}, ${3:max_hits})"
				},
				{
					"string": "hw_GetParents",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetParentsObj",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_getrellink",
					"append": "(${1:link}, ${2:rootid}, ${3:sourceid}, ${4:destid})"
				},
				{
					"string": "hw_GetRemote",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_getremotechildren",
					"append": "(${1:connection}, ${2:object_record})"
				},
				{
					"string": "hw_GetSrcByDestObj",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_GetText",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_getusername",
					"append": "(${1:connection})"
				},
				{
					"string": "hw_Identify",
					"append": "(${1:link}, ${2:username}, ${3:password})"
				},
				{
					"string": "hw_InCollections",
					"append": "(${1:connection}, ${2:object_id_array}, ${3:collection_id_array}, ${4:return_collections})"
				},
				{
					"string": "hw_Info",
					"append": "(${1:connection})"
				},
				{
					"string": "hw_InsColl",
					"append": "(${1:connection}, ${2:objectID}, ${3:object_array})"
				},
				{
					"string": "hw_InsDoc",
					"append": "(${1:connection}, ${2:parentID}, ${3:object_record})"
				},
				{
					"string": "hw_insertanchors",
					"append": "(${1:hwdoc}, ${2:anchorecs}, ${3:dest})"
				},
				{
					"string": "hw_InsertDocument",
					"append": "(${1:connection}, ${2:parent_id}, ${3:hw_document})"
				},
				{
					"string": "hw_InsertObject",
					"append": "(${1:connection}, ${2:object_rec}, ${3:parameter})"
				},
				{
					"string": "hw_mapid",
					"append": "(${1:connection}, ${2:server_id}, ${3:object_id})"
				},
				{
					"string": "hw_Modifyobject",
					"append": "(${1:connection}, ${2:object_to_change}, ${3:remove}, ${4:add})"
				},
				{
					"string": "hw_mv",
					"append": "(${1:connection}, ${2:object_id_array}, ${3:source_id}, ${4:destination_id})"
				},
				{
					"string": "hw_New_Document",
					"append": "(${1:object_record}, ${2:document_data}, ${3:document_size})"
				},
				{
					"string": "hw_objrec2array",
					"append": "(${1:object_record})"
				},
				{
					"string": "hw_Output_Document",
					"append": "(${1:hw_document})"
				},
				{
					"string": "hw_pConnect",
					"append": "(${1:host}, ${2:port})"
				},
				{
					"string": "hw_PipeDocument",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_Root",
					"append": "(${1:oid})"
				},
				{
					"string": "hw_setlinkroot",
					"append": "(${1:link}, ${2:rootid})"
				},
				{
					"string": "hw_stat",
					"append": "(${1:link})"
				},
				{
					"string": "hw_Unlock",
					"append": "(${1:connection}, ${2:objectID})"
				},
				{
					"string": "hw_Who",
					"append": "(${1:connection})"
				},
				{
					"string": "hw_api_attribute",
					"append": "()"
				},
				{
					"string": "hwapi_hgcsp",
					"append": "(${1:hostname})"
				},
				{
					"string": "hw_api_content",
					"append": "(${1:content}, ${2:mimetype})"
				},
				{
					"string": "hw_api_object",
					"append": "(${1:parameter})"
				},
				{
					"string": "hypot",
					"append": "(${1:x}, ${2:y})"
				},
				{
					"string": "ibase_add_user",
					"append": "(${1:service_handle}, ${2:user_name}, ${3:password})"
				},
				{
					"string": "ibase_affected_rows",
					"append": "()"
				},
				{
					"string": "ibase_backup",
					"append": "(${1:service_handle}, ${2:source_db}, ${3:dest_file})"
				},
				{
					"string": "ibase_blob_add",
					"append": "(${1:blob_handle}, ${2:data})"
				},
				{
					"string": "ibase_blob_cancel",
					"append": "(${1:blob_handle})"
				},
				{
					"string": "ibase_blob_close",
					"append": "(${1:blob_handle})"
				},
				{
					"string": "ibase_blob_create",
					"append": "()"
				},
				{
					"string": "ibase_blob_echo",
					"append": "(${1:blob_id})"
				},
				{
					"string": "ibase_blob_get",
					"append": "(${1:blob_handle}, ${2:len})"
				},
				{
					"string": "ibase_blob_import",
					"append": "(${1:link_identifier}, ${2:file_handle})"
				},
				{
					"string": "ibase_blob_info",
					"append": "(${1:link_identifier}, ${2:blob_id})"
				},
				{
					"string": "ibase_blob_open",
					"append": "(${1:link_identifier}, ${2:blob_id})"
				},
				{
					"string": "ibase_close",
					"append": "()"
				},
				{
					"string": "ibase_commit",
					"append": "()"
				},
				{
					"string": "ibase_commit_ret",
					"append": "()"
				},
				{
					"string": "ibase_connect",
					"append": "()"
				},
				{
					"string": "ibase_db_info",
					"append": "(${1:service_handle}, ${2:db}, ${3:action})"
				},
				{
					"string": "ibase_delete_user",
					"append": "(${1:service_handle}, ${2:user_name})"
				},
				{
					"string": "ibase_drop_db",
					"append": "()"
				},
				{
					"string": "ibase_errcode",
					"append": "(${1:oid})"
				},
				{
					"string": "ibase_errmsg",
					"append": "(${1:oid})"
				},
				{
					"string": "ibase_execute",
					"append": "(${1:query})"
				},
				{
					"string": "ibase_fetch_assoc",
					"append": "(${1:result})"
				},
				{
					"string": "ibase_fetch_object",
					"append": "(${1:result_id})"
				},
				{
					"string": "ibase_fetch_row",
					"append": "(${1:result_identifier})"
				},
				{
					"string": "ibase_field_info",
					"append": "(${1:result}, ${2:field_number})"
				},
				{
					"string": "ibase_free_event_handler",
					"append": "(${1:event})"
				},
				{
					"string": "ibase_free_query",
					"append": "(${1:query})"
				},
				{
					"string": "ibase_free_result",
					"append": "(${1:result_identifier})"
				},
				{
					"string": "ibase_gen_id",
					"append": "(${1:generator})"
				},
				{
					"string": "ibase_maintain_db",
					"append": "(${1:service_handle}, ${2:db}, ${3:action})"
				},
				{
					"string": "ibase_modify_user",
					"append": "(${1:service_handle}, ${2:user_name}, ${3:password})"
				},
				{
					"string": "ibase_name_result",
					"append": "(${1:result}, ${2:name})"
				},
				{
					"string": "ibase_num_fields",
					"append": "(${1:result_id})"
				},
				{
					"string": "ibase_num_params",
					"append": "(${1:query})"
				},
				{
					"string": "ibase_param_info",
					"append": "(${1:query}, ${2:param_number})"
				},
				{
					"string": "ibase_pconnect",
					"append": "()"
				},
				{
					"string": "ibase_prepare",
					"append": "(${1:query})"
				},
				{
					"string": "ibase_query",
					"append": "()"
				},
				{
					"string": "ibase_restore",
					"append": "(${1:service_handle}, ${2:source_file}, ${3:dest_db})"
				},
				{
					"string": "ibase_rollback",
					"append": "()"
				},
				{
					"string": "ibase_rollback_ret",
					"append": "()"
				},
				{
					"string": "ibase_server_info",
					"append": "(${1:service_handle}, ${2:action})"
				},
				{
					"string": "ibase_service_attach",
					"append": "(${1:host}, ${2:dba_username}, ${3:dba_password})"
				},
				{
					"string": "ibase_service_detach",
					"append": "(${1:service_handle})"
				},
				{
					"string": "ibase_set_event_handler",
					"append": "(${1:event_handler}, ${2:event_name1})"
				},
				{
					"string": "ibase_timefmt",
					"append": "(${1:format})"
				},
				{
					"string": "ibase_trans",
					"append": "()"
				},
				{
					"string": "ibase_wait_event",
					"append": "(${1:event_name1})"
				},
				{
					"string": "iconv",
					"append": "(${1:in_charset}, ${2:out_charset}, ${3:str})"
				},
				{
					"string": "iconv_get_encoding",
					"append": "()"
				},
				{
					"string": "iconv_mime_decode",
					"append": "(${1:encoded_header})"
				},
				{
					"string": "iconv_mime_decode_headers",
					"append": "(${1:encoded_headers})"
				},
				{
					"string": "iconv_mime_encode",
					"append": "(${1:field_name}, ${2:field_value})"
				},
				{
					"string": "iconv_set_encoding",
					"append": "(${1:type}, ${2:charset})"
				},
				{
					"string": "iconv_strlen",
					"append": "(${1:str})"
				},
				{
					"string": "iconv_strpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "iconv_strrpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "iconv_substr",
					"append": "(${1:str}, ${2:offset})"
				},
				{
					"string": "id3_get_frame_long_name",
					"append": "(${1:frameId})"
				},
				{
					"string": "id3_get_frame_short_name",
					"append": "(${1:frameId})"
				},
				{
					"string": "id3_get_genre_id",
					"append": "(${1:genre})"
				},
				{
					"string": "id3_get_genre_list",
					"append": "(${1:oid})"
				},
				{
					"string": "id3_get_genre_name",
					"append": "(${1:genre_id})"
				},
				{
					"string": "id3_get_tag",
					"append": "(${1:filename})"
				},
				{
					"string": "id3_get_version",
					"append": "(${1:filename})"
				},
				{
					"string": "id3_remove_tag",
					"append": "(${1:filename})"
				},
				{
					"string": "id3_set_tag",
					"append": "(${1:filename}, ${2:tag})"
				},
				{
					"string": "idate",
					"append": "(${1:format})"
				},
				{
					"string": "idn_to_ascii",
					"append": "(${1:domain})"
				},
				{
					"string": "idn_to_unicode",
					"append": "()"
				},
				{
					"string": "idn_to_utf8",
					"append": "(${1:domain})"
				},
				{
					"string": "ifx_affected_rows",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_blobinfile_mode",
					"append": "(${1:mode})"
				},
				{
					"string": "ifx_byteasvarchar",
					"append": "(${1:mode})"
				},
				{
					"string": "ifx_close",
					"append": "()"
				},
				{
					"string": "ifx_connect",
					"append": "()"
				},
				{
					"string": "ifx_copy_blob",
					"append": "(${1:bid})"
				},
				{
					"string": "ifx_create_blob",
					"append": "(${1:type}, ${2:mode}, ${3:param})"
				},
				{
					"string": "ifx_create_char",
					"append": "(${1:param})"
				},
				{
					"string": "ifx_do",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_error",
					"append": "()"
				},
				{
					"string": "ifx_errormsg",
					"append": "()"
				},
				{
					"string": "ifx_fetch_row",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_fieldproperties",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_fieldtypes",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_free_blob",
					"append": "(${1:bid})"
				},
				{
					"string": "ifx_free_char",
					"append": "(${1:bid})"
				},
				{
					"string": "ifx_free_result",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_get_blob",
					"append": "(${1:bid})"
				},
				{
					"string": "ifx_get_char",
					"append": "(${1:bid})"
				},
				{
					"string": "ifx_getsqlca",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_htmltbl_result",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_nullformat",
					"append": "(${1:mode})"
				},
				{
					"string": "ifx_num_fields",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_num_rows",
					"append": "(${1:result_id})"
				},
				{
					"string": "ifx_pconnect",
					"append": "()"
				},
				{
					"string": "ifx_prepare",
					"append": "(${1:query}, ${2:link_identifier})"
				},
				{
					"string": "ifx_query",
					"append": "(${1:query}, ${2:link_identifier})"
				},
				{
					"string": "ifx_textasvarchar",
					"append": "(${1:mode})"
				},
				{
					"string": "ifx_update_blob",
					"append": "(${1:bid}, ${2:content})"
				},
				{
					"string": "ifx_update_char",
					"append": "(${1:bid}, ${2:content})"
				},
				{
					"string": "ifxus_close_slob",
					"append": "(${1:bid})"
				},
				{
					"string": "ifxus_create_slob",
					"append": "(${1:mode})"
				},
				{
					"string": "ifxus_free_slob",
					"append": "(${1:bid})"
				},
				{
					"string": "ifxus_open_slob",
					"append": "(${1:bid}, ${2:mode})"
				},
				{
					"string": "ifxus_read_slob",
					"append": "(${1:bid}, ${2:nbytes})"
				},
				{
					"string": "ifxus_seek_slob",
					"append": "(${1:bid}, ${2:mode}, ${3:offset})"
				},
				{
					"string": "ifxus_tell_slob",
					"append": "(${1:bid})"
				},
				{
					"string": "ifxus_write_slob",
					"append": "(${1:bid}, ${2:content})"
				},
				{
					"string": "ignore_user_abort",
					"append": "()"
				},
				{
					"string": "iis_add_server",
					"append": "(${1:path}, ${2:comment}, ${3:server_ip}, ${4:port}, ${5:host_name}, ${6:rights}, ${7:start_server})"
				},
				{
					"string": "iis_get_dir_security",
					"append": "(${1:server_instance}, ${2:virtual_path})"
				},
				{
					"string": "iis_get_script_map",
					"append": "(${1:server_instance}, ${2:virtual_path}, ${3:script_extension})"
				},
				{
					"string": "iis_get_server_by_comment",
					"append": "(${1:comment})"
				},
				{
					"string": "iis_get_server_by_path",
					"append": "(${1:path})"
				},
				{
					"string": "iis_get_server_rights",
					"append": "(${1:server_instance}, ${2:virtual_path})"
				},
				{
					"string": "iis_get_service_state",
					"append": "(${1:service_id})"
				},
				{
					"string": "iis_remove_server",
					"append": "(${1:server_instance})"
				},
				{
					"string": "iis_set_app_settings",
					"append": "(${1:server_instance}, ${2:virtual_path}, ${3:application_scope})"
				},
				{
					"string": "iis_set_dir_security",
					"append": "(${1:server_instance}, ${2:virtual_path}, ${3:directory_flags})"
				},
				{
					"string": "iis_set_script_map",
					"append": "(${1:server_instance}, ${2:virtual_path}, ${3:script_extension}, ${4:engine_path}, ${5:allow_scripting})"
				},
				{
					"string": "iis_set_server_rights",
					"append": "(${1:server_instance}, ${2:virtual_path}, ${3:directory_flags})"
				},
				{
					"string": "iis_start_server",
					"append": "(${1:server_instance})"
				},
				{
					"string": "iis_start_service",
					"append": "(${1:service_id})"
				},
				{
					"string": "iis_stop_server",
					"append": "(${1:server_instance})"
				},
				{
					"string": "iis_stop_service",
					"append": "(${1:service_id})"
				},
				{
					"string": "image2wbmp",
					"append": "(${1:image})"
				},
				{
					"string": "image_type_to_extension",
					"append": "(${1:imagetype})"
				},
				{
					"string": "image_type_to_mime_type",
					"append": "(${1:imagetype})"
				},
				{
					"string": "imagealphablending",
					"append": "(${1:image}, ${2:blendmode})"
				},
				{
					"string": "imageantialias",
					"append": "(${1:image}, ${2:enabled})"
				},
				{
					"string": "imagearc",
					"append": "(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:start}, ${7:end}, ${8:color})"
				},
				{
					"string": "imagechar",
					"append": "(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:color})"
				},
				{
					"string": "imagecharup",
					"append": "(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:color})"
				},
				{
					"string": "imagecolorallocate",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "imagecolorallocatealpha",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})"
				},
				{
					"string": "imagecolorat",
					"append": "(${1:image}, ${2:x}, ${3:y})"
				},
				{
					"string": "imagecolorclosest",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "imagecolorclosestalpha",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})"
				},
				{
					"string": "imagecolorclosesthwb",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "imagecolordeallocate",
					"append": "(${1:image}, ${2:color})"
				},
				{
					"string": "imagecolorexact",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "imagecolorexactalpha",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})"
				},
				{
					"string": "imagecolormatch",
					"append": "(${1:image1}, ${2:image2})"
				},
				{
					"string": "imagecolorresolve",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "imagecolorresolvealpha",
					"append": "(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})"
				},
				{
					"string": "imagecolorset",
					"append": "(${1:image}, ${2:index}, ${3:red}, ${4:green}, ${5:blue})"
				},
				{
					"string": "imagecolorsforindex",
					"append": "(${1:image}, ${2:index})"
				},
				{
					"string": "imagecolorstotal",
					"append": "(${1:image})"
				},
				{
					"string": "imagecolortransparent",
					"append": "(${1:image})"
				},
				{
					"string": "imageconvolution",
					"append": "(${1:image}, ${2:matrix}, ${3:div}, ${4:offset})"
				},
				{
					"string": "imagecopy",
					"append": "(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h})"
				},
				{
					"string": "imagecopymerge",
					"append": "(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})"
				},
				{
					"string": "imagecopymergegray",
					"append": "(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})"
				},
				{
					"string": "imagecopyresampled",
					"append": "(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})"
				},
				{
					"string": "imagecopyresized",
					"append": "(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})"
				},
				{
					"string": "imagecreate",
					"append": "(${1:width}, ${2:height})"
				},
				{
					"string": "imagecreatefromgd",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatefromgd2",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatefromgd2part",
					"append": "(${1:filename}, ${2:srcX}, ${3:srcY}, ${4:width}, ${5:height})"
				},
				{
					"string": "imagecreatefromgif",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatefromjpeg",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatefrompng",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatefromstring",
					"append": "(${1:data})"
				},
				{
					"string": "imagecreatefromwbmp",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatefromxbm",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatefromxpm",
					"append": "(${1:filename})"
				},
				{
					"string": "imagecreatetruecolor",
					"append": "(${1:width}, ${2:height})"
				},
				{
					"string": "imagedashedline",
					"append": "(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})"
				},
				{
					"string": "imagedestroy",
					"append": "(${1:image})"
				},
				{
					"string": "imageellipse",
					"append": "(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:color})"
				},
				{
					"string": "imagefill",
					"append": "(${1:image}, ${2:x}, ${3:y}, ${4:color})"
				},
				{
					"string": "imagefilledarc",
					"append": "(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:start}, ${7:end}, ${8:color}, ${9:style})"
				},
				{
					"string": "imagefilledellipse",
					"append": "(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:color})"
				},
				{
					"string": "imagefilledpolygon",
					"append": "(${1:image}, ${2:points}, ${3:num_points}, ${4:color})"
				},
				{
					"string": "imagefilledrectangle",
					"append": "(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})"
				},
				{
					"string": "imagefilltoborder",
					"append": "(${1:image}, ${2:x}, ${3:y}, ${4:border}, ${5:color})"
				},
				{
					"string": "imagefilter",
					"append": "(${1:image}, ${2:filtertype})"
				},
				{
					"string": "imagefontheight",
					"append": "(${1:font})"
				},
				{
					"string": "imagefontwidth",
					"append": "(${1:font})"
				},
				{
					"string": "imageftbbox",
					"append": "(${1:size}, ${2:angle}, ${3:fontfile}, ${4:text})"
				},
				{
					"string": "imagefttext",
					"append": "(${1:image}, ${2:size}, ${3:angle}, ${4:x}, ${5:y}, ${6:color}, ${7:fontfile}, ${8:text})"
				},
				{
					"string": "imagegammacorrect",
					"append": "(${1:image}, ${2:inputgamma}, ${3:outputgamma})"
				},
				{
					"string": "imagegd",
					"append": "(${1:image})"
				},
				{
					"string": "imagegd2",
					"append": "(${1:image})"
				},
				{
					"string": "imagegif",
					"append": "(${1:image})"
				},
				{
					"string": "imagegrabscreen",
					"append": "(${1:oid})"
				},
				{
					"string": "imagegrabwindow",
					"append": "(${1:window_handle})"
				},
				{
					"string": "imageinterlace",
					"append": "(${1:image})"
				},
				{
					"string": "imageistruecolor",
					"append": "(${1:image})"
				},
				{
					"string": "imagejpeg",
					"append": "(${1:image})"
				},
				{
					"string": "imagelayereffect",
					"append": "(${1:image}, ${2:effect})"
				},
				{
					"string": "imageline",
					"append": "(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})"
				},
				{
					"string": "imageloadfont",
					"append": "(${1:file})"
				},
				{
					"string": "imagepalettecopy",
					"append": "(${1:destination}, ${2:source})"
				},
				{
					"string": "imagepng",
					"append": "(${1:image})"
				},
				{
					"string": "imagepolygon",
					"append": "(${1:image}, ${2:points}, ${3:num_points}, ${4:color})"
				},
				{
					"string": "imagepsbbox",
					"append": "(${1:text}, ${2:font}, ${3:size})"
				},
				{
					"string": "imagepsencodefont",
					"append": "(${1:font_index}, ${2:encodingfile})"
				},
				{
					"string": "imagepsextendfont",
					"append": "(${1:font_index}, ${2:extend})"
				},
				{
					"string": "imagepsfreefont",
					"append": "(${1:font_index})"
				},
				{
					"string": "imagepsloadfont",
					"append": "(${1:filename})"
				},
				{
					"string": "imagepsslantfont",
					"append": "(${1:font_index}, ${2:slant})"
				},
				{
					"string": "imagepstext",
					"append": "(${1:image}, ${2:text}, ${3:font_index}, ${4:size}, ${5:foreground}, ${6:background}, ${7:x}, ${8:y})"
				},
				{
					"string": "imagerectangle",
					"append": "(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})"
				},
				{
					"string": "imagerotate",
					"append": "(${1:image}, ${2:angle}, ${3:bgd_color})"
				},
				{
					"string": "imagesavealpha",
					"append": "(${1:image}, ${2:saveflag})"
				},
				{
					"string": "imagesetbrush",
					"append": "(${1:image}, ${2:brush})"
				},
				{
					"string": "imagesetpixel",
					"append": "(${1:image}, ${2:x}, ${3:y}, ${4:color})"
				},
				{
					"string": "imagesetstyle",
					"append": "(${1:image}, ${2:style})"
				},
				{
					"string": "imagesetthickness",
					"append": "(${1:image}, ${2:thickness})"
				},
				{
					"string": "imagesettile",
					"append": "(${1:image}, ${2:tile})"
				},
				{
					"string": "imagestring",
					"append": "(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:string}, ${6:color})"
				},
				{
					"string": "imagestringup",
					"append": "(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:string}, ${6:color})"
				},
				{
					"string": "imagesx",
					"append": "(${1:image})"
				},
				{
					"string": "imagesy",
					"append": "(${1:image})"
				},
				{
					"string": "imagetruecolortopalette",
					"append": "(${1:image}, ${2:dither}, ${3:ncolors})"
				},
				{
					"string": "imagettfbbox",
					"append": "(${1:size}, ${2:angle}, ${3:fontfile}, ${4:text})"
				},
				{
					"string": "imagettftext",
					"append": "(${1:image}, ${2:size}, ${3:angle}, ${4:x}, ${5:y}, ${6:color}, ${7:fontfile}, ${8:text})"
				},
				{
					"string": "imagetypes",
					"append": "(${1:oid})"
				},
				{
					"string": "imagewbmp",
					"append": "(${1:image})"
				},
				{
					"string": "imagexbm",
					"append": "(${1:image}, ${2:filename})"
				},
				{
					"string": "imap_8bit",
					"append": "(${1:string})"
				},
				{
					"string": "imap_alerts",
					"append": "(${1:oid})"
				},
				{
					"string": "imap_append",
					"append": "(${1:imap_stream}, ${2:mailbox}, ${3:message})"
				},
				{
					"string": "imap_base64",
					"append": "(${1:text})"
				},
				{
					"string": "imap_binary",
					"append": "(${1:string})"
				},
				{
					"string": "imap_body",
					"append": "(${1:imap_stream}, ${2:msg_number})"
				},
				{
					"string": "imap_bodystruct",
					"append": "(${1:imap_stream}, ${2:msg_number}, ${3:section})"
				},
				{
					"string": "imap_check",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_clearflag_full",
					"append": "(${1:imap_stream}, ${2:sequence}, ${3:flag})"
				},
				{
					"string": "imap_close",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_createmailbox",
					"append": "(${1:imap_stream}, ${2:mailbox})"
				},
				{
					"string": "imap_delete",
					"append": "(${1:imap_stream}, ${2:msg_number})"
				},
				{
					"string": "imap_deletemailbox",
					"append": "(${1:imap_stream}, ${2:mailbox})"
				},
				{
					"string": "imap_errors",
					"append": "(${1:oid})"
				},
				{
					"string": "imap_expunge",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_fetch_overview",
					"append": "(${1:imap_stream}, ${2:sequence})"
				},
				{
					"string": "imap_fetchbody",
					"append": "(${1:imap_stream}, ${2:msg_number}, ${3:section})"
				},
				{
					"string": "imap_fetchheader",
					"append": "(${1:imap_stream}, ${2:msg_number})"
				},
				{
					"string": "imap_fetchstructure",
					"append": "(${1:imap_stream}, ${2:msg_number})"
				},
				{
					"string": "imap_gc",
					"append": "(${1:imap_stream}, ${2:caches})"
				},
				{
					"string": "imap_get_quota",
					"append": "(${1:imap_stream}, ${2:quota_root})"
				},
				{
					"string": "imap_get_quotaroot",
					"append": "(${1:imap_stream}, ${2:quota_root})"
				},
				{
					"string": "imap_getacl",
					"append": "(${1:imap_stream}, ${2:mailbox})"
				},
				{
					"string": "imap_getmailboxes",
					"append": "(${1:imap_stream}, ${2:ref}, ${3:pattern})"
				},
				{
					"string": "imap_getsubscribed",
					"append": "(${1:imap_stream}, ${2:ref}, ${3:pattern})"
				},
				{
					"string": "imap_header",
					"append": "()"
				},
				{
					"string": "imap_headerinfo",
					"append": "(${1:imap_stream}, ${2:msg_number})"
				},
				{
					"string": "imap_headers",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_last_error",
					"append": "(${1:oid})"
				},
				{
					"string": "imap_list",
					"append": "(${1:imap_stream}, ${2:ref}, ${3:pattern})"
				},
				{
					"string": "imap_listmailbox",
					"append": "()"
				},
				{
					"string": "imap_listscan",
					"append": "(${1:imap_stream}, ${2:ref}, ${3:pattern}, ${4:content})"
				},
				{
					"string": "imap_listsubscribed",
					"append": "()"
				},
				{
					"string": "imap_lsub",
					"append": "(${1:imap_stream}, ${2:ref}, ${3:pattern})"
				},
				{
					"string": "imap_mail",
					"append": "(${1:to}, ${2:subject}, ${3:message})"
				},
				{
					"string": "imap_mail_compose",
					"append": "(${1:envelope}, ${2:body})"
				},
				{
					"string": "imap_mail_copy",
					"append": "(${1:imap_stream}, ${2:msglist}, ${3:mailbox})"
				},
				{
					"string": "imap_mail_move",
					"append": "(${1:imap_stream}, ${2:msglist}, ${3:mailbox})"
				},
				{
					"string": "imap_mailboxmsginfo",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_mime_header_decode",
					"append": "(${1:text})"
				},
				{
					"string": "imap_msgno",
					"append": "(${1:imap_stream}, ${2:uid})"
				},
				{
					"string": "imap_num_msg",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_num_recent",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_open",
					"append": "(${1:mailbox}, ${2:username}, ${3:password})"
				},
				{
					"string": "imap_ping",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_qprint",
					"append": "(${1:string})"
				},
				{
					"string": "imap_renamemailbox",
					"append": "(${1:imap_stream}, ${2:old_mbox}, ${3:new_mbox})"
				},
				{
					"string": "imap_reopen",
					"append": "(${1:imap_stream}, ${2:mailbox})"
				},
				{
					"string": "imap_rfc822_parse_adrlist",
					"append": "(${1:address}, ${2:default_host})"
				},
				{
					"string": "imap_rfc822_parse_headers",
					"append": "(${1:headers})"
				},
				{
					"string": "imap_rfc822_write_address",
					"append": "(${1:mailbox}, ${2:host}, ${3:personal})"
				},
				{
					"string": "imap_savebody",
					"append": "(${1:imap_stream}, ${2:file}, ${3:msg_number})"
				},
				{
					"string": "imap_scanmailbox",
					"append": "()"
				},
				{
					"string": "imap_search",
					"append": "(${1:imap_stream}, ${2:criteria})"
				},
				{
					"string": "imap_set_quota",
					"append": "(${1:imap_stream}, ${2:quota_root}, ${3:quota_limit})"
				},
				{
					"string": "imap_setacl",
					"append": "(${1:imap_stream}, ${2:mailbox}, ${3:id}, ${4:rights})"
				},
				{
					"string": "imap_setflag_full",
					"append": "(${1:imap_stream}, ${2:sequence}, ${3:flag})"
				},
				{
					"string": "imap_sort",
					"append": "(${1:imap_stream}, ${2:criteria}, ${3:reverse})"
				},
				{
					"string": "imap_status",
					"append": "(${1:imap_stream}, ${2:mailbox}, ${3:options})"
				},
				{
					"string": "imap_subscribe",
					"append": "(${1:imap_stream}, ${2:mailbox})"
				},
				{
					"string": "imap_thread",
					"append": "(${1:imap_stream})"
				},
				{
					"string": "imap_timeout",
					"append": "(${1:timeout_type})"
				},
				{
					"string": "imap_uid",
					"append": "(${1:imap_stream}, ${2:msg_number})"
				},
				{
					"string": "imap_undelete",
					"append": "(${1:imap_stream}, ${2:msg_number})"
				},
				{
					"string": "imap_unsubscribe",
					"append": "(${1:imap_stream}, ${2:mailbox})"
				},
				{
					"string": "imap_utf7_decode",
					"append": "(${1:text})"
				},
				{
					"string": "imap_utf7_encode",
					"append": "(${1:data})"
				},
				{
					"string": "imap_utf8",
					"append": "(${1:mime_encoded_text})"
				},
				{
					"string": "implode",
					"append": "(${1:glue}, ${2:pieces})"
				},
				{
					"string": "import_request_variables",
					"append": "(${1:types})"
				},
				{
					"string": "in_array",
					"append": "(${1:needle}, ${2:haystack})"
				},
				{
					"string": "inclued_get_data",
					"append": "(${1:oid})"
				},
				{
					"string": "inet_ntop",
					"append": "(${1:in_addr})"
				},
				{
					"string": "inet_pton",
					"append": "(${1:address})"
				},
				{
					"string": "ingres_autocommit",
					"append": "(${1:link})"
				},
				{
					"string": "ingres_autocommit_state",
					"append": "(${1:link})"
				},
				{
					"string": "ingres_charset",
					"append": "(${1:link})"
				},
				{
					"string": "ingres_close",
					"append": "(${1:link})"
				},
				{
					"string": "ingres_commit",
					"append": "(${1:link})"
				},
				{
					"string": "ingres_connect",
					"append": "()"
				},
				{
					"string": "ingres_cursor",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_errno",
					"append": "()"
				},
				{
					"string": "ingres_error",
					"append": "()"
				},
				{
					"string": "ingres_errsqlstate",
					"append": "()"
				},
				{
					"string": "ingres_escape_string",
					"append": "(${1:link}, ${2:source_string})"
				},
				{
					"string": "ingres_execute",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_fetch_assoc",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_fetch_proc_return",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_field_length",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "ingres_field_name",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "ingres_field_nullable",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "ingres_field_precision",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "ingres_field_scale",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "ingres_field_type",
					"append": "(${1:result}, ${2:index})"
				},
				{
					"string": "ingres_free_result",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_next_error",
					"append": "()"
				},
				{
					"string": "ingres_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_num_rows",
					"append": "(${1:result})"
				},
				{
					"string": "ingres_pconnect",
					"append": "()"
				},
				{
					"string": "ingres_prepare",
					"append": "(${1:link}, ${2:query})"
				},
				{
					"string": "ingres_query",
					"append": "(${1:link}, ${2:query})"
				},
				{
					"string": "ingres_result_seek",
					"append": "(${1:result}, ${2:position})"
				},
				{
					"string": "ingres_rollback",
					"append": "(${1:link})"
				},
				{
					"string": "ingres_set_environment",
					"append": "(${1:link}, ${2:options})"
				},
				{
					"string": "ingres_unbuffered_query",
					"append": "(${1:link}, ${2:query})"
				},
				{
					"string": "ini_alter",
					"append": "()"
				},
				{
					"string": "ini_get",
					"append": "(${1:varname})"
				},
				{
					"string": "ini_get_all",
					"append": "()"
				},
				{
					"string": "ini_restore",
					"append": "(${1:varname})"
				},
				{
					"string": "ini_set",
					"append": "(${1:varname}, ${2:newvalue})"
				},
				{
					"string": "inotify_add_watch",
					"append": "(${1:inotify_instance}, ${2:pathname}, ${3:mask})"
				},
				{
					"string": "inotify_init",
					"append": "(${1:oid})"
				},
				{
					"string": "inotify_queue_len",
					"append": "(${1:inotify_instance})"
				},
				{
					"string": "inotify_read",
					"append": "(${1:inotify_instance})"
				},
				{
					"string": "inotify_rm_watch",
					"append": "(${1:inotify_instance}, ${2:watch_descriptor})"
				},
				{
					"string": "interface_exists",
					"append": "(${1:interface_name})"
				},
				{
					"string": "intl_error_name",
					"append": "(${1:error_code})"
				},
				{
					"string": "intl_get_error_code",
					"append": "(${1:oid})"
				},
				{
					"string": "intl_get_error_message",
					"append": "(${1:oid})"
				},
				{
					"string": "intl_is_failure",
					"append": "(${1:error_code})"
				},
				{
					"string": "intval",
					"append": "(${1:var})"
				},
				{
					"string": "ip2long",
					"append": "(${1:ip_address})"
				},
				{
					"string": "iptcembed",
					"append": "(${1:iptcdata}, ${2:jpeg_file_name})"
				},
				{
					"string": "iptcparse",
					"append": "(${1:iptcblock})"
				},
				{
					"string": "is_a",
					"append": "(${1:object}, ${2:class_name})"
				},
				{
					"string": "is_array",
					"append": "(${1:var})"
				},
				{
					"string": "is_bool",
					"append": "(${1:var})"
				},
				{
					"string": "is_callable",
					"append": "(${1:name})"
				},
				{
					"string": "is_dir",
					"append": "(${1:filename})"
				},
				{
					"string": "is_double",
					"append": "()"
				},
				{
					"string": "is_executable",
					"append": "(${1:filename})"
				},
				{
					"string": "is_file",
					"append": "(${1:filename})"
				},
				{
					"string": "is_finite",
					"append": "(${1:val})"
				},
				{
					"string": "is_float",
					"append": "(${1:var})"
				},
				{
					"string": "is_infinite",
					"append": "(${1:val})"
				},
				{
					"string": "is_int",
					"append": "(${1:var})"
				},
				{
					"string": "is_integer",
					"append": "()"
				},
				{
					"string": "is_link",
					"append": "(${1:filename})"
				},
				{
					"string": "is_long",
					"append": "()"
				},
				{
					"string": "is_nan",
					"append": "(${1:val})"
				},
				{
					"string": "is_null",
					"append": "(${1:var})"
				},
				{
					"string": "is_numeric",
					"append": "(${1:var})"
				},
				{
					"string": "is_object",
					"append": "(${1:var})"
				},
				{
					"string": "is_readable",
					"append": "(${1:filename})"
				},
				{
					"string": "is_real",
					"append": "()"
				},
				{
					"string": "is_resource",
					"append": "(${1:var})"
				},
				{
					"string": "is_scalar",
					"append": "(${1:var})"
				},
				{
					"string": "is_soap_fault",
					"append": "(${1:object})"
				},
				{
					"string": "is_string",
					"append": "(${1:var})"
				},
				{
					"string": "is_subclass_of",
					"append": "(${1:object}, ${2:class_name})"
				},
				{
					"string": "is_uploaded_file",
					"append": "(${1:filename})"
				},
				{
					"string": "is_writable",
					"append": "(${1:filename})"
				},
				{
					"string": "is_writeable",
					"append": "()"
				},
				{
					"string": "isset",
					"append": "(${1:var})"
				},
				{
					"string": "iterator_apply",
					"append": "(${1:iterator}, ${2:function})"
				},
				{
					"string": "iterator_count",
					"append": "(${1:iterator})"
				},
				{
					"string": "iterator_to_array",
					"append": "(${1:iterator})"
				},
				{
					"string": "java_last_exception_clear",
					"append": "(${1:oid})"
				},
				{
					"string": "java_last_exception_get",
					"append": "(${1:oid})"
				},
				{
					"string": "JDDayOfWeek",
					"append": "(${1:julianday})"
				},
				{
					"string": "JDMonthName",
					"append": "(${1:julianday}, ${2:mode})"
				},
				{
					"string": "JDToFrench",
					"append": "(${1:juliandaycount})"
				},
				{
					"string": "JDToGregorian",
					"append": "(${1:julianday})"
				},
				{
					"string": "jdtojewish",
					"append": "(${1:juliandaycount})"
				},
				{
					"string": "JDToJulian",
					"append": "(${1:julianday})"
				},
				{
					"string": "jdtounix",
					"append": "(${1:jday})"
				},
				{
					"string": "JewishToJD",
					"append": "(${1:month}, ${2:day}, ${3:year})"
				},
				{
					"string": "join",
					"append": "()"
				},
				{
					"string": "jpeg2wbmp",
					"append": "(${1:jpegname}, ${2:wbmpname}, ${3:dest_height}, ${4:dest_width}, ${5:threshold})"
				},
				{
					"string": "json_decode",
					"append": "(${1:json})"
				},
				{
					"string": "json_encode",
					"append": "(${1:value})"
				},
				{
					"string": "json_last_error",
					"append": "(${1:oid})"
				},
				{
					"string": "judy_type",
					"append": "(${1:array})"
				},
				{
					"string": "judy_version",
					"append": "(${1:oid})"
				},
				{
					"string": "JulianToJD",
					"append": "(${1:month}, ${2:day}, ${3:year})"
				},
				{
					"string": "kadm5_chpass_principal",
					"append": "(${1:handle}, ${2:principal}, ${3:password})"
				},
				{
					"string": "kadm5_create_principal",
					"append": "(${1:handle}, ${2:principal})"
				},
				{
					"string": "kadm5_delete_principal",
					"append": "(${1:handle}, ${2:principal})"
				},
				{
					"string": "kadm5_destroy",
					"append": "(${1:handle})"
				},
				{
					"string": "kadm5_flush",
					"append": "(${1:handle})"
				},
				{
					"string": "kadm5_get_policies",
					"append": "(${1:handle})"
				},
				{
					"string": "kadm5_get_principal",
					"append": "(${1:handle}, ${2:principal})"
				},
				{
					"string": "kadm5_get_principals",
					"append": "(${1:handle})"
				},
				{
					"string": "kadm5_init_with_password",
					"append": "(${1:admin_server}, ${2:realm}, ${3:principal}, ${4:password})"
				},
				{
					"string": "kadm5_modify_principal",
					"append": "(${1:handle}, ${2:principal}, ${3:options})"
				},
				{
					"string": "key",
					"append": "(${1:array})"
				},
				{
					"string": "krsort",
					"append": "(${1:array})"
				},
				{
					"string": "ksort",
					"append": "(${1:array})"
				},
				{
					"string": "lcfirst",
					"append": "(${1:str})"
				},
				{
					"string": "lcg_value",
					"append": "(${1:oid})"
				},
				{
					"string": "lchgrp",
					"append": "(${1:filename}, ${2:group})"
				},
				{
					"string": "lchown",
					"append": "(${1:filename}, ${2:user})"
				},
				{
					"string": "ldap_8859_to_t61",
					"append": "(${1:value})"
				},
				{
					"string": "ldap_add",
					"append": "(${1:link_identifier}, ${2:dn}, ${3:entry})"
				},
				{
					"string": "ldap_bind",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "ldap_close",
					"append": "()"
				},
				{
					"string": "ldap_compare",
					"append": "(${1:link_identifier}, ${2:dn}, ${3:attribute}, ${4:value})"
				},
				{
					"string": "ldap_connect",
					"append": "()"
				},
				{
					"string": "ldap_count_entries",
					"append": "(${1:link_identifier}, ${2:result_identifier})"
				},
				{
					"string": "ldap_delete",
					"append": "(${1:link_identifier}, ${2:dn})"
				},
				{
					"string": "ldap_dn2ufn",
					"append": "(${1:dn})"
				},
				{
					"string": "ldap_err2str",
					"append": "(${1:errno})"
				},
				{
					"string": "ldap_errno",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "ldap_error",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "ldap_explode_dn",
					"append": "(${1:dn}, ${2:with_attrib})"
				},
				{
					"string": "ldap_first_attribute",
					"append": "(${1:link_identifier}, ${2:result_entry_identifier})"
				},
				{
					"string": "ldap_first_entry",
					"append": "(${1:link_identifier}, ${2:result_identifier})"
				},
				{
					"string": "ldap_first_reference",
					"append": "(${1:link}, ${2:result})"
				},
				{
					"string": "ldap_free_result",
					"append": "(${1:result_identifier})"
				},
				{
					"string": "ldap_get_attributes",
					"append": "(${1:link_identifier}, ${2:result_entry_identifier})"
				},
				{
					"string": "ldap_get_dn",
					"append": "(${1:link_identifier}, ${2:result_entry_identifier})"
				},
				{
					"string": "ldap_get_entries",
					"append": "(${1:link_identifier}, ${2:result_identifier})"
				},
				{
					"string": "ldap_get_option",
					"append": "(${1:link_identifier}, ${2:option}, ${3:retval})"
				},
				{
					"string": "ldap_get_values",
					"append": "(${1:link_identifier}, ${2:result_entry_identifier}, ${3:attribute})"
				},
				{
					"string": "ldap_get_values_len",
					"append": "(${1:link_identifier}, ${2:result_entry_identifier}, ${3:attribute})"
				},
				{
					"string": "ldap_list",
					"append": "(${1:link_identifier}, ${2:base_dn}, ${3:filter})"
				},
				{
					"string": "ldap_mod_add",
					"append": "(${1:link_identifier}, ${2:dn}, ${3:entry})"
				},
				{
					"string": "ldap_mod_del",
					"append": "(${1:link_identifier}, ${2:dn}, ${3:entry})"
				},
				{
					"string": "ldap_mod_replace",
					"append": "(${1:link_identifier}, ${2:dn}, ${3:entry})"
				},
				{
					"string": "ldap_modify",
					"append": "(${1:link_identifier}, ${2:dn}, ${3:entry})"
				},
				{
					"string": "ldap_next_attribute",
					"append": "(${1:link_identifier}, ${2:result_entry_identifier})"
				},
				{
					"string": "ldap_next_entry",
					"append": "(${1:link_identifier}, ${2:result_entry_identifier})"
				},
				{
					"string": "ldap_next_reference",
					"append": "(${1:link}, ${2:entry})"
				},
				{
					"string": "ldap_parse_reference",
					"append": "(${1:link}, ${2:entry}, ${3:referrals})"
				},
				{
					"string": "ldap_parse_result",
					"append": "(${1:link}, ${2:result}, ${3:errcode})"
				},
				{
					"string": "ldap_read",
					"append": "(${1:link_identifier}, ${2:base_dn}, ${3:filter})"
				},
				{
					"string": "ldap_rename",
					"append": "(${1:link_identifier}, ${2:dn}, ${3:newrdn}, ${4:newparent}, ${5:deleteoldrdn})"
				},
				{
					"string": "ldap_sasl_bind",
					"append": "(${1:link})"
				},
				{
					"string": "ldap_search",
					"append": "(${1:link_identifier}, ${2:base_dn}, ${3:filter})"
				},
				{
					"string": "ldap_set_option",
					"append": "(${1:link_identifier}, ${2:option}, ${3:newval})"
				},
				{
					"string": "ldap_set_rebind_proc",
					"append": "(${1:link}, ${2:callback})"
				},
				{
					"string": "ldap_sort",
					"append": "(${1:link}, ${2:result}, ${3:sortfilter})"
				},
				{
					"string": "ldap_start_tls",
					"append": "(${1:link})"
				},
				{
					"string": "ldap_t61_to_8859",
					"append": "(${1:value})"
				},
				{
					"string": "ldap_unbind",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "levenshtein",
					"append": "(${1:str1}, ${2:str2})"
				},
				{
					"string": "libxml_clear_errors",
					"append": "(${1:oid})"
				},
				{
					"string": "libxml_disable_entity_loader",
					"append": "()"
				},
				{
					"string": "libxml_get_errors",
					"append": "(${1:oid})"
				},
				{
					"string": "libxml_get_last_error",
					"append": "(${1:oid})"
				},
				{
					"string": "libxml_set_streams_context",
					"append": "(${1:streams_context})"
				},
				{
					"string": "libxml_use_internal_errors",
					"append": "()"
				},
				{
					"string": "link",
					"append": "(${1:target}, ${2:link})"
				},
				{
					"string": "linkinfo",
					"append": "(${1:path})"
				},
				{
					"string": "list",
					"append": "(${1:varname})"
				},
				{
					"string": "localeconv",
					"append": "(${1:oid})"
				},
				{
					"string": "localtime",
					"append": "()"
				},
				{
					"string": "log",
					"append": "(${1:arg})"
				},
				{
					"string": "log10",
					"append": "(${1:arg})"
				},
				{
					"string": "log1p",
					"append": "(${1:number})"
				},
				{
					"string": "long2ip",
					"append": "(${1:proper_address})"
				},
				{
					"string": "lstat",
					"append": "(${1:filename})"
				},
				{
					"string": "ltrim",
					"append": "(${1:str})"
				},
				{
					"string": "lzf_compress",
					"append": "(${1:data})"
				},
				{
					"string": "lzf_decompress",
					"append": "(${1:data})"
				},
				{
					"string": "lzf_optimized_for",
					"append": "(${1:oid})"
				},
				{
					"string": "m_checkstatus",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_completeauthorizations",
					"append": "(${1:conn}, ${2:array})"
				},
				{
					"string": "m_connect",
					"append": "(${1:conn})"
				},
				{
					"string": "m_connectionerror",
					"append": "(${1:conn})"
				},
				{
					"string": "m_deletetrans",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_destroyconn",
					"append": "(${1:conn})"
				},
				{
					"string": "m_destroyengine",
					"append": "(${1:oid})"
				},
				{
					"string": "m_getcell",
					"append": "(${1:conn}, ${2:identifier}, ${3:column}, ${4:row})"
				},
				{
					"string": "m_getcellbynum",
					"append": "(${1:conn}, ${2:identifier}, ${3:column}, ${4:row})"
				},
				{
					"string": "m_getcommadelimited",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_getheader",
					"append": "(${1:conn}, ${2:identifier}, ${3:column_num})"
				},
				{
					"string": "m_initconn",
					"append": "(${1:oid})"
				},
				{
					"string": "m_initengine",
					"append": "(${1:location})"
				},
				{
					"string": "m_iscommadelimited",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_maxconntimeout",
					"append": "(${1:conn}, ${2:secs})"
				},
				{
					"string": "m_monitor",
					"append": "(${1:conn})"
				},
				{
					"string": "m_numcolumns",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_numrows",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_parsecommadelimited",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_responsekeys",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_responseparam",
					"append": "(${1:conn}, ${2:identifier}, ${3:key})"
				},
				{
					"string": "m_returnstatus",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_setblocking",
					"append": "(${1:conn}, ${2:tf})"
				},
				{
					"string": "m_setdropfile",
					"append": "(${1:conn}, ${2:directory})"
				},
				{
					"string": "m_setip",
					"append": "(${1:conn}, ${2:host}, ${3:port})"
				},
				{
					"string": "m_setssl",
					"append": "(${1:conn}, ${2:host}, ${3:port})"
				},
				{
					"string": "m_setssl_cafile",
					"append": "(${1:conn}, ${2:cafile})"
				},
				{
					"string": "m_setssl_files",
					"append": "(${1:conn}, ${2:sslkeyfile}, ${3:sslcertfile})"
				},
				{
					"string": "m_settimeout",
					"append": "(${1:conn}, ${2:seconds})"
				},
				{
					"string": "m_sslcert_gen_hash",
					"append": "(${1:filename})"
				},
				{
					"string": "m_transactionssent",
					"append": "(${1:conn})"
				},
				{
					"string": "m_transinqueue",
					"append": "(${1:conn})"
				},
				{
					"string": "m_transkeyval",
					"append": "(${1:conn}, ${2:identifier}, ${3:key}, ${4:value})"
				},
				{
					"string": "m_transnew",
					"append": "(${1:conn})"
				},
				{
					"string": "m_transsend",
					"append": "(${1:conn}, ${2:identifier})"
				},
				{
					"string": "m_uwait",
					"append": "(${1:microsecs})"
				},
				{
					"string": "m_validateidentifier",
					"append": "(${1:conn}, ${2:tf})"
				},
				{
					"string": "m_verifyconnection",
					"append": "(${1:conn}, ${2:tf})"
				},
				{
					"string": "m_verifysslcert",
					"append": "(${1:conn}, ${2:tf})"
				},
				{
					"string": "magic_quotes_runtime",
					"append": "()"
				},
				{
					"string": "mail",
					"append": "(${1:to}, ${2:subject}, ${3:message})"
				},
				{
					"string": "mailparse_determine_best_xfer_encoding",
					"append": "(${1:fp})"
				},
				{
					"string": "mailparse_msg_create",
					"append": "(${1:oid})"
				},
				{
					"string": "mailparse_msg_extract_part",
					"append": "(${1:mimemail}, ${2:msgbody})"
				},
				{
					"string": "mailparse_msg_extract_part_file",
					"append": "(${1:mimemail}, ${2:filename})"
				},
				{
					"string": "mailparse_msg_extract_whole_part_file",
					"append": "(${1:mimemail}, ${2:filename})"
				},
				{
					"string": "mailparse_msg_free",
					"append": "(${1:mimemail})"
				},
				{
					"string": "mailparse_msg_get_part",
					"append": "(${1:mimemail}, ${2:mimesection})"
				},
				{
					"string": "mailparse_msg_get_part_data",
					"append": "(${1:mimemail})"
				},
				{
					"string": "mailparse_msg_get_structure",
					"append": "(${1:mimemail})"
				},
				{
					"string": "mailparse_msg_parse",
					"append": "(${1:mimemail}, ${2:data})"
				},
				{
					"string": "mailparse_msg_parse_file",
					"append": "(${1:filename})"
				},
				{
					"string": "mailparse_rfc822_parse_addresses",
					"append": "(${1:addresses})"
				},
				{
					"string": "mailparse_stream_encode",
					"append": "(${1:sourcefp}, ${2:destfp}, ${3:encoding})"
				},
				{
					"string": "mailparse_uudecode_all",
					"append": "(${1:fp})"
				},
				{
					"string": "main",
					"append": "()"
				},
				{
					"string": "max",
					"append": "(${1:values})"
				},
				{
					"string": "maxdb_bind_param",
					"append": "()"
				},
				{
					"string": "maxdb_bind_result",
					"append": "()"
				},
				{
					"string": "maxdb_client_encoding",
					"append": "()"
				},
				{
					"string": "maxdb_connect_errno",
					"append": "(${1:oid})"
				},
				{
					"string": "maxdb_connect_error",
					"append": "(${1:oid})"
				},
				{
					"string": "maxdb_debug",
					"append": "(${1:debug})"
				},
				{
					"string": "maxdb_disable_rpl_parse",
					"append": "(${1:link})"
				},
				{
					"string": "maxdb_dump_debug_info",
					"append": "(${1:link})"
				},
				{
					"string": "maxdb_embedded_connect",
					"append": "()"
				},
				{
					"string": "maxdb_enable_reads_from_master",
					"append": "(${1:link})"
				},
				{
					"string": "maxdb_enable_rpl_parse",
					"append": "(${1:link})"
				},
				{
					"string": "maxdb_escape_string",
					"append": "()"
				},
				{
					"string": "maxdb_execute",
					"append": "()"
				},
				{
					"string": "maxdb_fetch",
					"append": "()"
				},
				{
					"string": "maxdb_get_client_info",
					"append": "(${1:oid})"
				},
				{
					"string": "maxdb_get_client_version",
					"append": "(${1:oid})"
				},
				{
					"string": "maxdb_get_metadata",
					"append": "()"
				},
				{
					"string": "maxdb_init",
					"append": "(${1:oid})"
				},
				{
					"string": "maxdb_master_query",
					"append": "(${1:link}, ${2:query})"
				},
				{
					"string": "maxdb_param_count",
					"append": "()"
				},
				{
					"string": "maxdb_report",
					"append": "(${1:flags})"
				},
				{
					"string": "maxdb_rpl_parse_enabled",
					"append": "(${1:link})"
				},
				{
					"string": "maxdb_rpl_probe",
					"append": "(${1:link})"
				},
				{
					"string": "maxdb_send_long_data",
					"append": "()"
				},
				{
					"string": "maxdb_server_end",
					"append": "(${1:oid})"
				},
				{
					"string": "maxdb_server_init",
					"append": "()"
				},
				{
					"string": "maxdb_set_opt",
					"append": "()"
				},
				{
					"string": "maxdb_stmt_sqlstate",
					"append": "(${1:stmt})"
				},
				{
					"string": "maxdb_thread_safe",
					"append": "(${1:oid})"
				},
				{
					"string": "mb_check_encoding",
					"append": "()"
				},
				{
					"string": "mb_convert_case",
					"append": "(${1:str}, ${2:mode = MB_CASE_UPPER})"
				},
				{
					"string": "mb_convert_encoding",
					"append": "(${1:str}, ${2:to_encoding})"
				},
				{
					"string": "mb_convert_kana",
					"append": "(${1:str})"
				},
				{
					"string": "mb_convert_variables",
					"append": "(${1:to_encoding}, ${2:from_encoding}, ${3:vars})"
				},
				{
					"string": "mb_decode_mimeheader",
					"append": "(${1:str})"
				},
				{
					"string": "mb_decode_numericentity",
					"append": "(${1:str}, ${2:convmap}, ${3:encoding})"
				},
				{
					"string": "mb_detect_encoding",
					"append": "(${1:str})"
				},
				{
					"string": "mb_detect_order",
					"append": "()"
				},
				{
					"string": "mb_encode_mimeheader",
					"append": "(${1:str})"
				},
				{
					"string": "mb_encode_numericentity",
					"append": "(${1:str}, ${2:convmap}, ${3:encoding})"
				},
				{
					"string": "mb_encoding_aliases",
					"append": "(${1:encoding})"
				},
				{
					"string": "mb_ereg",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "mb_ereg_match",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "mb_ereg_replace",
					"append": "(${1:pattern}, ${2:replacement}, ${3:string})"
				},
				{
					"string": "mb_ereg_search",
					"append": "()"
				},
				{
					"string": "mb_ereg_search_getpos",
					"append": "(${1:oid})"
				},
				{
					"string": "mb_ereg_search_getregs",
					"append": "(${1:oid})"
				},
				{
					"string": "mb_ereg_search_init",
					"append": "(${1:string})"
				},
				{
					"string": "mb_ereg_search_pos",
					"append": "()"
				},
				{
					"string": "mb_ereg_search_regs",
					"append": "()"
				},
				{
					"string": "mb_ereg_search_setpos",
					"append": "(${1:position})"
				},
				{
					"string": "mb_eregi",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "mb_eregi_replace",
					"append": "(${1:pattern}, ${2:replace}, ${3:string})"
				},
				{
					"string": "mb_get_info",
					"append": "()"
				},
				{
					"string": "mb_http_input",
					"append": "()"
				},
				{
					"string": "mb_http_output",
					"append": "()"
				},
				{
					"string": "mb_internal_encoding",
					"append": "()"
				},
				{
					"string": "mb_language",
					"append": "()"
				},
				{
					"string": "mb_list_encodings",
					"append": "(${1:oid})"
				},
				{
					"string": "mb_output_handler",
					"append": "(${1:contents}, ${2:status})"
				},
				{
					"string": "mb_parse_str",
					"append": "(${1:encoded_string})"
				},
				{
					"string": "mb_preferred_mime_name",
					"append": "(${1:encoding})"
				},
				{
					"string": "mb_regex_encoding",
					"append": "()"
				},
				{
					"string": "mb_regex_set_options",
					"append": "()"
				},
				{
					"string": "mb_send_mail",
					"append": "(${1:to}, ${2:subject}, ${3:message})"
				},
				{
					"string": "mb_split",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "mb_strcut",
					"append": "(${1:str}, ${2:start})"
				},
				{
					"string": "mb_strimwidth",
					"append": "(${1:str}, ${2:start}, ${3:width})"
				},
				{
					"string": "mb_stripos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_stristr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_strlen",
					"append": "(${1:str})"
				},
				{
					"string": "mb_strpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_strrchr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_strrichr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_strripos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_strrpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_strstr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mb_strtolower",
					"append": "(${1:str})"
				},
				{
					"string": "mb_strtoupper",
					"append": "(${1:str})"
				},
				{
					"string": "mb_strwidth",
					"append": "(${1:str})"
				},
				{
					"string": "mb_substitute_character",
					"append": "()"
				},
				{
					"string": "mb_substr",
					"append": "(${1:str}, ${2:start})"
				},
				{
					"string": "mb_substr_count",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "mcrypt_cbc",
					"append": "(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})"
				},
				{
					"string": "mcrypt_cfb",
					"append": "(${1:cipher}, ${2:key}, ${3:data}, ${4:mode}, ${5:iv})"
				},
				{
					"string": "mcrypt_create_iv",
					"append": "(${1:size})"
				},
				{
					"string": "mcrypt_decrypt",
					"append": "(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})"
				},
				{
					"string": "mcrypt_ecb",
					"append": "(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})"
				},
				{
					"string": "mcrypt_enc_get_algorithms_name",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_get_block_size",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_get_iv_size",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_get_key_size",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_get_modes_name",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_get_supported_key_sizes",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_is_block_algorithm",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_is_block_algorithm_mode",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_is_block_mode",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_enc_self_test",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_encrypt",
					"append": "(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})"
				},
				{
					"string": "mcrypt_generic",
					"append": "(${1:td}, ${2:data})"
				},
				{
					"string": "mcrypt_generic_deinit",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_generic_end",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_generic_init",
					"append": "(${1:td}, ${2:key}, ${3:iv})"
				},
				{
					"string": "mcrypt_get_block_size",
					"append": "(${1:cipher})"
				},
				{
					"string": "mcrypt_get_cipher_name",
					"append": "(${1:cipher})"
				},
				{
					"string": "mcrypt_get_iv_size",
					"append": "(${1:cipher}, ${2:mode})"
				},
				{
					"string": "mcrypt_get_key_size",
					"append": "(${1:cipher})"
				},
				{
					"string": "mcrypt_list_algorithms",
					"append": "()"
				},
				{
					"string": "mcrypt_list_modes",
					"append": "()"
				},
				{
					"string": "mcrypt_module_close",
					"append": "(${1:td})"
				},
				{
					"string": "mcrypt_module_get_algo_block_size",
					"append": "(${1:algorithm})"
				},
				{
					"string": "mcrypt_module_get_algo_key_size",
					"append": "(${1:algorithm})"
				},
				{
					"string": "mcrypt_module_get_supported_key_sizes",
					"append": "(${1:algorithm})"
				},
				{
					"string": "mcrypt_module_is_block_algorithm",
					"append": "(${1:algorithm})"
				},
				{
					"string": "mcrypt_module_is_block_algorithm_mode",
					"append": "(${1:mode})"
				},
				{
					"string": "mcrypt_module_is_block_mode",
					"append": "(${1:mode})"
				},
				{
					"string": "mcrypt_module_open",
					"append": "(${1:algorithm}, ${2:algorithm_directory}, ${3:mode}, ${4:mode_directory})"
				},
				{
					"string": "mcrypt_module_self_test",
					"append": "(${1:algorithm})"
				},
				{
					"string": "mcrypt_ofb",
					"append": "(${1:cipher}, ${2:key}, ${3:data}, ${4:mode}, ${5:iv})"
				},
				{
					"string": "md5",
					"append": "(${1:str})"
				},
				{
					"string": "md5_file",
					"append": "(${1:filename})"
				},
				{
					"string": "mdecrypt_generic",
					"append": "(${1:td}, ${2:data})"
				},
				{
					"string": "memcache_debug",
					"append": "(${1:on_off})"
				},
				{
					"string": "memory_get_peak_usage",
					"append": "()"
				},
				{
					"string": "memory_get_usage",
					"append": "()"
				},
				{
					"string": "metaphone",
					"append": "(${1:str})"
				},
				{
					"string": "method_exists",
					"append": "(${1:object}, ${2:method_name})"
				},
				{
					"string": "mhash",
					"append": "(${1:hash}, ${2:data})"
				},
				{
					"string": "mhash_count",
					"append": "(${1:oid})"
				},
				{
					"string": "mhash_get_block_size",
					"append": "(${1:hash})"
				},
				{
					"string": "mhash_get_hash_name",
					"append": "(${1:hash})"
				},
				{
					"string": "mhash_keygen_s2k",
					"append": "(${1:hash}, ${2:password}, ${3:salt}, ${4:bytes})"
				},
				{
					"string": "microtime",
					"append": "()"
				},
				{
					"string": "mime_content_type",
					"append": "(${1:filename})"
				},
				{
					"string": "min",
					"append": "(${1:values})"
				},
				{
					"string": "ming_keypress",
					"append": "(${1:char})"
				},
				{
					"string": "ming_setcubicthreshold",
					"append": "(${1:threshold})"
				},
				{
					"string": "ming_setscale",
					"append": "(${1:scale})"
				},
				{
					"string": "ming_setswfcompression",
					"append": "(${1:level})"
				},
				{
					"string": "ming_useconstants",
					"append": "(${1:use})"
				},
				{
					"string": "ming_useswfversion",
					"append": "(${1:version})"
				},
				{
					"string": "mkdir",
					"append": "(${1:pathname})"
				},
				{
					"string": "mktime",
					"append": "()"
				},
				{
					"string": "money_format",
					"append": "(${1:format}, ${2:number})"
				},
				{
					"string": "move_uploaded_file",
					"append": "(${1:filename}, ${2:destination})"
				},
				{
					"string": "mqseries_back",
					"append": "(${1:hconn}, ${2:compCode}, ${3:reason})"
				},
				{
					"string": "mqseries_begin",
					"append": "(${1:hconn}, ${2:beginOptions}, ${3:compCode}, ${4:reason})"
				},
				{
					"string": "mqseries_close",
					"append": "(${1:hconn}, ${2:hobj}, ${3:options}, ${4:compCode}, ${5:reason})"
				},
				{
					"string": "mqseries_cmit",
					"append": "(${1:hconn}, ${2:compCode}, ${3:reason})"
				},
				{
					"string": "mqseries_conn",
					"append": "(${1:qManagerName}, ${2:hconn}, ${3:compCode}, ${4:reason})"
				},
				{
					"string": "mqseries_connx",
					"append": "(${1:qManagerName}, ${2:connOptions}, ${3:hconn}, ${4:compCode}, ${5:reason})"
				},
				{
					"string": "mqseries_disc",
					"append": "(${1:hconn}, ${2:compCode}, ${3:reason})"
				},
				{
					"string": "mqseries_get",
					"append": "(${1:hConn}, ${2:hObj}, ${3:md}, ${4:gmo}, ${5:bufferLength}, ${6:msg}, ${7:data_length}, ${8:compCode}, ${9:reason})"
				},
				{
					"string": "mqseries_inq",
					"append": "(${1:hconn}, ${2:hobj}, ${3:selectorCount}, ${4:selectors}, ${5:intAttrCount}, ${6:intAttr}, ${7:charAttrLength}, ${8:charAttr}, ${9:compCode}, ${10:reason})"
				},
				{
					"string": "mqseries_open",
					"append": "(${1:hconn}, ${2:objDesc}, ${3:option}, ${4:hobj}, ${5:compCode}, ${6:reason})"
				},
				{
					"string": "mqseries_put",
					"append": "(${1:hConn}, ${2:hObj}, ${3:md}, ${4:pmo}, ${5:message}, ${6:compCode}, ${7:reason})"
				},
				{
					"string": "mqseries_put1",
					"append": "(${1:hconn}, ${2:objDesc}, ${3:msgDesc}, ${4:pmo}, ${5:buffer}, ${6:compCode}, ${7:reason})"
				},
				{
					"string": "mqseries_set",
					"append": "(${1:hconn}, ${2:hobj}, ${3:selectorcount}, ${4:selectors}, ${5:intattrcount}, ${6:intattrs}, ${7:charattrlength}, ${8:charattrs}, ${9:compCode}, ${10:reason})"
				},
				{
					"string": "mqseries_strerror",
					"append": "(${1:reason})"
				},
				{
					"string": "msession_connect",
					"append": "(${1:host}, ${2:port})"
				},
				{
					"string": "msession_count",
					"append": "(${1:oid})"
				},
				{
					"string": "msession_create",
					"append": "(${1:session})"
				},
				{
					"string": "msession_destroy",
					"append": "(${1:name})"
				},
				{
					"string": "msession_disconnect",
					"append": "(${1:oid})"
				},
				{
					"string": "msession_find",
					"append": "(${1:name}, ${2:value})"
				},
				{
					"string": "msession_get",
					"append": "(${1:session}, ${2:name}, ${3:value})"
				},
				{
					"string": "msession_get_array",
					"append": "(${1:session})"
				},
				{
					"string": "msession_get_data",
					"append": "(${1:session})"
				},
				{
					"string": "msession_inc",
					"append": "(${1:session}, ${2:name})"
				},
				{
					"string": "msession_list",
					"append": "(${1:oid})"
				},
				{
					"string": "msession_listvar",
					"append": "(${1:name})"
				},
				{
					"string": "msession_lock",
					"append": "(${1:name})"
				},
				{
					"string": "msession_plugin",
					"append": "(${1:session}, ${2:val})"
				},
				{
					"string": "msession_randstr",
					"append": "(${1:param})"
				},
				{
					"string": "msession_set",
					"append": "(${1:session}, ${2:name}, ${3:value})"
				},
				{
					"string": "msession_set_array",
					"append": "(${1:session}, ${2:tuples})"
				},
				{
					"string": "msession_set_data",
					"append": "(${1:session}, ${2:value})"
				},
				{
					"string": "msession_timeout",
					"append": "(${1:session})"
				},
				{
					"string": "msession_uniq",
					"append": "(${1:param})"
				},
				{
					"string": "msession_unlock",
					"append": "(${1:session}, ${2:key})"
				},
				{
					"string": "msg_get_queue",
					"append": "(${1:key})"
				},
				{
					"string": "msg_queue_exists",
					"append": "(${1:key})"
				},
				{
					"string": "msg_receive",
					"append": "(${1:queue}, ${2:desiredmsgtype}, ${3:msgtype}, ${4:maxsize}, ${5:message})"
				},
				{
					"string": "msg_remove_queue",
					"append": "(${1:queue})"
				},
				{
					"string": "msg_send",
					"append": "(${1:queue}, ${2:msgtype}, ${3:message})"
				},
				{
					"string": "msg_set_queue",
					"append": "(${1:queue}, ${2:data})"
				},
				{
					"string": "msg_stat_queue",
					"append": "(${1:queue})"
				},
				{
					"string": "msql",
					"append": "()"
				},
				{
					"string": "msql_affected_rows",
					"append": "(${1:result})"
				},
				{
					"string": "msql_close",
					"append": "()"
				},
				{
					"string": "msql_connect",
					"append": "()"
				},
				{
					"string": "msql_create_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "msql_createdb",
					"append": "()"
				},
				{
					"string": "msql_data_seek",
					"append": "(${1:result}, ${2:row_number})"
				},
				{
					"string": "msql_db_query",
					"append": "(${1:database}, ${2:query})"
				},
				{
					"string": "msql_dbname",
					"append": "()"
				},
				{
					"string": "msql_drop_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "msql_error",
					"append": "(${1:oid})"
				},
				{
					"string": "msql_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "msql_fetch_field",
					"append": "(${1:result})"
				},
				{
					"string": "msql_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "msql_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "msql_field_flags",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "msql_field_len",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "msql_field_name",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "msql_field_seek",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "msql_field_table",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "msql_field_type",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "msql_fieldflags",
					"append": "()"
				},
				{
					"string": "msql_fieldlen",
					"append": "()"
				},
				{
					"string": "msql_fieldname",
					"append": "()"
				},
				{
					"string": "msql_fieldtable",
					"append": "()"
				},
				{
					"string": "msql_fieldtype",
					"append": "()"
				},
				{
					"string": "msql_free_result",
					"append": "(${1:result})"
				},
				{
					"string": "msql_list_dbs",
					"append": "()"
				},
				{
					"string": "msql_list_fields",
					"append": "(${1:database}, ${2:tablename})"
				},
				{
					"string": "msql_list_tables",
					"append": "(${1:database})"
				},
				{
					"string": "msql_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "msql_num_rows",
					"append": "(${1:query_identifier})"
				},
				{
					"string": "msql_numfields",
					"append": "()"
				},
				{
					"string": "msql_numrows",
					"append": "()"
				},
				{
					"string": "msql_pconnect",
					"append": "()"
				},
				{
					"string": "msql_query",
					"append": "(${1:query})"
				},
				{
					"string": "msql_regcase",
					"append": "()"
				},
				{
					"string": "msql_result",
					"append": "(${1:result}, ${2:row})"
				},
				{
					"string": "msql_select_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "msql_tablename",
					"append": "()"
				},
				{
					"string": "mssql_bind",
					"append": "(${1:stmt}, ${2:param_name}, ${3:var}, ${4:type})"
				},
				{
					"string": "mssql_close",
					"append": "()"
				},
				{
					"string": "mssql_connect",
					"append": "()"
				},
				{
					"string": "mssql_data_seek",
					"append": "(${1:result_identifier}, ${2:row_number})"
				},
				{
					"string": "mssql_execute",
					"append": "(${1:stmt})"
				},
				{
					"string": "mssql_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_fetch_assoc",
					"append": "(${1:result_id})"
				},
				{
					"string": "mssql_fetch_batch",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_fetch_field",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_field_length",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_field_name",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_field_seek",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "mssql_field_type",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_free_result",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_free_statement",
					"append": "(${1:stmt})"
				},
				{
					"string": "mssql_get_last_message",
					"append": "(${1:oid})"
				},
				{
					"string": "mssql_guid_string",
					"append": "(${1:binary})"
				},
				{
					"string": "mssql_init",
					"append": "(${1:sp_name})"
				},
				{
					"string": "mssql_min_error_severity",
					"append": "(${1:severity})"
				},
				{
					"string": "mssql_min_message_severity",
					"append": "(${1:severity})"
				},
				{
					"string": "mssql_next_result",
					"append": "(${1:result_id})"
				},
				{
					"string": "mssql_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_num_rows",
					"append": "(${1:result})"
				},
				{
					"string": "mssql_pconnect",
					"append": "()"
				},
				{
					"string": "mssql_query",
					"append": "(${1:query})"
				},
				{
					"string": "mssql_result",
					"append": "(${1:result}, ${2:row}, ${3:field})"
				},
				{
					"string": "mssql_rows_affected",
					"append": "(${1:link_identifier})"
				},
				{
					"string": "mssql_select_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "mt_getrandmax",
					"append": "(${1:oid})"
				},
				{
					"string": "mt_rand",
					"append": "(${1:oid})"
				},
				{
					"string": "mt_srand",
					"append": "()"
				},
				{
					"string": "mysql_affected_rows",
					"append": "()"
				},
				{
					"string": "mysql_client_encoding",
					"append": "()"
				},
				{
					"string": "mysql_close",
					"append": "()"
				},
				{
					"string": "mysql_connect",
					"append": "()"
				},
				{
					"string": "mysql_create_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "mysql_data_seek",
					"append": "(${1:result}, ${2:row_number})"
				},
				{
					"string": "mysql_db_name",
					"append": "(${1:result}, ${2:row})"
				},
				{
					"string": "mysql_db_query",
					"append": "(${1:database}, ${2:query})"
				},
				{
					"string": "mysql_drop_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "mysql_errno",
					"append": "()"
				},
				{
					"string": "mysql_error",
					"append": "()"
				},
				{
					"string": "mysql_escape_string",
					"append": "(${1:unescaped_string})"
				},
				{
					"string": "mysql_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_fetch_assoc",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_fetch_field",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_fetch_lengths",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_field_flags",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "mysql_field_len",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "mysql_field_name",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "mysql_field_seek",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "mysql_field_table",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "mysql_field_type",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "mysql_free_result",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_get_client_info",
					"append": "(${1:oid})"
				},
				{
					"string": "mysql_get_host_info",
					"append": "()"
				},
				{
					"string": "mysql_get_proto_info",
					"append": "()"
				},
				{
					"string": "mysql_get_server_info",
					"append": "()"
				},
				{
					"string": "mysql_info",
					"append": "()"
				},
				{
					"string": "mysql_insert_id",
					"append": "()"
				},
				{
					"string": "mysql_list_dbs",
					"append": "()"
				},
				{
					"string": "mysql_list_fields",
					"append": "(${1:database_name}, ${2:table_name})"
				},
				{
					"string": "mysql_list_processes",
					"append": "()"
				},
				{
					"string": "mysql_list_tables",
					"append": "(${1:database})"
				},
				{
					"string": "mysql_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_num_rows",
					"append": "(${1:result})"
				},
				{
					"string": "mysql_pconnect",
					"append": "()"
				},
				{
					"string": "mysql_ping",
					"append": "()"
				},
				{
					"string": "mysql_query",
					"append": "(${1:query})"
				},
				{
					"string": "mysql_real_escape_string",
					"append": "(${1:unescaped_string})"
				},
				{
					"string": "mysql_result",
					"append": "(${1:result}, ${2:row})"
				},
				{
					"string": "mysql_select_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "mysql_set_charset",
					"append": "(${1:charset})"
				},
				{
					"string": "mysql_stat",
					"append": "()"
				},
				{
					"string": "mysql_tablename",
					"append": "(${1:result}, ${2:i})"
				},
				{
					"string": "mysql_thread_id",
					"append": "()"
				},
				{
					"string": "mysql_unbuffered_query",
					"append": "(${1:query})"
				},
				{
					"string": "mysqli_bind_param",
					"append": "()"
				},
				{
					"string": "mysqli_bind_result",
					"append": "()"
				},
				{
					"string": "mysqli_client_encoding",
					"append": "()"
				},
				{
					"string": "mysqli_connect",
					"append": "()"
				},
				{
					"string": "mysqli_disable_rpl_parse",
					"append": "(${1:link})"
				},
				{
					"string": "mysqli_enable_reads_from_master",
					"append": "(${1:link})"
				},
				{
					"string": "mysqli_enable_rpl_parse",
					"append": "(${1:link})"
				},
				{
					"string": "mysqli_escape_string",
					"append": "()"
				},
				{
					"string": "mysqli_execute",
					"append": "()"
				},
				{
					"string": "mysqli_fetch",
					"append": "()"
				},
				{
					"string": "mysqli_get_metadata",
					"append": "()"
				},
				{
					"string": "mysqli_master_query",
					"append": "(${1:link}, ${2:query})"
				},
				{
					"string": "mysqli_param_count",
					"append": "()"
				},
				{
					"string": "mysqli_report",
					"append": "(${1:flags})"
				},
				{
					"string": "mysqli_rpl_parse_enabled",
					"append": "(${1:link})"
				},
				{
					"string": "mysqli_rpl_probe",
					"append": "(${1:link})"
				},
				{
					"string": "mysqli_send_long_data",
					"append": "()"
				},
				{
					"string": "mysqli_set_opt",
					"append": "()"
				},
				{
					"string": "mysqli_slave_query",
					"append": "(${1:link}, ${2:query})"
				},
				{
					"string": "mysqlnd_qc_change_handler",
					"append": "(${1:handler})"
				},
				{
					"string": "mysqlnd_qc_clear_cache",
					"append": "(${1:oid})"
				},
				{
					"string": "mysqlnd_qc_get_cache_info",
					"append": "(${1:oid})"
				},
				{
					"string": "mysqlnd_qc_get_core_stats",
					"append": "(${1:oid})"
				},
				{
					"string": "mysqlnd_qc_get_handler",
					"append": "(${1:oid})"
				},
				{
					"string": "mysqlnd_qc_get_query_trace_log",
					"append": "(${1:oid})"
				},
				{
					"string": "mysqlnd_qc_set_user_handlers",
					"append": "(${1:get_hash}, ${2:find_query_in_cache}, ${3:return_to_cache}, ${4:add_query_to_cache_if_not_exists}, ${5:query_is_select}, ${6:update_query_run_time_stats}, ${7:get_stats}, ${8:clear_cache})"
				},
				{
					"string": "natcasesort",
					"append": "(${1:array})"
				},
				{
					"string": "natsort",
					"append": "(${1:array})"
				},
				{
					"string": "ncurses_addch",
					"append": "(${1:ch})"
				},
				{
					"string": "ncurses_addchnstr",
					"append": "(${1:s}, ${2:n})"
				},
				{
					"string": "ncurses_addchstr",
					"append": "(${1:s})"
				},
				{
					"string": "ncurses_addnstr",
					"append": "(${1:s}, ${2:n})"
				},
				{
					"string": "ncurses_addstr",
					"append": "(${1:text})"
				},
				{
					"string": "ncurses_assume_default_colors",
					"append": "(${1:fg}, ${2:bg})"
				},
				{
					"string": "ncurses_attroff",
					"append": "(${1:attributes})"
				},
				{
					"string": "ncurses_attron",
					"append": "(${1:attributes})"
				},
				{
					"string": "ncurses_attrset",
					"append": "(${1:attributes})"
				},
				{
					"string": "ncurses_baudrate",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_beep",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_bkgd",
					"append": "(${1:attrchar})"
				},
				{
					"string": "ncurses_bkgdset",
					"append": "(${1:attrchar})"
				},
				{
					"string": "ncurses_border",
					"append": "(${1:left}, ${2:right}, ${3:top}, ${4:bottom}, ${5:tl_corner}, ${6:tr_corner}, ${7:bl_corner}, ${8:br_corner})"
				},
				{
					"string": "ncurses_bottom_panel",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_can_change_color",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_cbreak",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_clear",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_clrtobot",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_clrtoeol",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_color_content",
					"append": "(${1:color}, ${2:r}, ${3:g}, ${4:b})"
				},
				{
					"string": "ncurses_color_set",
					"append": "(${1:pair})"
				},
				{
					"string": "ncurses_curs_set",
					"append": "(${1:visibility})"
				},
				{
					"string": "ncurses_def_prog_mode",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_def_shell_mode",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_define_key",
					"append": "(${1:definition}, ${2:keycode})"
				},
				{
					"string": "ncurses_del_panel",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_delay_output",
					"append": "(${1:milliseconds})"
				},
				{
					"string": "ncurses_delch",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_deleteln",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_delwin",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_doupdate",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_echo",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_echochar",
					"append": "(${1:character})"
				},
				{
					"string": "ncurses_end",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_erase",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_erasechar",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_filter",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_flash",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_flushinp",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_getch",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_getmaxyx",
					"append": "(${1:window}, ${2:y}, ${3:x})"
				},
				{
					"string": "ncurses_getmouse",
					"append": "(${1:mevent})"
				},
				{
					"string": "ncurses_getyx",
					"append": "(${1:window}, ${2:y}, ${3:x})"
				},
				{
					"string": "ncurses_halfdelay",
					"append": "(${1:tenth})"
				},
				{
					"string": "ncurses_has_colors",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_has_ic",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_has_il",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_has_key",
					"append": "(${1:keycode})"
				},
				{
					"string": "ncurses_hide_panel",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_hline",
					"append": "(${1:charattr}, ${2:n})"
				},
				{
					"string": "ncurses_inch",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_init",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_init_color",
					"append": "(${1:color}, ${2:r}, ${3:g}, ${4:b})"
				},
				{
					"string": "ncurses_init_pair",
					"append": "(${1:pair}, ${2:fg}, ${3:bg})"
				},
				{
					"string": "ncurses_insch",
					"append": "(${1:character})"
				},
				{
					"string": "ncurses_insdelln",
					"append": "(${1:count})"
				},
				{
					"string": "ncurses_insertln",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_insstr",
					"append": "(${1:text})"
				},
				{
					"string": "ncurses_instr",
					"append": "(${1:buffer})"
				},
				{
					"string": "ncurses_isendwin",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_keyok",
					"append": "(${1:keycode}, ${2:enable})"
				},
				{
					"string": "ncurses_keypad",
					"append": "(${1:window}, ${2:bf})"
				},
				{
					"string": "ncurses_killchar",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_longname",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_meta",
					"append": "(${1:window}, ${2:8bit})"
				},
				{
					"string": "ncurses_mouse_trafo",
					"append": "(${1:y}, ${2:x}, ${3:toscreen})"
				},
				{
					"string": "ncurses_mouseinterval",
					"append": "(${1:milliseconds})"
				},
				{
					"string": "ncurses_mousemask",
					"append": "(${1:newmask}, ${2:oldmask})"
				},
				{
					"string": "ncurses_move",
					"append": "(${1:y}, ${2:x})"
				},
				{
					"string": "ncurses_move_panel",
					"append": "(${1:panel}, ${2:startx}, ${3:starty})"
				},
				{
					"string": "ncurses_mvaddch",
					"append": "(${1:y}, ${2:x}, ${3:c})"
				},
				{
					"string": "ncurses_mvaddchnstr",
					"append": "(${1:y}, ${2:x}, ${3:s}, ${4:n})"
				},
				{
					"string": "ncurses_mvaddchstr",
					"append": "(${1:y}, ${2:x}, ${3:s})"
				},
				{
					"string": "ncurses_mvaddnstr",
					"append": "(${1:y}, ${2:x}, ${3:s}, ${4:n})"
				},
				{
					"string": "ncurses_mvaddstr",
					"append": "(${1:y}, ${2:x}, ${3:s})"
				},
				{
					"string": "ncurses_mvcur",
					"append": "(${1:old_y}, ${2:old_x}, ${3:new_y}, ${4:new_x})"
				},
				{
					"string": "ncurses_mvdelch",
					"append": "(${1:y}, ${2:x})"
				},
				{
					"string": "ncurses_mvgetch",
					"append": "(${1:y}, ${2:x})"
				},
				{
					"string": "ncurses_mvhline",
					"append": "(${1:y}, ${2:x}, ${3:attrchar}, ${4:n})"
				},
				{
					"string": "ncurses_mvinch",
					"append": "(${1:y}, ${2:x})"
				},
				{
					"string": "ncurses_mvvline",
					"append": "(${1:y}, ${2:x}, ${3:attrchar}, ${4:n})"
				},
				{
					"string": "ncurses_mvwaddstr",
					"append": "(${1:window}, ${2:y}, ${3:x}, ${4:text})"
				},
				{
					"string": "ncurses_napms",
					"append": "(${1:milliseconds})"
				},
				{
					"string": "ncurses_new_panel",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_newpad",
					"append": "(${1:rows}, ${2:cols})"
				},
				{
					"string": "ncurses_newwin",
					"append": "(${1:rows}, ${2:cols}, ${3:y}, ${4:x})"
				},
				{
					"string": "ncurses_nl",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_nocbreak",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_noecho",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_nonl",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_noqiflush",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_noraw",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_pair_content",
					"append": "(${1:pair}, ${2:f}, ${3:b})"
				},
				{
					"string": "ncurses_panel_above",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_panel_below",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_panel_window",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_pnoutrefresh",
					"append": "(${1:pad}, ${2:pminrow}, ${3:pmincol}, ${4:sminrow}, ${5:smincol}, ${6:smaxrow}, ${7:smaxcol})"
				},
				{
					"string": "ncurses_prefresh",
					"append": "(${1:pad}, ${2:pminrow}, ${3:pmincol}, ${4:sminrow}, ${5:smincol}, ${6:smaxrow}, ${7:smaxcol})"
				},
				{
					"string": "ncurses_putp",
					"append": "(${1:text})"
				},
				{
					"string": "ncurses_qiflush",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_raw",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_refresh",
					"append": "(${1:ch})"
				},
				{
					"string": "ncurses_replace_panel",
					"append": "(${1:panel}, ${2:window})"
				},
				{
					"string": "ncurses_reset_prog_mode",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_reset_shell_mode",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_resetty",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_savetty",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_scr_dump",
					"append": "(${1:filename})"
				},
				{
					"string": "ncurses_scr_init",
					"append": "(${1:filename})"
				},
				{
					"string": "ncurses_scr_restore",
					"append": "(${1:filename})"
				},
				{
					"string": "ncurses_scr_set",
					"append": "(${1:filename})"
				},
				{
					"string": "ncurses_scrl",
					"append": "(${1:count})"
				},
				{
					"string": "ncurses_show_panel",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_slk_attr",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_slk_attroff",
					"append": "(${1:intarg})"
				},
				{
					"string": "ncurses_slk_attron",
					"append": "(${1:intarg})"
				},
				{
					"string": "ncurses_slk_attrset",
					"append": "(${1:intarg})"
				},
				{
					"string": "ncurses_slk_clear",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_slk_color",
					"append": "(${1:intarg})"
				},
				{
					"string": "ncurses_slk_init",
					"append": "(${1:format})"
				},
				{
					"string": "ncurses_slk_noutrefresh",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_slk_refresh",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_slk_restore",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_slk_set",
					"append": "(${1:labelnr}, ${2:label}, ${3:format})"
				},
				{
					"string": "ncurses_slk_touch",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_standend",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_standout",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_start_color",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_termattrs",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_termname",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_timeout",
					"append": "(${1:millisec})"
				},
				{
					"string": "ncurses_top_panel",
					"append": "(${1:panel})"
				},
				{
					"string": "ncurses_typeahead",
					"append": "(${1:fd})"
				},
				{
					"string": "ncurses_ungetch",
					"append": "(${1:keycode})"
				},
				{
					"string": "ncurses_ungetmouse",
					"append": "(${1:mevent})"
				},
				{
					"string": "ncurses_update_panels",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_use_default_colors",
					"append": "(${1:oid})"
				},
				{
					"string": "ncurses_use_env",
					"append": "(${1:flag})"
				},
				{
					"string": "ncurses_use_extended_names",
					"append": "(${1:flag})"
				},
				{
					"string": "ncurses_vidattr",
					"append": "(${1:intarg})"
				},
				{
					"string": "ncurses_vline",
					"append": "(${1:charattr}, ${2:n})"
				},
				{
					"string": "ncurses_waddch",
					"append": "(${1:window}, ${2:ch})"
				},
				{
					"string": "ncurses_waddstr",
					"append": "(${1:window}, ${2:str})"
				},
				{
					"string": "ncurses_wattroff",
					"append": "(${1:window}, ${2:attrs})"
				},
				{
					"string": "ncurses_wattron",
					"append": "(${1:window}, ${2:attrs})"
				},
				{
					"string": "ncurses_wattrset",
					"append": "(${1:window}, ${2:attrs})"
				},
				{
					"string": "ncurses_wborder",
					"append": "(${1:window}, ${2:left}, ${3:right}, ${4:top}, ${5:bottom}, ${6:tl_corner}, ${7:tr_corner}, ${8:bl_corner}, ${9:br_corner})"
				},
				{
					"string": "ncurses_wclear",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_wcolor_set",
					"append": "(${1:window}, ${2:color_pair})"
				},
				{
					"string": "ncurses_werase",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_wgetch",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_whline",
					"append": "(${1:window}, ${2:charattr}, ${3:n})"
				},
				{
					"string": "ncurses_wmouse_trafo",
					"append": "(${1:window}, ${2:y}, ${3:x}, ${4:toscreen})"
				},
				{
					"string": "ncurses_wmove",
					"append": "(${1:window}, ${2:y}, ${3:x})"
				},
				{
					"string": "ncurses_wnoutrefresh",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_wrefresh",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_wstandend",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_wstandout",
					"append": "(${1:window})"
				},
				{
					"string": "ncurses_wvline",
					"append": "(${1:window}, ${2:charattr}, ${3:n})"
				},
				{
					"string": "newt_bell",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_button",
					"append": "(${1:left}, ${2:top}, ${3:text})"
				},
				{
					"string": "newt_button_bar",
					"append": "(${1:buttons})"
				},
				{
					"string": "newt_centered_window",
					"append": "(${1:width}, ${2:height})"
				},
				{
					"string": "newt_checkbox",
					"append": "(${1:left}, ${2:top}, ${3:text}, ${4:def_value})"
				},
				{
					"string": "newt_checkbox_get_value",
					"append": "(${1:checkbox})"
				},
				{
					"string": "newt_checkbox_set_flags",
					"append": "(${1:checkbox}, ${2:flags}, ${3:sense})"
				},
				{
					"string": "newt_checkbox_set_value",
					"append": "(${1:checkbox}, ${2:value})"
				},
				{
					"string": "newt_checkbox_tree",
					"append": "(${1:left}, ${2:top}, ${3:height})"
				},
				{
					"string": "newt_checkbox_tree_add_item",
					"append": "(${1:checkboxtree}, ${2:text}, ${3:data}, ${4:flags}, ${5:index})"
				},
				{
					"string": "newt_checkbox_tree_find_item",
					"append": "(${1:checkboxtree}, ${2:data})"
				},
				{
					"string": "newt_checkbox_tree_get_current",
					"append": "(${1:checkboxtree})"
				},
				{
					"string": "newt_checkbox_tree_get_entry_value",
					"append": "(${1:checkboxtree}, ${2:data})"
				},
				{
					"string": "newt_checkbox_tree_get_multi_selection",
					"append": "(${1:checkboxtree}, ${2:seqnum})"
				},
				{
					"string": "newt_checkbox_tree_get_selection",
					"append": "(${1:checkboxtree})"
				},
				{
					"string": "newt_checkbox_tree_multi",
					"append": "(${1:left}, ${2:top}, ${3:height}, ${4:seq})"
				},
				{
					"string": "newt_checkbox_tree_set_current",
					"append": "(${1:checkboxtree}, ${2:data})"
				},
				{
					"string": "newt_checkbox_tree_set_entry",
					"append": "(${1:checkboxtree}, ${2:data}, ${3:text})"
				},
				{
					"string": "newt_checkbox_tree_set_entry_value",
					"append": "(${1:checkboxtree}, ${2:data}, ${3:value})"
				},
				{
					"string": "newt_checkbox_tree_set_width",
					"append": "(${1:checkbox_tree}, ${2:width})"
				},
				{
					"string": "newt_clear_key_buffer",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_cls",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_compact_button",
					"append": "(${1:left}, ${2:top}, ${3:text})"
				},
				{
					"string": "newt_component_add_callback",
					"append": "(${1:component}, ${2:func_name}, ${3:data})"
				},
				{
					"string": "newt_component_takes_focus",
					"append": "(${1:component}, ${2:takes_focus})"
				},
				{
					"string": "newt_create_grid",
					"append": "(${1:cols}, ${2:rows})"
				},
				{
					"string": "newt_cursor_off",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_cursor_on",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_delay",
					"append": "(${1:microseconds})"
				},
				{
					"string": "newt_draw_form",
					"append": "(${1:form})"
				},
				{
					"string": "newt_draw_root_text",
					"append": "(${1:left}, ${2:top}, ${3:text})"
				},
				{
					"string": "newt_entry",
					"append": "(${1:left}, ${2:top}, ${3:width})"
				},
				{
					"string": "newt_entry_get_value",
					"append": "(${1:entry})"
				},
				{
					"string": "newt_entry_set",
					"append": "(${1:entry}, ${2:value})"
				},
				{
					"string": "newt_entry_set_filter",
					"append": "(${1:entry}, ${2:filter}, ${3:data})"
				},
				{
					"string": "newt_entry_set_flags",
					"append": "(${1:entry}, ${2:flags}, ${3:sense})"
				},
				{
					"string": "newt_finished",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_form",
					"append": "()"
				},
				{
					"string": "newt_form_add_component",
					"append": "(${1:form}, ${2:component})"
				},
				{
					"string": "newt_form_add_components",
					"append": "(${1:form}, ${2:components})"
				},
				{
					"string": "newt_form_add_hot_key",
					"append": "(${1:form}, ${2:key})"
				},
				{
					"string": "newt_form_destroy",
					"append": "(${1:form})"
				},
				{
					"string": "newt_form_get_current",
					"append": "(${1:form})"
				},
				{
					"string": "newt_form_run",
					"append": "(${1:form}, ${2:exit_struct})"
				},
				{
					"string": "newt_form_set_background",
					"append": "(${1:from}, ${2:background})"
				},
				{
					"string": "newt_form_set_height",
					"append": "(${1:form}, ${2:height})"
				},
				{
					"string": "newt_form_set_size",
					"append": "(${1:form})"
				},
				{
					"string": "newt_form_set_timer",
					"append": "(${1:form}, ${2:milliseconds})"
				},
				{
					"string": "newt_form_set_width",
					"append": "(${1:form}, ${2:width})"
				},
				{
					"string": "newt_form_watch_fd",
					"append": "(${1:form}, ${2:stream})"
				},
				{
					"string": "newt_get_screen_size",
					"append": "(${1:cols}, ${2:rows})"
				},
				{
					"string": "newt_grid_add_components_to_form",
					"append": "(${1:grid}, ${2:form}, ${3:recurse})"
				},
				{
					"string": "newt_grid_basic_window",
					"append": "(${1:text}, ${2:middle}, ${3:buttons})"
				},
				{
					"string": "newt_grid_free",
					"append": "(${1:grid}, ${2:recurse})"
				},
				{
					"string": "newt_grid_get_size",
					"append": "(${1:grid}, ${2:width}, ${3:height})"
				},
				{
					"string": "newt_grid_h_close_stacked",
					"append": "(${1:element1_type}, ${2:element1})"
				},
				{
					"string": "newt_grid_h_stacked",
					"append": "(${1:element1_type}, ${2:element1})"
				},
				{
					"string": "newt_grid_place",
					"append": "(${1:grid}, ${2:left}, ${3:top})"
				},
				{
					"string": "newt_grid_set_field",
					"append": "(${1:grid}, ${2:col}, ${3:row}, ${4:type}, ${5:val}, ${6:pad_left}, ${7:pad_top}, ${8:pad_right}, ${9:pad_bottom}, ${10:anchor})"
				},
				{
					"string": "newt_grid_simple_window",
					"append": "(${1:text}, ${2:middle}, ${3:buttons})"
				},
				{
					"string": "newt_grid_v_close_stacked",
					"append": "(${1:element1_type}, ${2:element1})"
				},
				{
					"string": "newt_grid_v_stacked",
					"append": "(${1:element1_type}, ${2:element1})"
				},
				{
					"string": "newt_grid_wrapped_window",
					"append": "(${1:grid}, ${2:title})"
				},
				{
					"string": "newt_grid_wrapped_window_at",
					"append": "(${1:grid}, ${2:title}, ${3:left}, ${4:top})"
				},
				{
					"string": "newt_init",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_label",
					"append": "(${1:left}, ${2:top}, ${3:text})"
				},
				{
					"string": "newt_label_set_text",
					"append": "(${1:label}, ${2:text})"
				},
				{
					"string": "newt_listbox",
					"append": "(${1:left}, ${2:top}, ${3:height})"
				},
				{
					"string": "newt_listbox_append_entry",
					"append": "(${1:listbox}, ${2:text}, ${3:data})"
				},
				{
					"string": "newt_listbox_clear",
					"append": "(${1:listobx})"
				},
				{
					"string": "newt_listbox_clear_selection",
					"append": "(${1:listbox})"
				},
				{
					"string": "newt_listbox_delete_entry",
					"append": "(${1:listbox}, ${2:key})"
				},
				{
					"string": "newt_listbox_get_current",
					"append": "(${1:listbox})"
				},
				{
					"string": "newt_listbox_get_selection",
					"append": "(${1:listbox})"
				},
				{
					"string": "newt_listbox_insert_entry",
					"append": "(${1:listbox}, ${2:text}, ${3:data}, ${4:key})"
				},
				{
					"string": "newt_listbox_item_count",
					"append": "(${1:listbox})"
				},
				{
					"string": "newt_listbox_select_item",
					"append": "(${1:listbox}, ${2:key}, ${3:sense})"
				},
				{
					"string": "newt_listbox_set_current",
					"append": "(${1:listbox}, ${2:num})"
				},
				{
					"string": "newt_listbox_set_current_by_key",
					"append": "(${1:listbox}, ${2:key})"
				},
				{
					"string": "newt_listbox_set_data",
					"append": "(${1:listbox}, ${2:num}, ${3:data})"
				},
				{
					"string": "newt_listbox_set_entry",
					"append": "(${1:listbox}, ${2:num}, ${3:text})"
				},
				{
					"string": "newt_listbox_set_width",
					"append": "(${1:listbox}, ${2:width})"
				},
				{
					"string": "newt_listitem",
					"append": "(${1:left}, ${2:top}, ${3:text}, ${4:is_default}, ${5:prev_item}, ${6:data})"
				},
				{
					"string": "newt_listitem_get_data",
					"append": "(${1:item})"
				},
				{
					"string": "newt_listitem_set",
					"append": "(${1:item}, ${2:text})"
				},
				{
					"string": "newt_open_window",
					"append": "(${1:left}, ${2:top}, ${3:width}, ${4:height})"
				},
				{
					"string": "newt_pop_help_line",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_pop_window",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_push_help_line",
					"append": "()"
				},
				{
					"string": "newt_radio_get_current",
					"append": "(${1:set_member})"
				},
				{
					"string": "newt_radiobutton",
					"append": "(${1:left}, ${2:top}, ${3:text}, ${4:is_default})"
				},
				{
					"string": "newt_redraw_help_line",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_reflow_text",
					"append": "(${1:text}, ${2:width}, ${3:flex_down}, ${4:flex_up}, ${5:actual_width}, ${6:actual_height})"
				},
				{
					"string": "newt_refresh",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_resize_screen",
					"append": "()"
				},
				{
					"string": "newt_resume",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_run_form",
					"append": "(${1:form})"
				},
				{
					"string": "newt_scale",
					"append": "(${1:left}, ${2:top}, ${3:width}, ${4:full_value})"
				},
				{
					"string": "newt_scale_set",
					"append": "(${1:scale}, ${2:amount})"
				},
				{
					"string": "newt_scrollbar_set",
					"append": "(${1:scrollbar}, ${2:where}, ${3:total})"
				},
				{
					"string": "newt_set_help_callback",
					"append": "(${1:function})"
				},
				{
					"string": "newt_set_suspend_callback",
					"append": "(${1:function}, ${2:data})"
				},
				{
					"string": "newt_suspend",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_textbox",
					"append": "(${1:left}, ${2:top}, ${3:width}, ${4:height})"
				},
				{
					"string": "newt_textbox_get_num_lines",
					"append": "(${1:textbox})"
				},
				{
					"string": "newt_textbox_reflowed",
					"append": "(${1:left}, ${2:top}, ${3:*text}, ${4:width}, ${5:flex_down}, ${6:flex_up})"
				},
				{
					"string": "newt_textbox_set_height",
					"append": "(${1:textbox}, ${2:height})"
				},
				{
					"string": "newt_textbox_set_text",
					"append": "(${1:textbox}, ${2:text})"
				},
				{
					"string": "newt_vertical_scrollbar",
					"append": "(${1:left}, ${2:top}, ${3:height})"
				},
				{
					"string": "newt_wait_for_key",
					"append": "(${1:oid})"
				},
				{
					"string": "newt_win_choice",
					"append": "(${1:title}, ${2:button1_text}, ${3:button2_text}, ${4:format})"
				},
				{
					"string": "newt_win_entries",
					"append": "(${1:title}, ${2:text}, ${3:suggested_width}, ${4:flex_down}, ${5:flex_up}, ${6:data_width}, ${7:items}, ${8:button1})"
				},
				{
					"string": "newt_win_menu",
					"append": "(${1:title}, ${2:text}, ${3:suggestedWidth}, ${4:flexDown}, ${5:flexUp}, ${6:maxListHeight}, ${7:items}, ${8:listItem})"
				},
				{
					"string": "newt_win_message",
					"append": "(${1:title}, ${2:button_text}, ${3:format})"
				},
				{
					"string": "newt_win_messagev",
					"append": "(${1:title}, ${2:button_text}, ${3:format}, ${4:args})"
				},
				{
					"string": "newt_win_ternary",
					"append": "(${1:title}, ${2:button1_text}, ${3:button2_text}, ${4:button3_text}, ${5:format})"
				},
				{
					"string": "next",
					"append": "(${1:array})"
				},
				{
					"string": "ngettext",
					"append": "(${1:msgid1}, ${2:msgid2}, ${3:n})"
				},
				{
					"string": "nl2br",
					"append": "(${1:string})"
				},
				{
					"string": "nl_langinfo",
					"append": "(${1:item})"
				},
				{
					"string": "notes_body",
					"append": "(${1:server}, ${2:mailbox}, ${3:msg_number})"
				},
				{
					"string": "notes_copy_db",
					"append": "(${1:from_database_name}, ${2:to_database_name})"
				},
				{
					"string": "notes_create_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "notes_create_note",
					"append": "(${1:database_name}, ${2:form_name})"
				},
				{
					"string": "notes_drop_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "notes_find_note",
					"append": "(${1:database_name}, ${2:name})"
				},
				{
					"string": "notes_header_info",
					"append": "(${1:server}, ${2:mailbox}, ${3:msg_number})"
				},
				{
					"string": "notes_list_msgs",
					"append": "(${1:db})"
				},
				{
					"string": "notes_mark_read",
					"append": "(${1:database_name}, ${2:user_name}, ${3:note_id})"
				},
				{
					"string": "notes_mark_unread",
					"append": "(${1:database_name}, ${2:user_name}, ${3:note_id})"
				},
				{
					"string": "notes_nav_create",
					"append": "(${1:database_name}, ${2:name})"
				},
				{
					"string": "notes_search",
					"append": "(${1:database_name}, ${2:keywords})"
				},
				{
					"string": "notes_unread",
					"append": "(${1:database_name}, ${2:user_name})"
				},
				{
					"string": "notes_version",
					"append": "(${1:database_name})"
				},
				{
					"string": "nsapi_request_headers",
					"append": "(${1:oid})"
				},
				{
					"string": "nsapi_response_headers",
					"append": "(${1:oid})"
				},
				{
					"string": "nsapi_virtual",
					"append": "(${1:uri})"
				},
				{
					"string": "nthmac",
					"append": "(${1:clent}, ${2:data})"
				},
				{
					"string": "number_format",
					"append": "(${1:number})"
				},
				{
					"string": "oauth_get_sbs",
					"append": "(${1:http_method}, ${2:uri})"
				},
				{
					"string": "oauth_urlencode",
					"append": "(${1:uri})"
				},
				{
					"string": "ob_clean",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_deflatehandler",
					"append": "(${1:data}, ${2:mode})"
				},
				{
					"string": "ob_end_clean",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_end_flush",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_etaghandler",
					"append": "(${1:data}, ${2:mode})"
				},
				{
					"string": "ob_flush",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_get_clean",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_get_contents",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_get_flush",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_get_length",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_get_level",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_get_status",
					"append": "()"
				},
				{
					"string": "ob_gzhandler",
					"append": "(${1:buffer}, ${2:mode})"
				},
				{
					"string": "ob_iconv_handler",
					"append": "(${1:contents}, ${2:status})"
				},
				{
					"string": "ob_implicit_flush",
					"append": "()"
				},
				{
					"string": "ob_inflatehandler",
					"append": "(${1:data}, ${2:mode})"
				},
				{
					"string": "ob_list_handlers",
					"append": "(${1:oid})"
				},
				{
					"string": "ob_start",
					"append": "()"
				},
				{
					"string": "ob_tidyhandler",
					"append": "(${1:input})"
				},
				{
					"string": "oci_bind_array_by_name",
					"append": "(${1:statement}, ${2:name}, ${3:var_array}, ${4:max_table_length})"
				},
				{
					"string": "oci_bind_by_name",
					"append": "(${1:statement}, ${2:bv_name}, ${3:variable})"
				},
				{
					"string": "oci_cancel",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_close",
					"append": "(${1:connection})"
				},
				{
					"string": "oci_commit",
					"append": "(${1:connection})"
				},
				{
					"string": "oci_connect",
					"append": "(${1:username}, ${2:password})"
				},
				{
					"string": "oci_define_by_name",
					"append": "(${1:statement}, ${2:column_name}, ${3:variable})"
				},
				{
					"string": "oci_error",
					"append": "()"
				},
				{
					"string": "oci_execute",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_fetch",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_fetch_all",
					"append": "(${1:statement}, ${2:output})"
				},
				{
					"string": "oci_fetch_array",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_fetch_assoc",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_fetch_object",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_fetch_row",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_field_is_null",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_field_name",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_field_precision",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_field_scale",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_field_size",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_field_type",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_field_type_raw",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_free_statement",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_internal_debug",
					"append": "(${1:onoff})"
				},
				{
					"string": "oci_lob_copy",
					"append": "(${1:lob_to}, ${2:lob_from})"
				},
				{
					"string": "oci_lob_is_equal",
					"append": "(${1:lob1}, ${2:lob2})"
				},
				{
					"string": "oci_new_collection",
					"append": "(${1:connection}, ${2:tdo})"
				},
				{
					"string": "oci_new_connect",
					"append": "(${1:username}, ${2:password})"
				},
				{
					"string": "oci_new_cursor",
					"append": "(${1:connection})"
				},
				{
					"string": "oci_new_descriptor",
					"append": "(${1:connection})"
				},
				{
					"string": "oci_num_fields",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_num_rows",
					"append": "(${1:statement})"
				},
				{
					"string": "oci_parse",
					"append": "(${1:connection}, ${2:sql_text})"
				},
				{
					"string": "oci_password_change",
					"append": "(${1:connection}, ${2:username}, ${3:old_password}, ${4:new_password})"
				},
				{
					"string": "oci_pconnect",
					"append": "(${1:username}, ${2:password})"
				},
				{
					"string": "oci_result",
					"append": "(${1:statement}, ${2:field})"
				},
				{
					"string": "oci_rollback",
					"append": "(${1:connection})"
				},
				{
					"string": "oci_server_version",
					"append": "(${1:connection})"
				},
				{
					"string": "oci_set_action",
					"append": "(${1:connection}, ${2:action_name})"
				},
				{
					"string": "oci_set_client_identifier",
					"append": "(${1:connection}, ${2:client_identifier})"
				},
				{
					"string": "oci_set_client_info",
					"append": "(${1:connection}, ${2:client_info})"
				},
				{
					"string": "oci_set_edition",
					"append": "(${1:edition})"
				},
				{
					"string": "oci_set_module_name",
					"append": "(${1:connection}, ${2:module_name})"
				},
				{
					"string": "oci_set_prefetch",
					"append": "(${1:statement}, ${2:rows})"
				},
				{
					"string": "oci_statement_type",
					"append": "(${1:statement})"
				},
				{
					"string": "ocibindbyname",
					"append": "()"
				},
				{
					"string": "ocicancel",
					"append": "()"
				},
				{
					"string": "ocicloselob",
					"append": "()"
				},
				{
					"string": "ocicollappend",
					"append": "()"
				},
				{
					"string": "ocicollassign",
					"append": "()"
				},
				{
					"string": "ocicollassignelem",
					"append": "()"
				},
				{
					"string": "ocicollgetelem",
					"append": "()"
				},
				{
					"string": "ocicollmax",
					"append": "()"
				},
				{
					"string": "ocicollsize",
					"append": "()"
				},
				{
					"string": "ocicolltrim",
					"append": "()"
				},
				{
					"string": "ocicolumnisnull",
					"append": "()"
				},
				{
					"string": "ocicolumnname",
					"append": "()"
				},
				{
					"string": "ocicolumnprecision",
					"append": "()"
				},
				{
					"string": "ocicolumnscale",
					"append": "()"
				},
				{
					"string": "ocicolumnsize",
					"append": "()"
				},
				{
					"string": "ocicolumntype",
					"append": "()"
				},
				{
					"string": "ocicolumntyperaw",
					"append": "()"
				},
				{
					"string": "ocicommit",
					"append": "()"
				},
				{
					"string": "ocidefinebyname",
					"append": "()"
				},
				{
					"string": "ocierror",
					"append": "()"
				},
				{
					"string": "ociexecute",
					"append": "()"
				},
				{
					"string": "ocifetch",
					"append": "()"
				},
				{
					"string": "ocifetchinto",
					"append": "(${1:statement}, ${2:result})"
				},
				{
					"string": "ocifetchstatement",
					"append": "()"
				},
				{
					"string": "ocifreecollection",
					"append": "()"
				},
				{
					"string": "ocifreecursor",
					"append": "()"
				},
				{
					"string": "ocifreedesc",
					"append": "()"
				},
				{
					"string": "ocifreestatement",
					"append": "()"
				},
				{
					"string": "ociinternaldebug",
					"append": "()"
				},
				{
					"string": "ociloadlob",
					"append": "()"
				},
				{
					"string": "ocilogoff",
					"append": "()"
				},
				{
					"string": "ocilogon",
					"append": "()"
				},
				{
					"string": "ocinewcollection",
					"append": "()"
				},
				{
					"string": "ocinewcursor",
					"append": "()"
				},
				{
					"string": "ocinewdescriptor",
					"append": "()"
				},
				{
					"string": "ocinlogon",
					"append": "()"
				},
				{
					"string": "ocinumcols",
					"append": "()"
				},
				{
					"string": "ociparse",
					"append": "()"
				},
				{
					"string": "ociplogon",
					"append": "()"
				},
				{
					"string": "ociresult",
					"append": "()"
				},
				{
					"string": "ocirollback",
					"append": "()"
				},
				{
					"string": "ocirowcount",
					"append": "()"
				},
				{
					"string": "ocisavelob",
					"append": "()"
				},
				{
					"string": "ocisavelobfile",
					"append": "()"
				},
				{
					"string": "ociserverversion",
					"append": "()"
				},
				{
					"string": "ocisetprefetch",
					"append": "()"
				},
				{
					"string": "ocistatementtype",
					"append": "()"
				},
				{
					"string": "ociwritelobtofile",
					"append": "()"
				},
				{
					"string": "ociwritetemporarylob",
					"append": "()"
				},
				{
					"string": "octdec",
					"append": "(${1:octal_string})"
				},
				{
					"string": "odbc_autocommit",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_binmode",
					"append": "(${1:result_id}, ${2:mode})"
				},
				{
					"string": "odbc_close",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_close_all",
					"append": "(${1:oid})"
				},
				{
					"string": "odbc_columnprivileges",
					"append": "(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table_name}, ${5:column_name})"
				},
				{
					"string": "odbc_columns",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_commit",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_connect",
					"append": "(${1:dsn}, ${2:user}, ${3:password})"
				},
				{
					"string": "odbc_cursor",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_data_source",
					"append": "(${1:connection_id}, ${2:fetch_type})"
				},
				{
					"string": "odbc_do",
					"append": "()"
				},
				{
					"string": "odbc_error",
					"append": "()"
				},
				{
					"string": "odbc_errormsg",
					"append": "()"
				},
				{
					"string": "odbc_exec",
					"append": "(${1:connection_id}, ${2:query_string})"
				},
				{
					"string": "odbc_execute",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "odbc_fetch_into",
					"append": "(${1:result_id}, ${2:result_array})"
				},
				{
					"string": "odbc_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "odbc_fetch_row",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_field_len",
					"append": "(${1:result_id}, ${2:field_number})"
				},
				{
					"string": "odbc_field_name",
					"append": "(${1:result_id}, ${2:field_number})"
				},
				{
					"string": "odbc_field_num",
					"append": "(${1:result_id}, ${2:field_name})"
				},
				{
					"string": "odbc_field_precision",
					"append": "()"
				},
				{
					"string": "odbc_field_scale",
					"append": "(${1:result_id}, ${2:field_number})"
				},
				{
					"string": "odbc_field_type",
					"append": "(${1:result_id}, ${2:field_number})"
				},
				{
					"string": "odbc_foreignkeys",
					"append": "(${1:connection_id}, ${2:pk_qualifier}, ${3:pk_owner}, ${4:pk_table}, ${5:fk_qualifier}, ${6:fk_owner}, ${7:fk_table})"
				},
				{
					"string": "odbc_free_result",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_gettypeinfo",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_longreadlen",
					"append": "(${1:result_id}, ${2:length})"
				},
				{
					"string": "odbc_next_result",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_num_fields",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_num_rows",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_pconnect",
					"append": "(${1:dsn}, ${2:user}, ${3:password})"
				},
				{
					"string": "odbc_prepare",
					"append": "(${1:connection_id}, ${2:query_string})"
				},
				{
					"string": "odbc_primarykeys",
					"append": "(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table})"
				},
				{
					"string": "odbc_procedurecolumns",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_procedures",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_result",
					"append": "(${1:result_id}, ${2:field})"
				},
				{
					"string": "odbc_result_all",
					"append": "(${1:result_id})"
				},
				{
					"string": "odbc_rollback",
					"append": "(${1:connection_id})"
				},
				{
					"string": "odbc_setoption",
					"append": "(${1:id}, ${2:function}, ${3:option}, ${4:param})"
				},
				{
					"string": "odbc_specialcolumns",
					"append": "(${1:connection_id}, ${2:type}, ${3:qualifier}, ${4:owner}, ${5:table}, ${6:scope}, ${7:nullable})"
				},
				{
					"string": "odbc_statistics",
					"append": "(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table_name}, ${5:unique}, ${6:accuracy})"
				},
				{
					"string": "odbc_tableprivileges",
					"append": "(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:name})"
				},
				{
					"string": "odbc_tables",
					"append": "(${1:connection_id})"
				},
				{
					"string": "openal_buffer_create",
					"append": "(${1:oid})"
				},
				{
					"string": "openal_buffer_data",
					"append": "(${1:buffer}, ${2:format}, ${3:data}, ${4:freq})"
				},
				{
					"string": "openal_buffer_destroy",
					"append": "(${1:buffer})"
				},
				{
					"string": "openal_buffer_get",
					"append": "(${1:buffer}, ${2:property})"
				},
				{
					"string": "openal_buffer_loadwav",
					"append": "(${1:buffer}, ${2:wavfile})"
				},
				{
					"string": "openal_context_create",
					"append": "(${1:device})"
				},
				{
					"string": "openal_context_current",
					"append": "(${1:context})"
				},
				{
					"string": "openal_context_destroy",
					"append": "(${1:context})"
				},
				{
					"string": "openal_context_process",
					"append": "(${1:context})"
				},
				{
					"string": "openal_context_suspend",
					"append": "(${1:context})"
				},
				{
					"string": "openal_device_close",
					"append": "(${1:device})"
				},
				{
					"string": "openal_device_open",
					"append": "()"
				},
				{
					"string": "openal_listener_get",
					"append": "(${1:property})"
				},
				{
					"string": "openal_listener_set",
					"append": "(${1:property}, ${2:setting})"
				},
				{
					"string": "openal_source_create",
					"append": "(${1:oid})"
				},
				{
					"string": "openal_source_destroy",
					"append": "(${1:source})"
				},
				{
					"string": "openal_source_get",
					"append": "(${1:source}, ${2:property})"
				},
				{
					"string": "openal_source_pause",
					"append": "(${1:source})"
				},
				{
					"string": "openal_source_play",
					"append": "(${1:source})"
				},
				{
					"string": "openal_source_rewind",
					"append": "(${1:source})"
				},
				{
					"string": "openal_source_set",
					"append": "(${1:source}, ${2:property}, ${3:setting})"
				},
				{
					"string": "openal_source_stop",
					"append": "(${1:source})"
				},
				{
					"string": "openal_stream",
					"append": "(${1:source}, ${2:format}, ${3:rate})"
				},
				{
					"string": "opendir",
					"append": "(${1:path})"
				},
				{
					"string": "openlog",
					"append": "(${1:ident}, ${2:option}, ${3:facility})"
				},
				{
					"string": "openssl_csr_export",
					"append": "(${1:csr}, ${2:out})"
				},
				{
					"string": "openssl_csr_export_to_file",
					"append": "(${1:csr}, ${2:outfilename})"
				},
				{
					"string": "openssl_csr_get_public_key",
					"append": "(${1:csr})"
				},
				{
					"string": "openssl_csr_get_subject",
					"append": "(${1:csr})"
				},
				{
					"string": "openssl_csr_new",
					"append": "(${1:dn}, ${2:privkey})"
				},
				{
					"string": "openssl_csr_sign",
					"append": "(${1:csr}, ${2:cacert}, ${3:priv_key}, ${4:days})"
				},
				{
					"string": "openssl_decrypt",
					"append": "(${1:data}, ${2:method}, ${3:password})"
				},
				{
					"string": "openssl_dh_compute_key",
					"append": "(${1:pub_key}, ${2:dh_key})"
				},
				{
					"string": "openssl_digest",
					"append": "(${1:data}, ${2:method})"
				},
				{
					"string": "openssl_encrypt",
					"append": "(${1:data}, ${2:method}, ${3:password})"
				},
				{
					"string": "openssl_error_string",
					"append": "(${1:oid})"
				},
				{
					"string": "openssl_free_key",
					"append": "(${1:key_identifier})"
				},
				{
					"string": "openssl_get_cipher_methods",
					"append": "()"
				},
				{
					"string": "openssl_get_md_methods",
					"append": "()"
				},
				{
					"string": "openssl_get_privatekey",
					"append": "()"
				},
				{
					"string": "openssl_get_publickey",
					"append": "()"
				},
				{
					"string": "openssl_open",
					"append": "(${1:sealed_data}, ${2:open_data}, ${3:env_key}, ${4:priv_key_id})"
				},
				{
					"string": "openssl_pkcs12_export",
					"append": "(${1:x509}, ${2:out}, ${3:priv_key}, ${4:pass})"
				},
				{
					"string": "openssl_pkcs12_export_to_file",
					"append": "(${1:x509}, ${2:filename}, ${3:priv_key}, ${4:pass})"
				},
				{
					"string": "openssl_pkcs12_read",
					"append": "(${1:pkcs12}, ${2:certs}, ${3:pass})"
				},
				{
					"string": "openssl_pkcs7_decrypt",
					"append": "(${1:infilename}, ${2:outfilename}, ${3:recipcert})"
				},
				{
					"string": "openssl_pkcs7_encrypt",
					"append": "(${1:infile}, ${2:outfile}, ${3:recipcerts}, ${4:headers})"
				},
				{
					"string": "openssl_pkcs7_sign",
					"append": "(${1:infilename}, ${2:outfilename}, ${3:signcert}, ${4:privkey}, ${5:headers})"
				},
				{
					"string": "openssl_pkcs7_verify",
					"append": "(${1:filename}, ${2:flags})"
				},
				{
					"string": "openssl_pkey_export",
					"append": "(${1:key}, ${2:out})"
				},
				{
					"string": "openssl_pkey_export_to_file",
					"append": "(${1:key}, ${2:outfilename})"
				},
				{
					"string": "openssl_pkey_free",
					"append": "(${1:key})"
				},
				{
					"string": "openssl_pkey_get_details",
					"append": "(${1:key})"
				},
				{
					"string": "openssl_pkey_get_private",
					"append": "(${1:key})"
				},
				{
					"string": "openssl_pkey_get_public",
					"append": "(${1:certificate})"
				},
				{
					"string": "openssl_pkey_new",
					"append": "()"
				},
				{
					"string": "openssl_private_decrypt",
					"append": "(${1:data}, ${2:decrypted}, ${3:key})"
				},
				{
					"string": "openssl_private_encrypt",
					"append": "(${1:data}, ${2:crypted}, ${3:key})"
				},
				{
					"string": "openssl_public_decrypt",
					"append": "(${1:data}, ${2:decrypted}, ${3:key})"
				},
				{
					"string": "openssl_public_encrypt",
					"append": "(${1:data}, ${2:crypted}, ${3:key})"
				},
				{
					"string": "openssl_random_pseudo_bytes",
					"append": "(${1:length})"
				},
				{
					"string": "openssl_seal",
					"append": "(${1:data}, ${2:sealed_data}, ${3:env_keys}, ${4:pub_key_ids})"
				},
				{
					"string": "openssl_sign",
					"append": "(${1:data}, ${2:signature}, ${3:priv_key_id})"
				},
				{
					"string": "openssl_verify",
					"append": "(${1:data}, ${2:signature}, ${3:pub_key_id})"
				},
				{
					"string": "openssl_x509_check_private_key",
					"append": "(${1:cert}, ${2:key})"
				},
				{
					"string": "openssl_x509_checkpurpose",
					"append": "(${1:x509cert}, ${2:purpose})"
				},
				{
					"string": "openssl_x509_export",
					"append": "(${1:x509}, ${2:output})"
				},
				{
					"string": "openssl_x509_export_to_file",
					"append": "(${1:x509}, ${2:outfilename})"
				},
				{
					"string": "openssl_x509_free",
					"append": "(${1:x509cert})"
				},
				{
					"string": "openssl_x509_parse",
					"append": "(${1:x509cert})"
				},
				{
					"string": "openssl_x509_read",
					"append": "(${1:x509certdata})"
				},
				{
					"string": "ord",
					"append": "(${1:string})"
				},
				{
					"string": "output_add_rewrite_var",
					"append": "(${1:name}, ${2:value})"
				},
				{
					"string": "output_reset_rewrite_vars",
					"append": "(${1:oid})"
				},
				{
					"string": "overload",
					"append": "(${1:class_name})"
				},
				{
					"string": "override_function",
					"append": "(${1:function_name}, ${2:function_args}, ${3:function_code})"
				},
				{
					"string": "ovrimos_close",
					"append": "(${1:connection})"
				},
				{
					"string": "ovrimos_commit",
					"append": "(${1:connection_id})"
				},
				{
					"string": "ovrimos_connect",
					"append": "(${1:host}, ${2:dborport}, ${3:user}, ${4:password})"
				},
				{
					"string": "ovrimos_cursor",
					"append": "(${1:result_id})"
				},
				{
					"string": "ovrimos_exec",
					"append": "(${1:connection_id}, ${2:query})"
				},
				{
					"string": "ovrimos_execute",
					"append": "(${1:result_id})"
				},
				{
					"string": "ovrimos_fetch_into",
					"append": "(${1:result_id}, ${2:result_array})"
				},
				{
					"string": "ovrimos_fetch_row",
					"append": "(${1:result_id})"
				},
				{
					"string": "ovrimos_field_len",
					"append": "(${1:result_id}, ${2:field_number})"
				},
				{
					"string": "ovrimos_field_name",
					"append": "(${1:result_id}, ${2:field_number})"
				},
				{
					"string": "ovrimos_field_num",
					"append": "(${1:result_id}, ${2:field_name})"
				},
				{
					"string": "ovrimos_field_type",
					"append": "(${1:result_id}, ${2:field_number})"
				},
				{
					"string": "ovrimos_free_result",
					"append": "(${1:result_id})"
				},
				{
					"string": "ovrimos_longreadlen",
					"append": "(${1:result_id}, ${2:length})"
				},
				{
					"string": "ovrimos_num_fields",
					"append": "(${1:result_id})"
				},
				{
					"string": "ovrimos_num_rows",
					"append": "(${1:result_id})"
				},
				{
					"string": "ovrimos_prepare",
					"append": "(${1:connection_id}, ${2:query})"
				},
				{
					"string": "ovrimos_result",
					"append": "(${1:result_id}, ${2:field})"
				},
				{
					"string": "ovrimos_result_all",
					"append": "(${1:result_id})"
				},
				{
					"string": "ovrimos_rollback",
					"append": "(${1:connection_id})"
				},
				{
					"string": "pack",
					"append": "(${1:format})"
				},
				{
					"string": "parse_ini_file",
					"append": "(${1:filename})"
				},
				{
					"string": "parse_ini_string",
					"append": "(${1:ini})"
				},
				{
					"string": "parse_str",
					"append": "(${1:str})"
				},
				{
					"string": "parse_url",
					"append": "(${1:url})"
				},
				{
					"string": "parsekit_compile_file",
					"append": "(${1:filename})"
				},
				{
					"string": "parsekit_compile_string",
					"append": "(${1:phpcode})"
				},
				{
					"string": "parsekit_func_arginfo",
					"append": "(${1:function})"
				},
				{
					"string": "passthru",
					"append": "(${1:command})"
				},
				{
					"string": "pathinfo",
					"append": "(${1:path})"
				},
				{
					"string": "pclose",
					"append": "(${1:handle})"
				},
				{
					"string": "pcntl_alarm",
					"append": "(${1:seconds})"
				},
				{
					"string": "pcntl_exec",
					"append": "(${1:path})"
				},
				{
					"string": "pcntl_fork",
					"append": "(${1:oid})"
				},
				{
					"string": "pcntl_getpriority",
					"append": "()"
				},
				{
					"string": "pcntl_setpriority",
					"append": "(${1:priority})"
				},
				{
					"string": "pcntl_signal",
					"append": "(${1:signo}, ${2:handler})"
				},
				{
					"string": "pcntl_signal_dispatch",
					"append": "(${1:oid})"
				},
				{
					"string": "pcntl_sigprocmask",
					"append": "(${1:how}, ${2:set})"
				},
				{
					"string": "pcntl_sigtimedwait",
					"append": "(${1:set})"
				},
				{
					"string": "pcntl_sigwaitinfo",
					"append": "(${1:set})"
				},
				{
					"string": "pcntl_wait",
					"append": "(${1:status})"
				},
				{
					"string": "pcntl_waitpid",
					"append": "(${1:pid}, ${2:status})"
				},
				{
					"string": "pcntl_wexitstatus",
					"append": "(${1:status})"
				},
				{
					"string": "pcntl_wifexited",
					"append": "(${1:status})"
				},
				{
					"string": "pcntl_wifsignaled",
					"append": "(${1:status})"
				},
				{
					"string": "pcntl_wifstopped",
					"append": "(${1:status})"
				},
				{
					"string": "pcntl_wstopsig",
					"append": "(${1:status})"
				},
				{
					"string": "pcntl_wtermsig",
					"append": "(${1:status})"
				},
				{
					"string": "PDF_activate_item",
					"append": "(${1:pdfdoc}, ${2:id})"
				},
				{
					"string": "PDF_add_annotation",
					"append": "()"
				},
				{
					"string": "PDF_add_bookmark",
					"append": "()"
				},
				{
					"string": "PDF_add_launchlink",
					"append": "(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename})"
				},
				{
					"string": "PDF_add_locallink",
					"append": "(${1:pdfdoc}, ${2:lowerleftx}, ${3:lowerlefty}, ${4:upperrightx}, ${5:upperrighty}, ${6:page}, ${7:dest})"
				},
				{
					"string": "PDF_add_nameddest",
					"append": "(${1:pdfdoc}, ${2:name}, ${3:optlist})"
				},
				{
					"string": "PDF_add_note",
					"append": "(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:contents}, ${7:title}, ${8:icon}, ${9:open})"
				},
				{
					"string": "PDF_add_outline",
					"append": "()"
				},
				{
					"string": "PDF_add_pdflink",
					"append": "(${1:pdfdoc}, ${2:bottom_left_x}, ${3:bottom_left_y}, ${4:up_right_x}, ${5:up_right_y}, ${6:filename}, ${7:page}, ${8:dest})"
				},
				{
					"string": "PDF_add_table_cell",
					"append": "(${1:pdfdoc}, ${2:table}, ${3:column}, ${4:row}, ${5:text}, ${6:optlist})"
				},
				{
					"string": "PDF_add_textflow",
					"append": "(${1:pdfdoc}, ${2:textflow}, ${3:text}, ${4:optlist})"
				},
				{
					"string": "PDF_add_thumbnail",
					"append": "(${1:pdfdoc}, ${2:image})"
				},
				{
					"string": "PDF_add_weblink",
					"append": "(${1:pdfdoc}, ${2:lowerleftx}, ${3:lowerlefty}, ${4:upperrightx}, ${5:upperrighty}, ${6:url})"
				},
				{
					"string": "PDF_arc",
					"append": "(${1:p}, ${2:x}, ${3:y}, ${4:r}, ${5:alpha}, ${6:beta})"
				},
				{
					"string": "PDF_arcn",
					"append": "(${1:p}, ${2:x}, ${3:y}, ${4:r}, ${5:alpha}, ${6:beta})"
				},
				{
					"string": "PDF_attach_file",
					"append": "(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename}, ${7:description}, ${8:author}, ${9:mimetype}, ${10:icon})"
				},
				{
					"string": "PDF_begin_document",
					"append": "(${1:pdfdoc}, ${2:filename}, ${3:optlist})"
				},
				{
					"string": "PDF_begin_font",
					"append": "(${1:pdfdoc}, ${2:filename}, ${3:a}, ${4:b}, ${5:c}, ${6:d}, ${7:e}, ${8:f}, ${9:optlist})"
				},
				{
					"string": "PDF_begin_glyph",
					"append": "(${1:pdfdoc}, ${2:glyphname}, ${3:wx}, ${4:llx}, ${5:lly}, ${6:urx}, ${7:ury})"
				},
				{
					"string": "PDF_begin_item",
					"append": "(${1:pdfdoc}, ${2:tag}, ${3:optlist})"
				},
				{
					"string": "PDF_begin_layer",
					"append": "(${1:pdfdoc}, ${2:layer})"
				},
				{
					"string": "PDF_begin_page",
					"append": "(${1:pdfdoc}, ${2:width}, ${3:height})"
				},
				{
					"string": "PDF_begin_page_ext",
					"append": "(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:optlist})"
				},
				{
					"string": "PDF_begin_pattern",
					"append": "(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:xstep}, ${5:ystep}, ${6:painttype})"
				},
				{
					"string": "PDF_begin_template",
					"append": "(${1:pdfdoc}, ${2:width}, ${3:height})"
				},
				{
					"string": "PDF_begin_template_ext",
					"append": "(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:optlist})"
				},
				{
					"string": "PDF_circle",
					"append": "(${1:pdfdoc}, ${2:x}, ${3:y}, ${4:r})"
				},
				{
					"string": "PDF_clip",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_close",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_close_image",
					"append": "(${1:p}, ${2:image})"
				},
				{
					"string": "PDF_close_pdi",
					"append": "(${1:p}, ${2:doc})"
				},
				{
					"string": "PDF_close_pdi_page",
					"append": "(${1:p}, ${2:page})"
				},
				{
					"string": "PDF_closepath",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_closepath_fill_stroke",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_closepath_stroke",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_concat",
					"append": "(${1:p}, ${2:a}, ${3:b}, ${4:c}, ${5:d}, ${6:e}, ${7:f})"
				},
				{
					"string": "PDF_continue_text",
					"append": "(${1:p}, ${2:text})"
				},
				{
					"string": "PDF_create_3dview",
					"append": "(${1:pdfdoc}, ${2:username}, ${3:optlist})"
				},
				{
					"string": "PDF_create_action",
					"append": "(${1:pdfdoc}, ${2:type}, ${3:optlist})"
				},
				{
					"string": "PDF_create_annotation",
					"append": "(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:type}, ${7:optlist})"
				},
				{
					"string": "PDF_create_bookmark",
					"append": "(${1:pdfdoc}, ${2:text}, ${3:optlist})"
				},
				{
					"string": "PDF_create_field",
					"append": "(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:name}, ${7:type}, ${8:optlist})"
				},
				{
					"string": "PDF_create_fieldgroup",
					"append": "(${1:pdfdoc}, ${2:name}, ${3:optlist})"
				},
				{
					"string": "PDF_create_gstate",
					"append": "(${1:pdfdoc}, ${2:optlist})"
				},
				{
					"string": "PDF_create_pvf",
					"append": "(${1:pdfdoc}, ${2:filename}, ${3:data}, ${4:optlist})"
				},
				{
					"string": "PDF_create_textflow",
					"append": "(${1:pdfdoc}, ${2:text}, ${3:optlist})"
				},
				{
					"string": "PDF_curveto",
					"append": "(${1:p}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3})"
				},
				{
					"string": "PDF_define_layer",
					"append": "(${1:pdfdoc}, ${2:name}, ${3:optlist})"
				},
				{
					"string": "PDF_delete",
					"append": "(${1:pdfdoc})"
				},
				{
					"string": "PDF_delete_pvf",
					"append": "(${1:pdfdoc}, ${2:filename})"
				},
				{
					"string": "PDF_delete_table",
					"append": "(${1:pdfdoc}, ${2:table}, ${3:optlist})"
				},
				{
					"string": "PDF_delete_textflow",
					"append": "(${1:pdfdoc}, ${2:textflow})"
				},
				{
					"string": "PDF_encoding_set_char",
					"append": "(${1:pdfdoc}, ${2:encoding}, ${3:slot}, ${4:glyphname}, ${5:uv})"
				},
				{
					"string": "PDF_end_document",
					"append": "(${1:pdfdoc}, ${2:optlist})"
				},
				{
					"string": "PDF_end_font",
					"append": "(${1:pdfdoc})"
				},
				{
					"string": "PDF_end_glyph",
					"append": "(${1:pdfdoc})"
				},
				{
					"string": "PDF_end_item",
					"append": "(${1:pdfdoc}, ${2:id})"
				},
				{
					"string": "PDF_end_layer",
					"append": "(${1:pdfdoc})"
				},
				{
					"string": "PDF_end_page",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_end_page_ext",
					"append": "(${1:pdfdoc}, ${2:optlist})"
				},
				{
					"string": "PDF_end_pattern",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_end_template",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_endpath",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_fill",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_fill_imageblock",
					"append": "(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:image}, ${5:optlist})"
				},
				{
					"string": "PDF_fill_pdfblock",
					"append": "(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:contents}, ${5:optlist})"
				},
				{
					"string": "PDF_fill_stroke",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_fill_textblock",
					"append": "(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:text}, ${5:optlist})"
				},
				{
					"string": "PDF_findfont",
					"append": "(${1:p}, ${2:fontname}, ${3:encoding}, ${4:embed})"
				},
				{
					"string": "PDF_fit_image",
					"append": "(${1:pdfdoc}, ${2:image}, ${3:x}, ${4:y}, ${5:optlist})"
				},
				{
					"string": "PDF_fit_pdi_page",
					"append": "(${1:pdfdoc}, ${2:page}, ${3:x}, ${4:y}, ${5:optlist})"
				},
				{
					"string": "PDF_fit_table",
					"append": "(${1:pdfdoc}, ${2:table}, ${3:llx}, ${4:lly}, ${5:urx}, ${6:ury}, ${7:optlist})"
				},
				{
					"string": "PDF_fit_textflow",
					"append": "(${1:pdfdoc}, ${2:textflow}, ${3:llx}, ${4:lly}, ${5:urx}, ${6:ury}, ${7:optlist})"
				},
				{
					"string": "PDF_fit_textline",
					"append": "(${1:pdfdoc}, ${2:text}, ${3:x}, ${4:y}, ${5:optlist})"
				},
				{
					"string": "PDF_get_apiname",
					"append": "(${1:pdfdoc})"
				},
				{
					"string": "PDF_get_buffer",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_get_errmsg",
					"append": "(${1:pdfdoc})"
				},
				{
					"string": "PDF_get_errnum",
					"append": "(${1:pdfdoc})"
				},
				{
					"string": "PDF_get_font",
					"append": "()"
				},
				{
					"string": "PDF_get_fontname",
					"append": "()"
				},
				{
					"string": "PDF_get_fontsize",
					"append": "()"
				},
				{
					"string": "PDF_get_image_height",
					"append": "()"
				},
				{
					"string": "PDF_get_image_width",
					"append": "()"
				},
				{
					"string": "PDF_get_majorversion",
					"append": "(${1:oid})"
				},
				{
					"string": "PDF_get_minorversion",
					"append": "(${1:oid})"
				},
				{
					"string": "PDF_get_parameter",
					"append": "(${1:p}, ${2:key}, ${3:modifier})"
				},
				{
					"string": "PDF_get_pdi_parameter",
					"append": "(${1:p}, ${2:key}, ${3:doc}, ${4:page}, ${5:reserved})"
				},
				{
					"string": "PDF_get_pdi_value",
					"append": "(${1:p}, ${2:key}, ${3:doc}, ${4:page}, ${5:reserved})"
				},
				{
					"string": "PDF_get_value",
					"append": "(${1:p}, ${2:key}, ${3:modifier})"
				},
				{
					"string": "PDF_info_font",
					"append": "(${1:pdfdoc}, ${2:font}, ${3:keyword}, ${4:optlist})"
				},
				{
					"string": "PDF_info_matchbox",
					"append": "(${1:pdfdoc}, ${2:boxname}, ${3:num}, ${4:keyword})"
				},
				{
					"string": "PDF_info_table",
					"append": "(${1:pdfdoc}, ${2:table}, ${3:keyword})"
				},
				{
					"string": "PDF_info_textflow",
					"append": "(${1:pdfdoc}, ${2:textflow}, ${3:keyword})"
				},
				{
					"string": "PDF_info_textline",
					"append": "(${1:pdfdoc}, ${2:text}, ${3:keyword}, ${4:optlist})"
				},
				{
					"string": "PDF_initgraphics",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_lineto",
					"append": "(${1:p}, ${2:x}, ${3:y})"
				},
				{
					"string": "PDF_load_3ddata",
					"append": "(${1:pdfdoc}, ${2:filename}, ${3:optlist})"
				},
				{
					"string": "PDF_load_font",
					"append": "(${1:pdfdoc}, ${2:fontname}, ${3:encoding}, ${4:optlist})"
				},
				{
					"string": "PDF_load_iccprofile",
					"append": "(${1:pdfdoc}, ${2:profilename}, ${3:optlist})"
				},
				{
					"string": "PDF_load_image",
					"append": "(${1:pdfdoc}, ${2:imagetype}, ${3:filename}, ${4:optlist})"
				},
				{
					"string": "PDF_makespotcolor",
					"append": "(${1:p}, ${2:spotname})"
				},
				{
					"string": "PDF_moveto",
					"append": "(${1:p}, ${2:x}, ${3:y})"
				},
				{
					"string": "PDF_new",
					"append": "(${1:oid})"
				},
				{
					"string": "PDF_open_ccitt",
					"append": "(${1:pdfdoc}, ${2:filename}, ${3:width}, ${4:height}, ${5:BitReverse}, ${6:k}, ${7:Blackls1})"
				},
				{
					"string": "PDF_open_file",
					"append": "(${1:p}, ${2:filename})"
				},
				{
					"string": "PDF_open_gif",
					"append": "()"
				},
				{
					"string": "PDF_open_image",
					"append": "(${1:p}, ${2:imagetype}, ${3:source}, ${4:data}, ${5:length}, ${6:width}, ${7:height}, ${8:components}, ${9:bpc}, ${10:params})"
				},
				{
					"string": "PDF_open_image_file",
					"append": "(${1:p}, ${2:imagetype}, ${3:filename}, ${4:stringparam}, ${5:intparam})"
				},
				{
					"string": "PDF_open_jpeg",
					"append": "()"
				},
				{
					"string": "PDF_open_memory_image",
					"append": "(${1:p}, ${2:image})"
				},
				{
					"string": "PDF_open_pdi",
					"append": "(${1:pdfdoc}, ${2:filename}, ${3:optlist}, ${4:len})"
				},
				{
					"string": "PDF_open_pdi_document",
					"append": "(${1:p}, ${2:filename}, ${3:optlist})"
				},
				{
					"string": "PDF_open_pdi_page",
					"append": "(${1:p}, ${2:doc}, ${3:pagenumber}, ${4:optlist})"
				},
				{
					"string": "PDF_open_tiff",
					"append": "()"
				},
				{
					"string": "PDF_pcos_get_number",
					"append": "(${1:p}, ${2:doc}, ${3:path})"
				},
				{
					"string": "PDF_pcos_get_stream",
					"append": "(${1:p}, ${2:doc}, ${3:optlist}, ${4:path})"
				},
				{
					"string": "PDF_pcos_get_string",
					"append": "(${1:p}, ${2:doc}, ${3:path})"
				},
				{
					"string": "PDF_place_image",
					"append": "(${1:pdfdoc}, ${2:image}, ${3:x}, ${4:y}, ${5:scale})"
				},
				{
					"string": "PDF_place_pdi_page",
					"append": "(${1:pdfdoc}, ${2:page}, ${3:x}, ${4:y}, ${5:sx}, ${6:sy})"
				},
				{
					"string": "PDF_process_pdi",
					"append": "(${1:pdfdoc}, ${2:doc}, ${3:page}, ${4:optlist})"
				},
				{
					"string": "PDF_rect",
					"append": "(${1:p}, ${2:x}, ${3:y}, ${4:width}, ${5:height})"
				},
				{
					"string": "PDF_restore",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_resume_page",
					"append": "(${1:pdfdoc}, ${2:optlist})"
				},
				{
					"string": "PDF_rotate",
					"append": "(${1:p}, ${2:phi})"
				},
				{
					"string": "PDF_save",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_scale",
					"append": "(${1:p}, ${2:sx}, ${3:sy})"
				},
				{
					"string": "PDF_set_border_color",
					"append": "(${1:p}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "PDF_set_border_dash",
					"append": "(${1:pdfdoc}, ${2:black}, ${3:white})"
				},
				{
					"string": "PDF_set_border_style",
					"append": "(${1:pdfdoc}, ${2:style}, ${3:width})"
				},
				{
					"string": "PDF_set_char_spacing",
					"append": "()"
				},
				{
					"string": "PDF_set_duration",
					"append": "()"
				},
				{
					"string": "PDF_set_gstate",
					"append": "(${1:pdfdoc}, ${2:gstate})"
				},
				{
					"string": "PDF_set_horiz_scaling",
					"append": "()"
				},
				{
					"string": "PDF_set_info",
					"append": "(${1:p}, ${2:key}, ${3:value})"
				},
				{
					"string": "PDF_set_info_author",
					"append": "()"
				},
				{
					"string": "PDF_set_info_creator",
					"append": "()"
				},
				{
					"string": "PDF_set_info_keywords",
					"append": "()"
				},
				{
					"string": "PDF_set_info_subject",
					"append": "()"
				},
				{
					"string": "PDF_set_info_title",
					"append": "()"
				},
				{
					"string": "PDF_set_layer_dependency",
					"append": "(${1:pdfdoc}, ${2:type}, ${3:optlist})"
				},
				{
					"string": "PDF_set_leading",
					"append": "()"
				},
				{
					"string": "PDF_set_parameter",
					"append": "(${1:p}, ${2:key}, ${3:value})"
				},
				{
					"string": "PDF_set_text_matrix",
					"append": "()"
				},
				{
					"string": "PDF_set_text_pos",
					"append": "(${1:p}, ${2:x}, ${3:y})"
				},
				{
					"string": "PDF_set_text_rendering",
					"append": "()"
				},
				{
					"string": "PDF_set_text_rise",
					"append": "()"
				},
				{
					"string": "PDF_set_value",
					"append": "(${1:p}, ${2:key}, ${3:value})"
				},
				{
					"string": "PDF_set_word_spacing",
					"append": "()"
				},
				{
					"string": "PDF_setcolor",
					"append": "(${1:p}, ${2:fstype}, ${3:colorspace}, ${4:c1}, ${5:c2}, ${6:c3}, ${7:c4})"
				},
				{
					"string": "PDF_setdash",
					"append": "(${1:pdfdoc}, ${2:b}, ${3:w})"
				},
				{
					"string": "PDF_setdashpattern",
					"append": "(${1:pdfdoc}, ${2:optlist})"
				},
				{
					"string": "PDF_setflat",
					"append": "(${1:pdfdoc}, ${2:flatness})"
				},
				{
					"string": "PDF_setfont",
					"append": "(${1:pdfdoc}, ${2:font}, ${3:fontsize})"
				},
				{
					"string": "PDF_setgray",
					"append": "(${1:p}, ${2:g})"
				},
				{
					"string": "PDF_setgray_fill",
					"append": "(${1:p}, ${2:g})"
				},
				{
					"string": "PDF_setgray_stroke",
					"append": "(${1:p}, ${2:g})"
				},
				{
					"string": "PDF_setlinecap",
					"append": "(${1:p}, ${2:linecap})"
				},
				{
					"string": "PDF_setlinejoin",
					"append": "(${1:p}, ${2:value})"
				},
				{
					"string": "PDF_setlinewidth",
					"append": "(${1:p}, ${2:width})"
				},
				{
					"string": "PDF_setmatrix",
					"append": "(${1:p}, ${2:a}, ${3:b}, ${4:c}, ${5:d}, ${6:e}, ${7:f})"
				},
				{
					"string": "PDF_setmiterlimit",
					"append": "(${1:pdfdoc}, ${2:miter})"
				},
				{
					"string": "PDF_setpolydash",
					"append": "()"
				},
				{
					"string": "PDF_setrgbcolor",
					"append": "(${1:p}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "PDF_setrgbcolor_fill",
					"append": "(${1:p}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "PDF_setrgbcolor_stroke",
					"append": "(${1:p}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "PDF_shading",
					"append": "(${1:pdfdoc}, ${2:shtype}, ${3:x0}, ${4:y0}, ${5:x1}, ${6:y1}, ${7:c1}, ${8:c2}, ${9:c3}, ${10:c4}, ${11:optlist})"
				},
				{
					"string": "PDF_shading_pattern",
					"append": "(${1:pdfdoc}, ${2:shading}, ${3:optlist})"
				},
				{
					"string": "PDF_shfill",
					"append": "(${1:pdfdoc}, ${2:shading})"
				},
				{
					"string": "PDF_show",
					"append": "(${1:pdfdoc}, ${2:text})"
				},
				{
					"string": "PDF_show_boxed",
					"append": "(${1:p}, ${2:text}, ${3:left}, ${4:top}, ${5:width}, ${6:height}, ${7:mode}, ${8:feature})"
				},
				{
					"string": "PDF_show_xy",
					"append": "(${1:p}, ${2:text}, ${3:x}, ${4:y})"
				},
				{
					"string": "PDF_skew",
					"append": "(${1:p}, ${2:alpha}, ${3:beta})"
				},
				{
					"string": "PDF_stringwidth",
					"append": "(${1:p}, ${2:text}, ${3:font}, ${4:fontsize})"
				},
				{
					"string": "PDF_stroke",
					"append": "(${1:p})"
				},
				{
					"string": "PDF_suspend_page",
					"append": "(${1:pdfdoc}, ${2:optlist})"
				},
				{
					"string": "PDF_translate",
					"append": "(${1:p}, ${2:tx}, ${3:ty})"
				},
				{
					"string": "PDF_utf16_to_utf8",
					"append": "(${1:pdfdoc}, ${2:utf16string})"
				},
				{
					"string": "PDF_utf32_to_utf16",
					"append": "(${1:pdfdoc}, ${2:utf32string}, ${3:ordering})"
				},
				{
					"string": "PDF_utf8_to_utf16",
					"append": "(${1:pdfdoc}, ${2:utf8string}, ${3:ordering})"
				},
				{
					"string": "pfsockopen",
					"append": "(${1:hostname})"
				},
				{
					"string": "pg_affected_rows",
					"append": "(${1:result})"
				},
				{
					"string": "pg_cancel_query",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_client_encoding",
					"append": "()"
				},
				{
					"string": "pg_close",
					"append": "()"
				},
				{
					"string": "pg_connect",
					"append": "(${1:connection_string})"
				},
				{
					"string": "pg_connection_busy",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_connection_reset",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_connection_status",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_convert",
					"append": "(${1:connection}, ${2:table_name}, ${3:assoc_array})"
				},
				{
					"string": "pg_copy_from",
					"append": "(${1:connection}, ${2:table_name}, ${3:rows})"
				},
				{
					"string": "pg_copy_to",
					"append": "(${1:connection}, ${2:table_name})"
				},
				{
					"string": "pg_dbname",
					"append": "()"
				},
				{
					"string": "pg_delete",
					"append": "(${1:connection}, ${2:table_name}, ${3:assoc_array})"
				},
				{
					"string": "pg_end_copy",
					"append": "()"
				},
				{
					"string": "pg_escape_bytea",
					"append": "()"
				},
				{
					"string": "pg_escape_string",
					"append": "()"
				},
				{
					"string": "pg_execute",
					"append": "()"
				},
				{
					"string": "pg_fetch_all",
					"append": "(${1:result})"
				},
				{
					"string": "pg_fetch_all_columns",
					"append": "(${1:result})"
				},
				{
					"string": "pg_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "pg_fetch_assoc",
					"append": "(${1:result})"
				},
				{
					"string": "pg_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "pg_fetch_result",
					"append": "(${1:result}, ${2:row}, ${3:field})"
				},
				{
					"string": "pg_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "pg_field_is_null",
					"append": "(${1:result}, ${2:row}, ${3:field})"
				},
				{
					"string": "pg_field_name",
					"append": "(${1:result}, ${2:field_number})"
				},
				{
					"string": "pg_field_num",
					"append": "(${1:result}, ${2:field_name})"
				},
				{
					"string": "pg_field_prtlen",
					"append": "(${1:result}, ${2:row_number}, ${3:field_name_or_number})"
				},
				{
					"string": "pg_field_size",
					"append": "(${1:result}, ${2:field_number})"
				},
				{
					"string": "pg_field_table",
					"append": "(${1:result}, ${2:field_number})"
				},
				{
					"string": "pg_field_type",
					"append": "(${1:result}, ${2:field_number})"
				},
				{
					"string": "pg_field_type_oid",
					"append": "(${1:result}, ${2:field_number})"
				},
				{
					"string": "pg_free_result",
					"append": "(${1:result})"
				},
				{
					"string": "pg_get_notify",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_get_pid",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_get_result",
					"append": "()"
				},
				{
					"string": "pg_host",
					"append": "()"
				},
				{
					"string": "pg_insert",
					"append": "(${1:connection}, ${2:table_name}, ${3:assoc_array})"
				},
				{
					"string": "pg_last_error",
					"append": "()"
				},
				{
					"string": "pg_last_notice",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_last_oid",
					"append": "(${1:result})"
				},
				{
					"string": "pg_lo_close",
					"append": "(${1:large_object})"
				},
				{
					"string": "pg_lo_create",
					"append": "()"
				},
				{
					"string": "pg_lo_export",
					"append": "()"
				},
				{
					"string": "pg_lo_import",
					"append": "()"
				},
				{
					"string": "pg_lo_open",
					"append": "(${1:connection}, ${2:oid}, ${3:mode})"
				},
				{
					"string": "pg_lo_read",
					"append": "(${1:large_object})"
				},
				{
					"string": "pg_lo_read_all",
					"append": "(${1:large_object})"
				},
				{
					"string": "pg_lo_seek",
					"append": "(${1:large_object}, ${2:offset})"
				},
				{
					"string": "pg_lo_tell",
					"append": "(${1:large_object})"
				},
				{
					"string": "pg_lo_unlink",
					"append": "(${1:connection}, ${2:oid})"
				},
				{
					"string": "pg_lo_write",
					"append": "(${1:large_object}, ${2:data})"
				},
				{
					"string": "pg_meta_data",
					"append": "(${1:connection}, ${2:table_name})"
				},
				{
					"string": "pg_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "pg_num_rows",
					"append": "(${1:result})"
				},
				{
					"string": "pg_options",
					"append": "()"
				},
				{
					"string": "pg_parameter_status",
					"append": "()"
				},
				{
					"string": "pg_pconnect",
					"append": "(${1:connection_string})"
				},
				{
					"string": "pg_ping",
					"append": "()"
				},
				{
					"string": "pg_port",
					"append": "()"
				},
				{
					"string": "pg_prepare",
					"append": "()"
				},
				{
					"string": "pg_put_line",
					"append": "()"
				},
				{
					"string": "pg_query",
					"append": "()"
				},
				{
					"string": "pg_query_params",
					"append": "()"
				},
				{
					"string": "pg_result_error",
					"append": "(${1:result})"
				},
				{
					"string": "pg_result_error_field",
					"append": "(${1:result}, ${2:fieldcode})"
				},
				{
					"string": "pg_result_seek",
					"append": "(${1:result}, ${2:offset})"
				},
				{
					"string": "pg_result_status",
					"append": "(${1:result})"
				},
				{
					"string": "pg_select",
					"append": "(${1:connection}, ${2:table_name}, ${3:assoc_array})"
				},
				{
					"string": "pg_send_execute",
					"append": "(${1:connection}, ${2:stmtname}, ${3:params})"
				},
				{
					"string": "pg_send_prepare",
					"append": "(${1:connection}, ${2:stmtname}, ${3:query})"
				},
				{
					"string": "pg_send_query",
					"append": "(${1:connection}, ${2:query})"
				},
				{
					"string": "pg_send_query_params",
					"append": "(${1:connection}, ${2:query}, ${3:params})"
				},
				{
					"string": "pg_set_client_encoding",
					"append": "()"
				},
				{
					"string": "pg_set_error_verbosity",
					"append": "()"
				},
				{
					"string": "pg_trace",
					"append": "(${1:pathname})"
				},
				{
					"string": "pg_transaction_status",
					"append": "(${1:connection})"
				},
				{
					"string": "pg_tty",
					"append": "()"
				},
				{
					"string": "pg_unescape_bytea",
					"append": "(${1:data})"
				},
				{
					"string": "pg_untrace",
					"append": "()"
				},
				{
					"string": "pg_update",
					"append": "(${1:connection}, ${2:table_name}, ${3:data}, ${4:condition})"
				},
				{
					"string": "pg_version",
					"append": "()"
				},
				{
					"string": "php_check_syntax",
					"append": "(${1:filename})"
				},
				{
					"string": "php_ini_loaded_file",
					"append": "(${1:oid})"
				},
				{
					"string": "php_ini_scanned_files",
					"append": "(${1:oid})"
				},
				{
					"string": "php_logo_guid",
					"append": "(${1:oid})"
				},
				{
					"string": "php_sapi_name",
					"append": "(${1:oid})"
				},
				{
					"string": "php_strip_whitespace",
					"append": "(${1:filename})"
				},
				{
					"string": "php_uname",
					"append": "()"
				},
				{
					"string": "phpcredits",
					"append": "()"
				},
				{
					"string": "phpinfo",
					"append": "()"
				},
				{
					"string": "phpversion",
					"append": "()"
				},
				{
					"string": "pi",
					"append": "(${1:oid})"
				},
				{
					"string": "png2wbmp",
					"append": "(${1:pngname}, ${2:wbmpname}, ${3:dest_height}, ${4:dest_width}, ${5:threshold})"
				},
				{
					"string": "popen",
					"append": "(${1:command}, ${2:mode})"
				},
				{
					"string": "pos",
					"append": "()"
				},
				{
					"string": "posix_access",
					"append": "(${1:file})"
				},
				{
					"string": "posix_ctermid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_errno",
					"append": "()"
				},
				{
					"string": "posix_get_last_error",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getcwd",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getegid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_geteuid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getgid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getgrgid",
					"append": "(${1:gid})"
				},
				{
					"string": "posix_getgrnam",
					"append": "(${1:name})"
				},
				{
					"string": "posix_getgroups",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getlogin",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getpgid",
					"append": "(${1:pid})"
				},
				{
					"string": "posix_getpgrp",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getpid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getppid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getpwnam",
					"append": "(${1:username})"
				},
				{
					"string": "posix_getpwuid",
					"append": "(${1:uid})"
				},
				{
					"string": "posix_getrlimit",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_getsid",
					"append": "(${1:pid})"
				},
				{
					"string": "posix_getuid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_initgroups",
					"append": "(${1:name}, ${2:base_group_id})"
				},
				{
					"string": "posix_isatty",
					"append": "(${1:fd})"
				},
				{
					"string": "posix_kill",
					"append": "(${1:pid}, ${2:sig})"
				},
				{
					"string": "posix_mkfifo",
					"append": "(${1:pathname}, ${2:mode})"
				},
				{
					"string": "posix_mknod",
					"append": "(${1:pathname}, ${2:mode})"
				},
				{
					"string": "posix_setegid",
					"append": "(${1:gid})"
				},
				{
					"string": "posix_seteuid",
					"append": "(${1:uid})"
				},
				{
					"string": "posix_setgid",
					"append": "(${1:gid})"
				},
				{
					"string": "posix_setpgid",
					"append": "(${1:pid}, ${2:pgid})"
				},
				{
					"string": "posix_setsid",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_setuid",
					"append": "(${1:uid})"
				},
				{
					"string": "posix_strerror",
					"append": "(${1:errno})"
				},
				{
					"string": "posix_times",
					"append": "(${1:oid})"
				},
				{
					"string": "posix_ttyname",
					"append": "(${1:fd})"
				},
				{
					"string": "posix_uname",
					"append": "(${1:oid})"
				},
				{
					"string": "pow",
					"append": "(${1:base}, ${2:exp})"
				},
				{
					"string": "preg_filter",
					"append": "(${1:pattern}, ${2:replacement}, ${3:subject})"
				},
				{
					"string": "preg_grep",
					"append": "(${1:pattern}, ${2:input})"
				},
				{
					"string": "preg_last_error",
					"append": "(${1:oid})"
				},
				{
					"string": "preg_match",
					"append": "(${1:pattern}, ${2:subject})"
				},
				{
					"string": "preg_match_all",
					"append": "(${1:pattern}, ${2:subject}, ${3:matches})"
				},
				{
					"string": "preg_quote",
					"append": "(${1:str})"
				},
				{
					"string": "preg_replace",
					"append": "(${1:pattern}, ${2:replacement}, ${3:subject})"
				},
				{
					"string": "preg_replace_callback",
					"append": "(${1:pattern}, ${2:callback}, ${3:subject})"
				},
				{
					"string": "preg_split",
					"append": "(${1:pattern}, ${2:subject})"
				},
				{
					"string": "prev",
					"append": "(${1:array})"
				},
				{
					"string": "print",
					"append": "(${1:arg})"
				},
				{
					"string": "print_r",
					"append": "(${1:expression})"
				},
				{
					"string": "printer_abort",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_close",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_create_brush",
					"append": "(${1:style}, ${2:color})"
				},
				{
					"string": "printer_create_dc",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_create_font",
					"append": "(${1:face}, ${2:height}, ${3:width}, ${4:font_weight}, ${5:italic}, ${6:underline}, ${7:strikeout}, ${8:orientation})"
				},
				{
					"string": "printer_create_pen",
					"append": "(${1:style}, ${2:width}, ${3:color})"
				},
				{
					"string": "printer_delete_brush",
					"append": "(${1:brush_handle})"
				},
				{
					"string": "printer_delete_dc",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_delete_font",
					"append": "(${1:font_handle})"
				},
				{
					"string": "printer_delete_pen",
					"append": "(${1:pen_handle})"
				},
				{
					"string": "printer_draw_bmp",
					"append": "(${1:printer_handle}, ${2:filename}, ${3:x}, ${4:y})"
				},
				{
					"string": "printer_draw_chord",
					"append": "(${1:printer_handle}, ${2:rec_x}, ${3:rec_y}, ${4:rec_x1}, ${5:rec_y1}, ${6:rad_x}, ${7:rad_y}, ${8:rad_x1}, ${9:rad_y1})"
				},
				{
					"string": "printer_draw_elipse",
					"append": "(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y})"
				},
				{
					"string": "printer_draw_line",
					"append": "(${1:printer_handle}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y})"
				},
				{
					"string": "printer_draw_pie",
					"append": "(${1:printer_handle}, ${2:rec_x}, ${3:rec_y}, ${4:rec_x1}, ${5:rec_y1}, ${6:rad1_x}, ${7:rad1_y}, ${8:rad2_x}, ${9:rad2_y})"
				},
				{
					"string": "printer_draw_rectangle",
					"append": "(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y})"
				},
				{
					"string": "printer_draw_roundrect",
					"append": "(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y}, ${6:width}, ${7:height})"
				},
				{
					"string": "printer_draw_text",
					"append": "(${1:printer_handle}, ${2:text}, ${3:x}, ${4:y})"
				},
				{
					"string": "printer_end_doc",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_end_page",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_get_option",
					"append": "(${1:printer_handle}, ${2:option})"
				},
				{
					"string": "printer_list",
					"append": "(${1:enumtype})"
				},
				{
					"string": "printer_logical_fontheight",
					"append": "(${1:printer_handle}, ${2:height})"
				},
				{
					"string": "printer_open",
					"append": "()"
				},
				{
					"string": "printer_select_brush",
					"append": "(${1:printer_handle}, ${2:brush_handle})"
				},
				{
					"string": "printer_select_font",
					"append": "(${1:printer_handle}, ${2:font_handle})"
				},
				{
					"string": "printer_select_pen",
					"append": "(${1:printer_handle}, ${2:pen_handle})"
				},
				{
					"string": "printer_set_option",
					"append": "(${1:printer_handle}, ${2:option}, ${3:value})"
				},
				{
					"string": "printer_start_doc",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_start_page",
					"append": "(${1:printer_handle})"
				},
				{
					"string": "printer_write",
					"append": "(${1:printer_handle}, ${2:content})"
				},
				{
					"string": "printf",
					"append": "(${1:format})"
				},
				{
					"string": "proc_close",
					"append": "(${1:process})"
				},
				{
					"string": "proc_get_status",
					"append": "(${1:process})"
				},
				{
					"string": "proc_nice",
					"append": "(${1:increment})"
				},
				{
					"string": "proc_open",
					"append": "(${1:cmd}, ${2:descriptorspec}, ${3:pipes})"
				},
				{
					"string": "proc_terminate",
					"append": "(${1:process})"
				},
				{
					"string": "property_exists",
					"append": "(${1:class}, ${2:property})"
				},
				{
					"string": "ps_add_bookmark",
					"append": "(${1:psdoc}, ${2:text})"
				},
				{
					"string": "ps_add_launchlink",
					"append": "(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename})"
				},
				{
					"string": "ps_add_locallink",
					"append": "(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:page}, ${7:dest})"
				},
				{
					"string": "ps_add_note",
					"append": "(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:contents}, ${7:title}, ${8:icon}, ${9:open})"
				},
				{
					"string": "ps_add_pdflink",
					"append": "(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename}, ${7:page}, ${8:dest})"
				},
				{
					"string": "ps_add_weblink",
					"append": "(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:url})"
				},
				{
					"string": "ps_arc",
					"append": "(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius}, ${5:alpha}, ${6:beta})"
				},
				{
					"string": "ps_arcn",
					"append": "(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius}, ${5:alpha}, ${6:beta})"
				},
				{
					"string": "ps_begin_page",
					"append": "(${1:psdoc}, ${2:width}, ${3:height})"
				},
				{
					"string": "ps_begin_pattern",
					"append": "(${1:psdoc}, ${2:width}, ${3:height}, ${4:xstep}, ${5:ystep}, ${6:painttype})"
				},
				{
					"string": "ps_begin_template",
					"append": "(${1:psdoc}, ${2:width}, ${3:height})"
				},
				{
					"string": "ps_circle",
					"append": "(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius})"
				},
				{
					"string": "ps_clip",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_close",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_close_image",
					"append": "(${1:psdoc}, ${2:imageid})"
				},
				{
					"string": "ps_closepath",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_closepath_stroke",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_continue_text",
					"append": "(${1:psdoc}, ${2:text})"
				},
				{
					"string": "ps_curveto",
					"append": "(${1:psdoc}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3})"
				},
				{
					"string": "ps_delete",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_end_page",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_end_pattern",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_end_template",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_fill",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_fill_stroke",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_findfont",
					"append": "(${1:psdoc}, ${2:fontname}, ${3:encoding})"
				},
				{
					"string": "ps_get_buffer",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_get_parameter",
					"append": "(${1:psdoc}, ${2:name})"
				},
				{
					"string": "ps_get_value",
					"append": "(${1:psdoc}, ${2:name})"
				},
				{
					"string": "ps_hyphenate",
					"append": "(${1:psdoc}, ${2:text})"
				},
				{
					"string": "ps_include_file",
					"append": "(${1:psdoc}, ${2:file})"
				},
				{
					"string": "ps_lineto",
					"append": "(${1:psdoc}, ${2:x}, ${3:y})"
				},
				{
					"string": "ps_makespotcolor",
					"append": "(${1:psdoc}, ${2:name})"
				},
				{
					"string": "ps_moveto",
					"append": "(${1:psdoc}, ${2:x}, ${3:y})"
				},
				{
					"string": "ps_new",
					"append": "(${1:oid})"
				},
				{
					"string": "ps_open_file",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_open_image",
					"append": "(${1:psdoc}, ${2:type}, ${3:source}, ${4:data}, ${5:lenght}, ${6:width}, ${7:height}, ${8:components}, ${9:bpc}, ${10:params})"
				},
				{
					"string": "ps_open_image_file",
					"append": "(${1:psdoc}, ${2:type}, ${3:filename})"
				},
				{
					"string": "ps_open_memory_image",
					"append": "(${1:psdoc}, ${2:gd})"
				},
				{
					"string": "ps_place_image",
					"append": "(${1:psdoc}, ${2:imageid}, ${3:x}, ${4:y}, ${5:scale})"
				},
				{
					"string": "ps_rect",
					"append": "(${1:psdoc}, ${2:x}, ${3:y}, ${4:width}, ${5:height})"
				},
				{
					"string": "ps_restore",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_rotate",
					"append": "(${1:psdoc}, ${2:rot})"
				},
				{
					"string": "ps_save",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_scale",
					"append": "(${1:psdoc}, ${2:x}, ${3:y})"
				},
				{
					"string": "ps_set_border_color",
					"append": "(${1:psdoc}, ${2:red}, ${3:green}, ${4:blue})"
				},
				{
					"string": "ps_set_border_dash",
					"append": "(${1:psdoc}, ${2:black}, ${3:white})"
				},
				{
					"string": "ps_set_border_style",
					"append": "(${1:psdoc}, ${2:style}, ${3:width})"
				},
				{
					"string": "ps_set_info",
					"append": "(${1:p}, ${2:key}, ${3:val})"
				},
				{
					"string": "ps_set_parameter",
					"append": "(${1:psdoc}, ${2:name}, ${3:value})"
				},
				{
					"string": "ps_set_text_pos",
					"append": "(${1:psdoc}, ${2:x}, ${3:y})"
				},
				{
					"string": "ps_set_value",
					"append": "(${1:psdoc}, ${2:name}, ${3:value})"
				},
				{
					"string": "ps_setcolor",
					"append": "(${1:psdoc}, ${2:type}, ${3:colorspace}, ${4:c1}, ${5:c2}, ${6:c3}, ${7:c4})"
				},
				{
					"string": "ps_setdash",
					"append": "(${1:psdoc}, ${2:on}, ${3:off})"
				},
				{
					"string": "ps_setflat",
					"append": "(${1:psdoc}, ${2:value})"
				},
				{
					"string": "ps_setfont",
					"append": "(${1:psdoc}, ${2:fontid}, ${3:size})"
				},
				{
					"string": "ps_setgray",
					"append": "(${1:psdoc}, ${2:gray})"
				},
				{
					"string": "ps_setlinecap",
					"append": "(${1:psdoc}, ${2:type})"
				},
				{
					"string": "ps_setlinejoin",
					"append": "(${1:psdoc}, ${2:type})"
				},
				{
					"string": "ps_setlinewidth",
					"append": "(${1:psdoc}, ${2:width})"
				},
				{
					"string": "ps_setmiterlimit",
					"append": "(${1:psdoc}, ${2:value})"
				},
				{
					"string": "ps_setoverprintmode",
					"append": "(${1:psdoc}, ${2:mode})"
				},
				{
					"string": "ps_setpolydash",
					"append": "(${1:psdoc}, ${2:arr})"
				},
				{
					"string": "ps_shading",
					"append": "(${1:psdoc}, ${2:type}, ${3:x0}, ${4:y0}, ${5:x1}, ${6:y1}, ${7:c1}, ${8:c2}, ${9:c3}, ${10:c4}, ${11:optlist})"
				},
				{
					"string": "ps_shading_pattern",
					"append": "(${1:psdoc}, ${2:shadingid}, ${3:optlist})"
				},
				{
					"string": "ps_shfill",
					"append": "(${1:psdoc}, ${2:shadingid})"
				},
				{
					"string": "ps_show",
					"append": "(${1:psdoc}, ${2:text})"
				},
				{
					"string": "ps_show2",
					"append": "(${1:psdoc}, ${2:text}, ${3:len})"
				},
				{
					"string": "ps_show_boxed",
					"append": "(${1:psdoc}, ${2:text}, ${3:left}, ${4:bottom}, ${5:width}, ${6:height}, ${7:hmode})"
				},
				{
					"string": "ps_show_xy",
					"append": "(${1:psdoc}, ${2:text}, ${3:x}, ${4:y})"
				},
				{
					"string": "ps_show_xy2",
					"append": "(${1:psdoc}, ${2:text}, ${3:len}, ${4:xcoor}, ${5:ycoor})"
				},
				{
					"string": "ps_string_geometry",
					"append": "(${1:psdoc}, ${2:text})"
				},
				{
					"string": "ps_stringwidth",
					"append": "(${1:psdoc}, ${2:text})"
				},
				{
					"string": "ps_stroke",
					"append": "(${1:psdoc})"
				},
				{
					"string": "ps_symbol",
					"append": "(${1:psdoc}, ${2:ord})"
				},
				{
					"string": "ps_symbol_name",
					"append": "(${1:psdoc}, ${2:ord})"
				},
				{
					"string": "ps_symbol_width",
					"append": "(${1:psdoc}, ${2:ord})"
				},
				{
					"string": "ps_translate",
					"append": "(${1:psdoc}, ${2:x}, ${3:y})"
				},
				{
					"string": "pspell_add_to_personal",
					"append": "(${1:dictionary_link}, ${2:word})"
				},
				{
					"string": "pspell_add_to_session",
					"append": "(${1:dictionary_link}, ${2:word})"
				},
				{
					"string": "pspell_check",
					"append": "(${1:dictionary_link}, ${2:word})"
				},
				{
					"string": "pspell_clear_session",
					"append": "(${1:dictionary_link})"
				},
				{
					"string": "pspell_config_create",
					"append": "(${1:language})"
				},
				{
					"string": "pspell_config_data_dir",
					"append": "(${1:conf}, ${2:directory})"
				},
				{
					"string": "pspell_config_dict_dir",
					"append": "(${1:conf}, ${2:directory})"
				},
				{
					"string": "pspell_config_ignore",
					"append": "(${1:dictionary_link}, ${2:n})"
				},
				{
					"string": "pspell_config_mode",
					"append": "(${1:dictionary_link}, ${2:mode})"
				},
				{
					"string": "pspell_config_personal",
					"append": "(${1:dictionary_link}, ${2:file})"
				},
				{
					"string": "pspell_config_repl",
					"append": "(${1:dictionary_link}, ${2:file})"
				},
				{
					"string": "pspell_config_runtogether",
					"append": "(${1:dictionary_link}, ${2:flag})"
				},
				{
					"string": "pspell_config_save_repl",
					"append": "(${1:dictionary_link}, ${2:flag})"
				},
				{
					"string": "pspell_new",
					"append": "(${1:language})"
				},
				{
					"string": "pspell_new_config",
					"append": "(${1:config})"
				},
				{
					"string": "pspell_new_personal",
					"append": "(${1:personal}, ${2:language})"
				},
				{
					"string": "pspell_save_wordlist",
					"append": "(${1:dictionary_link})"
				},
				{
					"string": "pspell_store_replacement",
					"append": "(${1:dictionary_link}, ${2:misspelled}, ${3:correct})"
				},
				{
					"string": "pspell_suggest",
					"append": "(${1:dictionary_link}, ${2:word})"
				},
				{
					"string": "putenv",
					"append": "(${1:setting})"
				},
				{
					"string": "px_close",
					"append": "(${1:pxdoc})"
				},
				{
					"string": "px_create_fp",
					"append": "(${1:pxdoc}, ${2:file}, ${3:fielddesc})"
				},
				{
					"string": "px_date2string",
					"append": "(${1:pxdoc}, ${2:value}, ${3:format})"
				},
				{
					"string": "px_delete",
					"append": "(${1:pxdoc})"
				},
				{
					"string": "px_delete_record",
					"append": "(${1:pxdoc}, ${2:num})"
				},
				{
					"string": "px_get_field",
					"append": "(${1:pxdoc}, ${2:fieldno})"
				},
				{
					"string": "px_get_info",
					"append": "(${1:pxdoc})"
				},
				{
					"string": "px_get_parameter",
					"append": "(${1:pxdoc}, ${2:name})"
				},
				{
					"string": "px_get_record",
					"append": "(${1:pxdoc}, ${2:num})"
				},
				{
					"string": "px_get_schema",
					"append": "(${1:pxdoc})"
				},
				{
					"string": "px_get_value",
					"append": "(${1:pxdoc}, ${2:name})"
				},
				{
					"string": "px_insert_record",
					"append": "(${1:pxdoc}, ${2:data})"
				},
				{
					"string": "px_new",
					"append": "(${1:oid})"
				},
				{
					"string": "px_numfields",
					"append": "(${1:pxdoc})"
				},
				{
					"string": "px_numrecords",
					"append": "(${1:pxdoc})"
				},
				{
					"string": "px_open_fp",
					"append": "(${1:pxdoc}, ${2:file})"
				},
				{
					"string": "px_put_record",
					"append": "(${1:pxdoc}, ${2:record})"
				},
				{
					"string": "px_retrieve_record",
					"append": "(${1:pxdoc}, ${2:num})"
				},
				{
					"string": "px_set_blob_file",
					"append": "(${1:pxdoc}, ${2:filename})"
				},
				{
					"string": "px_set_parameter",
					"append": "(${1:pxdoc}, ${2:name}, ${3:value})"
				},
				{
					"string": "px_set_tablename",
					"append": "(${1:pxdoc}, ${2:name})"
				},
				{
					"string": "px_set_targetencoding",
					"append": "(${1:pxdoc}, ${2:encoding})"
				},
				{
					"string": "px_set_value",
					"append": "(${1:pxdoc}, ${2:name}, ${3:value})"
				},
				{
					"string": "px_timestamp2string",
					"append": "(${1:pxdoc}, ${2:value}, ${3:format})"
				},
				{
					"string": "px_update_record",
					"append": "(${1:pxdoc}, ${2:data}, ${3:num})"
				},
				{
					"string": "qdom_error",
					"append": "(${1:oid})"
				},
				{
					"string": "qdom_tree",
					"append": "(${1:doc})"
				},
				{
					"string": "quoted_printable_decode",
					"append": "(${1:str})"
				},
				{
					"string": "quoted_printable_encode",
					"append": "(${1:str})"
				},
				{
					"string": "quotemeta",
					"append": "(${1:str})"
				},
				{
					"string": "rad2deg",
					"append": "(${1:number})"
				},
				{
					"string": "radius_acct_open",
					"append": "(${1:oid})"
				},
				{
					"string": "radius_add_server",
					"append": "(${1:radius_handle}, ${2:hostname}, ${3:port}, ${4:secret}, ${5:timeout}, ${6:max_tries})"
				},
				{
					"string": "radius_auth_open",
					"append": "(${1:oid})"
				},
				{
					"string": "radius_close",
					"append": "(${1:radius_handle})"
				},
				{
					"string": "radius_config",
					"append": "(${1:radius_handle}, ${2:file})"
				},
				{
					"string": "radius_create_request",
					"append": "(${1:radius_handle}, ${2:type})"
				},
				{
					"string": "radius_cvt_addr",
					"append": "(${1:data})"
				},
				{
					"string": "radius_cvt_int",
					"append": "(${1:data})"
				},
				{
					"string": "radius_cvt_string",
					"append": "(${1:data})"
				},
				{
					"string": "radius_demangle",
					"append": "(${1:radius_handle}, ${2:mangled})"
				},
				{
					"string": "radius_demangle_mppe_key",
					"append": "(${1:radius_handle}, ${2:mangled})"
				},
				{
					"string": "radius_get_attr",
					"append": "(${1:radius_handle})"
				},
				{
					"string": "radius_get_vendor_attr",
					"append": "(${1:data})"
				},
				{
					"string": "radius_put_addr",
					"append": "(${1:radius_handle}, ${2:type}, ${3:addr})"
				},
				{
					"string": "radius_put_attr",
					"append": "(${1:radius_handle}, ${2:type}, ${3:value})"
				},
				{
					"string": "radius_put_int",
					"append": "(${1:radius_handle}, ${2:type}, ${3:value})"
				},
				{
					"string": "radius_put_string",
					"append": "(${1:radius_handle}, ${2:type}, ${3:value})"
				},
				{
					"string": "radius_put_vendor_addr",
					"append": "(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:addr})"
				},
				{
					"string": "radius_put_vendor_attr",
					"append": "(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})"
				},
				{
					"string": "radius_put_vendor_int",
					"append": "(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})"
				},
				{
					"string": "radius_put_vendor_string",
					"append": "(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})"
				},
				{
					"string": "radius_request_authenticator",
					"append": "(${1:radius_handle})"
				},
				{
					"string": "radius_send_request",
					"append": "(${1:radius_handle})"
				},
				{
					"string": "radius_server_secret",
					"append": "(${1:radius_handle})"
				},
				{
					"string": "radius_strerror",
					"append": "(${1:radius_handle})"
				},
				{
					"string": "rand",
					"append": "(${1:oid})"
				},
				{
					"string": "range",
					"append": "(${1:low}, ${2:high})"
				},
				{
					"string": "rar_wrapper_cache_stats",
					"append": "(${1:oid})"
				},
				{
					"string": "rawurldecode",
					"append": "(${1:str})"
				},
				{
					"string": "rawurlencode",
					"append": "(${1:str})"
				},
				{
					"string": "read_exif_data",
					"append": "()"
				},
				{
					"string": "readdir",
					"append": "()"
				},
				{
					"string": "readfile",
					"append": "(${1:filename})"
				},
				{
					"string": "readgzfile",
					"append": "(${1:filename})"
				},
				{
					"string": "readline",
					"append": "()"
				},
				{
					"string": "readline_add_history",
					"append": "(${1:line})"
				},
				{
					"string": "readline_callback_handler_install",
					"append": "(${1:prompt}, ${2:callback})"
				},
				{
					"string": "readline_callback_handler_remove",
					"append": "(${1:oid})"
				},
				{
					"string": "readline_callback_read_char",
					"append": "(${1:oid})"
				},
				{
					"string": "readline_clear_history",
					"append": "(${1:oid})"
				},
				{
					"string": "readline_completion_function",
					"append": "(${1:function})"
				},
				{
					"string": "readline_info",
					"append": "()"
				},
				{
					"string": "readline_list_history",
					"append": "(${1:oid})"
				},
				{
					"string": "readline_on_new_line",
					"append": "(${1:oid})"
				},
				{
					"string": "readline_read_history",
					"append": "()"
				},
				{
					"string": "readline_redisplay",
					"append": "(${1:oid})"
				},
				{
					"string": "readline_write_history",
					"append": "()"
				},
				{
					"string": "readlink",
					"append": "(${1:path})"
				},
				{
					"string": "realpath",
					"append": "(${1:path})"
				},
				{
					"string": "realpath_cache_get",
					"append": "(${1:oid})"
				},
				{
					"string": "realpath_cache_size",
					"append": "(${1:oid})"
				},
				{
					"string": "recode",
					"append": "()"
				},
				{
					"string": "recode_file",
					"append": "(${1:request}, ${2:input}, ${3:output})"
				},
				{
					"string": "recode_string",
					"append": "(${1:request}, ${2:string})"
				},
				{
					"string": "register_shutdown_function",
					"append": "(${1:function})"
				},
				{
					"string": "register_tick_function",
					"append": "(${1:function})"
				},
				{
					"string": "rename",
					"append": "(${1:oldname}, ${2:newname})"
				},
				{
					"string": "rename_function",
					"append": "(${1:original_name}, ${2:new_name})"
				},
				{
					"string": "reset",
					"append": "(${1:array})"
				},
				{
					"string": "restore_error_handler",
					"append": "(${1:oid})"
				},
				{
					"string": "restore_exception_handler",
					"append": "(${1:oid})"
				},
				{
					"string": "restore_include_path",
					"append": "(${1:oid})"
				},
				{
					"string": "rewind",
					"append": "(${1:handle})"
				},
				{
					"string": "rewinddir",
					"append": "()"
				},
				{
					"string": "rmdir",
					"append": "(${1:dirname})"
				},
				{
					"string": "round",
					"append": "(${1:val})"
				},
				{
					"string": "rpm_close",
					"append": "(${1:rpmr})"
				},
				{
					"string": "rpm_get_tag",
					"append": "(${1:rpmr}, ${2:tagnum})"
				},
				{
					"string": "rpm_is_valid",
					"append": "(${1:filename})"
				},
				{
					"string": "rpm_open",
					"append": "(${1:filename})"
				},
				{
					"string": "rpm_version",
					"append": "(${1:oid})"
				},
				{
					"string": "rsort",
					"append": "(${1:array})"
				},
				{
					"string": "rtrim",
					"append": "(${1:str})"
				},
				{
					"string": "runkit_class_adopt",
					"append": "(${1:classname}, ${2:parentname})"
				},
				{
					"string": "runkit_class_emancipate",
					"append": "(${1:classname})"
				},
				{
					"string": "runkit_constant_add",
					"append": "(${1:constname}, ${2:value})"
				},
				{
					"string": "runkit_constant_redefine",
					"append": "(${1:constname}, ${2:newvalue})"
				},
				{
					"string": "runkit_constant_remove",
					"append": "(${1:constname})"
				},
				{
					"string": "runkit_function_add",
					"append": "(${1:funcname}, ${2:arglist}, ${3:code})"
				},
				{
					"string": "runkit_function_copy",
					"append": "(${1:funcname}, ${2:targetname})"
				},
				{
					"string": "runkit_function_redefine",
					"append": "(${1:funcname}, ${2:arglist}, ${3:code})"
				},
				{
					"string": "runkit_function_remove",
					"append": "(${1:funcname})"
				},
				{
					"string": "runkit_function_rename",
					"append": "(${1:funcname}, ${2:newname})"
				},
				{
					"string": "runkit_import",
					"append": "(${1:filename})"
				},
				{
					"string": "runkit_lint",
					"append": "(${1:code})"
				},
				{
					"string": "runkit_lint_file",
					"append": "(${1:filename})"
				},
				{
					"string": "runkit_method_add",
					"append": "(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})"
				},
				{
					"string": "runkit_method_copy",
					"append": "(${1:dClass}, ${2:dMethod}, ${3:sClass})"
				},
				{
					"string": "runkit_method_redefine",
					"append": "(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})"
				},
				{
					"string": "runkit_method_remove",
					"append": "(${1:classname}, ${2:methodname})"
				},
				{
					"string": "runkit_method_rename",
					"append": "(${1:classname}, ${2:methodname}, ${3:newname})"
				},
				{
					"string": "runkit_return_value_used",
					"append": "(${1:oid})"
				},
				{
					"string": "runkit_sandbox_output_handler",
					"append": "(${1:sandbox})"
				},
				{
					"string": "runkit_superglobals",
					"append": "(${1:oid})"
				},
				{
					"string": "scandir",
					"append": "(${1:directory})"
				},
				{
					"string": "sem_acquire",
					"append": "(${1:sem_identifier})"
				},
				{
					"string": "sem_get",
					"append": "(${1:key})"
				},
				{
					"string": "sem_release",
					"append": "(${1:sem_identifier})"
				},
				{
					"string": "sem_remove",
					"append": "(${1:sem_identifier})"
				},
				{
					"string": "serialize",
					"append": "(${1:value})"
				},
				{
					"string": "session_cache_expire",
					"append": "()"
				},
				{
					"string": "session_cache_limiter",
					"append": "()"
				},
				{
					"string": "session_commit",
					"append": "()"
				},
				{
					"string": "session_decode",
					"append": "(${1:data})"
				},
				{
					"string": "session_destroy",
					"append": "(${1:oid})"
				},
				{
					"string": "session_encode",
					"append": "(${1:oid})"
				},
				{
					"string": "session_get_cookie_params",
					"append": "(${1:oid})"
				},
				{
					"string": "session_id",
					"append": "()"
				},
				{
					"string": "session_is_registered",
					"append": "(${1:name})"
				},
				{
					"string": "session_module_name",
					"append": "()"
				},
				{
					"string": "session_name",
					"append": "()"
				},
				{
					"string": "session_pgsql_add_error",
					"append": "(${1:error_level})"
				},
				{
					"string": "session_pgsql_get_error",
					"append": "()"
				},
				{
					"string": "session_pgsql_get_field",
					"append": "(${1:oid})"
				},
				{
					"string": "session_pgsql_reset",
					"append": "(${1:oid})"
				},
				{
					"string": "session_pgsql_set_field",
					"append": "(${1:value})"
				},
				{
					"string": "session_pgsql_status",
					"append": "(${1:oid})"
				},
				{
					"string": "session_regenerate_id",
					"append": "()"
				},
				{
					"string": "session_register",
					"append": "(${1:name})"
				},
				{
					"string": "session_save_path",
					"append": "()"
				},
				{
					"string": "session_set_cookie_params",
					"append": "(${1:lifetime})"
				},
				{
					"string": "session_set_save_handler",
					"append": "(${1:open}, ${2:close}, ${3:read}, ${4:write}, ${5:destroy}, ${6:gc})"
				},
				{
					"string": "session_start",
					"append": "(${1:oid})"
				},
				{
					"string": "session_unregister",
					"append": "(${1:name})"
				},
				{
					"string": "session_unset",
					"append": "(${1:oid})"
				},
				{
					"string": "session_write_close",
					"append": "(${1:oid})"
				},
				{
					"string": "set_error_handler",
					"append": "(${1:error_handler})"
				},
				{
					"string": "set_exception_handler",
					"append": "(${1:exception_handler})"
				},
				{
					"string": "set_file_buffer",
					"append": "()"
				},
				{
					"string": "set_include_path",
					"append": "(${1:new_include_path})"
				},
				{
					"string": "set_magic_quotes_runtime",
					"append": "(${1:new_setting})"
				},
				{
					"string": "set_socket_blocking",
					"append": "()"
				},
				{
					"string": "set_time_limit",
					"append": "(${1:seconds})"
				},
				{
					"string": "setcookie",
					"append": "(${1:name})"
				},
				{
					"string": "setlocale",
					"append": "(${1:category}, ${2:locale})"
				},
				{
					"string": "setrawcookie",
					"append": "(${1:name})"
				},
				{
					"string": "settype",
					"append": "(${1:var}, ${2:type})"
				},
				{
					"string": "sha1",
					"append": "(${1:str})"
				},
				{
					"string": "sha1_file",
					"append": "(${1:filename})"
				},
				{
					"string": "shell_exec",
					"append": "(${1:cmd})"
				},
				{
					"string": "shm_attach",
					"append": "(${1:key})"
				},
				{
					"string": "shm_detach",
					"append": "(${1:shm_identifier})"
				},
				{
					"string": "shm_get_var",
					"append": "(${1:shm_identifier}, ${2:variable_key})"
				},
				{
					"string": "shm_has_var",
					"append": "(${1:shm_identifier}, ${2:variable_key})"
				},
				{
					"string": "shm_put_var",
					"append": "(${1:shm_identifier}, ${2:variable_key}, ${3:variable})"
				},
				{
					"string": "shm_remove",
					"append": "(${1:shm_identifier})"
				},
				{
					"string": "shm_remove_var",
					"append": "(${1:shm_identifier}, ${2:variable_key})"
				},
				{
					"string": "shmop_close",
					"append": "(${1:shmid})"
				},
				{
					"string": "shmop_delete",
					"append": "(${1:shmid})"
				},
				{
					"string": "shmop_open",
					"append": "(${1:key}, ${2:flags}, ${3:mode}, ${4:size})"
				},
				{
					"string": "shmop_read",
					"append": "(${1:shmid}, ${2:start}, ${3:count})"
				},
				{
					"string": "shmop_size",
					"append": "(${1:shmid})"
				},
				{
					"string": "shmop_write",
					"append": "(${1:shmid}, ${2:data}, ${3:offset})"
				},
				{
					"string": "show_source",
					"append": "()"
				},
				{
					"string": "shuffle",
					"append": "(${1:array})"
				},
				{
					"string": "signeurlpaiement",
					"append": "(${1:clent}, ${2:data})"
				},
				{
					"string": "similar_text",
					"append": "(${1:first}, ${2:second})"
				},
				{
					"string": "simplexml_import_dom",
					"append": "(${1:node})"
				},
				{
					"string": "simplexml_load_file",
					"append": "(${1:filename})"
				},
				{
					"string": "simplexml_load_string",
					"append": "(${1:data})"
				},
				{
					"string": "sin",
					"append": "(${1:arg})"
				},
				{
					"string": "sinh",
					"append": "(${1:arg})"
				},
				{
					"string": "sizeof",
					"append": "()"
				},
				{
					"string": "sleep",
					"append": "(${1:seconds})"
				},
				{
					"string": "snmp2_get",
					"append": "(${1:host}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmp2_getnext",
					"append": "(${1:host}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmp2_real_walk",
					"append": "(${1:host}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmp2_set",
					"append": "(${1:host}, ${2:community}, ${3:object_id}, ${4:type}, ${5:value})"
				},
				{
					"string": "snmp2_walk",
					"append": "(${1:host}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmp3_get",
					"append": "(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})"
				},
				{
					"string": "snmp3_getnext",
					"append": "(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})"
				},
				{
					"string": "snmp3_real_walk",
					"append": "(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})"
				},
				{
					"string": "snmp3_set",
					"append": "(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id}, ${9:type}, ${10:value})"
				},
				{
					"string": "snmp3_walk",
					"append": "(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})"
				},
				{
					"string": "snmp_get_quick_print",
					"append": "(${1:oid})"
				},
				{
					"string": "snmp_get_valueretrieval",
					"append": "(${1:oid})"
				},
				{
					"string": "snmp_read_mib",
					"append": "(${1:filename})"
				},
				{
					"string": "snmp_set_enum_print",
					"append": "(${1:enum_print})"
				},
				{
					"string": "snmp_set_oid_numeric_print",
					"append": "(${1:oid_numeric_print})"
				},
				{
					"string": "snmp_set_oid_output_format",
					"append": "(${1:oid_format = SNMP_OID_OUTPUT_MODULE})"
				},
				{
					"string": "snmp_set_quick_print",
					"append": "(${1:quick_print})"
				},
				{
					"string": "snmp_set_valueretrieval",
					"append": "(${1:method})"
				},
				{
					"string": "snmpget",
					"append": "(${1:hostname}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmpgetnext",
					"append": "(${1:host}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmprealwalk",
					"append": "(${1:host}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmpset",
					"append": "(${1:host}, ${2:community}, ${3:object_id}, ${4:type}, ${5:value})"
				},
				{
					"string": "snmpwalk",
					"append": "(${1:hostname}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "snmpwalkoid",
					"append": "(${1:hostname}, ${2:community}, ${3:object_id})"
				},
				{
					"string": "socket_accept",
					"append": "(${1:socket})"
				},
				{
					"string": "socket_bind",
					"append": "(${1:socket}, ${2:address})"
				},
				{
					"string": "socket_clear_error",
					"append": "()"
				},
				{
					"string": "socket_close",
					"append": "(${1:socket})"
				},
				{
					"string": "socket_connect",
					"append": "(${1:socket}, ${2:address})"
				},
				{
					"string": "socket_create",
					"append": "(${1:domain}, ${2:type}, ${3:protocol})"
				},
				{
					"string": "socket_create_listen",
					"append": "(${1:port})"
				},
				{
					"string": "socket_create_pair",
					"append": "(${1:domain}, ${2:type}, ${3:protocol}, ${4:fd})"
				},
				{
					"string": "socket_get_option",
					"append": "(${1:socket}, ${2:level}, ${3:optname})"
				},
				{
					"string": "socket_get_status",
					"append": "()"
				},
				{
					"string": "socket_getpeername",
					"append": "(${1:socket}, ${2:address})"
				},
				{
					"string": "socket_getsockname",
					"append": "(${1:socket}, ${2:addr})"
				},
				{
					"string": "socket_last_error",
					"append": "()"
				},
				{
					"string": "socket_listen",
					"append": "(${1:socket})"
				},
				{
					"string": "socket_read",
					"append": "(${1:socket}, ${2:length})"
				},
				{
					"string": "socket_recv",
					"append": "(${1:socket}, ${2:buf}, ${3:len}, ${4:flags})"
				},
				{
					"string": "socket_recvfrom",
					"append": "(${1:socket}, ${2:buf}, ${3:len}, ${4:flags}, ${5:name})"
				},
				{
					"string": "socket_select",
					"append": "(${1:read}, ${2:write}, ${3:except}, ${4:tv_sec})"
				},
				{
					"string": "socket_send",
					"append": "(${1:socket}, ${2:buf}, ${3:len}, ${4:flags})"
				},
				{
					"string": "socket_sendto",
					"append": "(${1:socket}, ${2:buf}, ${3:len}, ${4:flags}, ${5:addr})"
				},
				{
					"string": "socket_set_block",
					"append": "(${1:socket})"
				},
				{
					"string": "socket_set_blocking",
					"append": "()"
				},
				{
					"string": "socket_set_nonblock",
					"append": "(${1:socket})"
				},
				{
					"string": "socket_set_option",
					"append": "(${1:socket}, ${2:level}, ${3:optname}, ${4:optval})"
				},
				{
					"string": "socket_set_timeout",
					"append": "()"
				},
				{
					"string": "socket_shutdown",
					"append": "(${1:socket})"
				},
				{
					"string": "socket_strerror",
					"append": "(${1:errno})"
				},
				{
					"string": "socket_write",
					"append": "(${1:socket}, ${2:buffer})"
				},
				{
					"string": "solr_get_version",
					"append": "(${1:oid})"
				},
				{
					"string": "sort",
					"append": "(${1:array})"
				},
				{
					"string": "soundex",
					"append": "(${1:str})"
				},
				{
					"string": "spl_autoload",
					"append": "(${1:class_name})"
				},
				{
					"string": "spl_autoload_call",
					"append": "(${1:class_name})"
				},
				{
					"string": "spl_autoload_extensions",
					"append": "()"
				},
				{
					"string": "spl_autoload_functions",
					"append": "(${1:oid})"
				},
				{
					"string": "spl_autoload_register",
					"append": "()"
				},
				{
					"string": "spl_autoload_unregister",
					"append": "(${1:autoload_function})"
				},
				{
					"string": "spl_classes",
					"append": "(${1:oid})"
				},
				{
					"string": "spl_object_hash",
					"append": "(${1:obj})"
				},
				{
					"string": "split",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "spliti",
					"append": "(${1:pattern}, ${2:string})"
				},
				{
					"string": "sprintf",
					"append": "(${1:format})"
				},
				{
					"string": "sql_regcase",
					"append": "(${1:string})"
				},
				{
					"string": "sqlite_close",
					"append": "(${1:dbhandle})"
				},
				{
					"string": "sqlite_error_string",
					"append": "(${1:error_code})"
				},
				{
					"string": "sqlite_escape_string",
					"append": "(${1:item})"
				},
				{
					"string": "sqlite_factory",
					"append": "(${1:filename})"
				},
				{
					"string": "sqlite_fetch_string",
					"append": "()"
				},
				{
					"string": "sqlite_has_more",
					"append": "(${1:result})"
				},
				{
					"string": "sqlite_libencoding",
					"append": "(${1:oid})"
				},
				{
					"string": "sqlite_libversion",
					"append": "(${1:oid})"
				},
				{
					"string": "sqlite_open",
					"append": "(${1:filename})"
				},
				{
					"string": "sqlite_popen",
					"append": "(${1:filename})"
				},
				{
					"string": "sqlite_udf_decode_binary",
					"append": "(${1:data})"
				},
				{
					"string": "sqlite_udf_encode_binary",
					"append": "(${1:data})"
				},
				{
					"string": "sqrt",
					"append": "(${1:arg})"
				},
				{
					"string": "srand",
					"append": "()"
				},
				{
					"string": "sscanf",
					"append": "(${1:str}, ${2:format})"
				},
				{
					"string": "ssdeep_fuzzy_compare",
					"append": "(${1:signature1}, ${2:signature2})"
				},
				{
					"string": "ssdeep_fuzzy_hash",
					"append": "(${1:to_hash})"
				},
				{
					"string": "ssdeep_fuzzy_hash_filename",
					"append": "(${1:file_name})"
				},
				{
					"string": "ssh2_auth_hostbased_file",
					"append": "(${1:session}, ${2:username}, ${3:hostname}, ${4:pubkeyfile}, ${5:privkeyfile})"
				},
				{
					"string": "ssh2_auth_none",
					"append": "(${1:session}, ${2:username})"
				},
				{
					"string": "ssh2_auth_password",
					"append": "(${1:session}, ${2:username}, ${3:password})"
				},
				{
					"string": "ssh2_auth_pubkey_file",
					"append": "(${1:session}, ${2:username}, ${3:pubkeyfile}, ${4:privkeyfile})"
				},
				{
					"string": "ssh2_connect",
					"append": "(${1:host})"
				},
				{
					"string": "ssh2_exec",
					"append": "(${1:session}, ${2:command})"
				},
				{
					"string": "ssh2_fetch_stream",
					"append": "(${1:channel}, ${2:streamid})"
				},
				{
					"string": "ssh2_fingerprint",
					"append": "(${1:session})"
				},
				{
					"string": "ssh2_methods_negotiated",
					"append": "(${1:session})"
				},
				{
					"string": "ssh2_publickey_add",
					"append": "(${1:pkey}, ${2:algoname}, ${3:blob})"
				},
				{
					"string": "ssh2_publickey_init",
					"append": "(${1:session})"
				},
				{
					"string": "ssh2_publickey_list",
					"append": "(${1:pkey})"
				},
				{
					"string": "ssh2_publickey_remove",
					"append": "(${1:pkey}, ${2:algoname}, ${3:blob})"
				},
				{
					"string": "ssh2_scp_recv",
					"append": "(${1:session}, ${2:remote_file}, ${3:local_file})"
				},
				{
					"string": "ssh2_scp_send",
					"append": "(${1:session}, ${2:local_file}, ${3:remote_file})"
				},
				{
					"string": "ssh2_sftp",
					"append": "(${1:session})"
				},
				{
					"string": "ssh2_sftp_lstat",
					"append": "(${1:sftp}, ${2:path})"
				},
				{
					"string": "ssh2_sftp_mkdir",
					"append": "(${1:sftp}, ${2:dirname})"
				},
				{
					"string": "ssh2_sftp_readlink",
					"append": "(${1:sftp}, ${2:link})"
				},
				{
					"string": "ssh2_sftp_realpath",
					"append": "(${1:sftp}, ${2:filename})"
				},
				{
					"string": "ssh2_sftp_rename",
					"append": "(${1:sftp}, ${2:from}, ${3:to})"
				},
				{
					"string": "ssh2_sftp_rmdir",
					"append": "(${1:sftp}, ${2:dirname})"
				},
				{
					"string": "ssh2_sftp_stat",
					"append": "(${1:sftp}, ${2:path})"
				},
				{
					"string": "ssh2_sftp_symlink",
					"append": "(${1:sftp}, ${2:target}, ${3:link})"
				},
				{
					"string": "ssh2_sftp_unlink",
					"append": "(${1:sftp}, ${2:filename})"
				},
				{
					"string": "ssh2_shell",
					"append": "(${1:session})"
				},
				{
					"string": "ssh2_tunnel",
					"append": "(${1:session}, ${2:host}, ${3:port})"
				},
				{
					"string": "stat",
					"append": "(${1:filename})"
				},
				{
					"string": "stats_absolute_deviation",
					"append": "(${1:a})"
				},
				{
					"string": "stats_cdf_beta",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_binomial",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_cauchy",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_chisquare",
					"append": "(${1:par1}, ${2:par2}, ${3:which})"
				},
				{
					"string": "stats_cdf_exponential",
					"append": "(${1:par1}, ${2:par2}, ${3:which})"
				},
				{
					"string": "stats_cdf_f",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_gamma",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_laplace",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_logistic",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_negative_binomial",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_noncentral_chisquare",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_noncentral_f",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:par4}, ${5:which})"
				},
				{
					"string": "stats_cdf_poisson",
					"append": "(${1:par1}, ${2:par2}, ${3:which})"
				},
				{
					"string": "stats_cdf_t",
					"append": "(${1:par1}, ${2:par2}, ${3:which})"
				},
				{
					"string": "stats_cdf_uniform",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_cdf_weibull",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_covariance",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "stats_den_uniform",
					"append": "(${1:x}, ${2:a}, ${3:b})"
				},
				{
					"string": "stats_dens_beta",
					"append": "(${1:x}, ${2:a}, ${3:b})"
				},
				{
					"string": "stats_dens_cauchy",
					"append": "(${1:x}, ${2:ave}, ${3:stdev})"
				},
				{
					"string": "stats_dens_chisquare",
					"append": "(${1:x}, ${2:dfr})"
				},
				{
					"string": "stats_dens_exponential",
					"append": "(${1:x}, ${2:scale})"
				},
				{
					"string": "stats_dens_f",
					"append": "(${1:x}, ${2:dfr1}, ${3:dfr2})"
				},
				{
					"string": "stats_dens_gamma",
					"append": "(${1:x}, ${2:shape}, ${3:scale})"
				},
				{
					"string": "stats_dens_laplace",
					"append": "(${1:x}, ${2:ave}, ${3:stdev})"
				},
				{
					"string": "stats_dens_logistic",
					"append": "(${1:x}, ${2:ave}, ${3:stdev})"
				},
				{
					"string": "stats_dens_negative_binomial",
					"append": "(${1:x}, ${2:n}, ${3:pi})"
				},
				{
					"string": "stats_dens_normal",
					"append": "(${1:x}, ${2:ave}, ${3:stdev})"
				},
				{
					"string": "stats_dens_pmf_binomial",
					"append": "(${1:x}, ${2:n}, ${3:pi})"
				},
				{
					"string": "stats_dens_pmf_hypergeometric",
					"append": "(${1:n1}, ${2:n2}, ${3:N1}, ${4:N2})"
				},
				{
					"string": "stats_dens_pmf_poisson",
					"append": "(${1:x}, ${2:lb})"
				},
				{
					"string": "stats_dens_t",
					"append": "(${1:x}, ${2:dfr})"
				},
				{
					"string": "stats_dens_weibull",
					"append": "(${1:x}, ${2:a}, ${3:b})"
				},
				{
					"string": "stats_harmonic_mean",
					"append": "(${1:a})"
				},
				{
					"string": "stats_kurtosis",
					"append": "(${1:a})"
				},
				{
					"string": "stats_rand_gen_beta",
					"append": "(${1:a}, ${2:b})"
				},
				{
					"string": "stats_rand_gen_chisquare",
					"append": "(${1:df})"
				},
				{
					"string": "stats_rand_gen_exponential",
					"append": "(${1:av})"
				},
				{
					"string": "stats_rand_gen_f",
					"append": "(${1:dfn}, ${2:dfd})"
				},
				{
					"string": "stats_rand_gen_funiform",
					"append": "(${1:low}, ${2:high})"
				},
				{
					"string": "stats_rand_gen_gamma",
					"append": "(${1:a}, ${2:r})"
				},
				{
					"string": "stats_rand_gen_ibinomial",
					"append": "(${1:n}, ${2:pp})"
				},
				{
					"string": "stats_rand_gen_ibinomial_negative",
					"append": "(${1:n}, ${2:p})"
				},
				{
					"string": "stats_rand_gen_int",
					"append": "(${1:oid})"
				},
				{
					"string": "stats_rand_gen_ipoisson",
					"append": "(${1:mu})"
				},
				{
					"string": "stats_rand_gen_iuniform",
					"append": "(${1:low}, ${2:high})"
				},
				{
					"string": "stats_rand_gen_noncenral_chisquare",
					"append": "(${1:df}, ${2:xnonc})"
				},
				{
					"string": "stats_rand_gen_noncentral_f",
					"append": "(${1:dfn}, ${2:dfd}, ${3:xnonc})"
				},
				{
					"string": "stats_rand_gen_noncentral_t",
					"append": "(${1:df}, ${2:xnonc})"
				},
				{
					"string": "stats_rand_gen_normal",
					"append": "(${1:av}, ${2:sd})"
				},
				{
					"string": "stats_rand_gen_t",
					"append": "(${1:df})"
				},
				{
					"string": "stats_rand_get_seeds",
					"append": "(${1:oid})"
				},
				{
					"string": "stats_rand_phrase_to_seeds",
					"append": "(${1:phrase})"
				},
				{
					"string": "stats_rand_ranf",
					"append": "(${1:oid})"
				},
				{
					"string": "stats_rand_setall",
					"append": "(${1:iseed1}, ${2:iseed2})"
				},
				{
					"string": "stats_skew",
					"append": "(${1:a})"
				},
				{
					"string": "stats_standard_deviation",
					"append": "(${1:a})"
				},
				{
					"string": "stats_stat_binomial_coef",
					"append": "(${1:x}, ${2:n})"
				},
				{
					"string": "stats_stat_correlation",
					"append": "(${1:arr1}, ${2:arr2})"
				},
				{
					"string": "stats_stat_gennch",
					"append": "(${1:n})"
				},
				{
					"string": "stats_stat_independent_t",
					"append": "(${1:arr1}, ${2:arr2})"
				},
				{
					"string": "stats_stat_innerproduct",
					"append": "(${1:arr1}, ${2:arr2})"
				},
				{
					"string": "stats_stat_noncentral_t",
					"append": "(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})"
				},
				{
					"string": "stats_stat_paired_t",
					"append": "(${1:arr1}, ${2:arr2})"
				},
				{
					"string": "stats_stat_percentile",
					"append": "(${1:df}, ${2:xnonc})"
				},
				{
					"string": "stats_stat_powersum",
					"append": "(${1:arr}, ${2:power})"
				},
				{
					"string": "stats_variance",
					"append": "(${1:a})"
				},
				{
					"string": "stomp_connect_error",
					"append": "(${1:oid})"
				},
				{
					"string": "stomp_version",
					"append": "(${1:oid})"
				},
				{
					"string": "str_getcsv",
					"append": "(${1:input})"
				},
				{
					"string": "str_ireplace",
					"append": "(${1:search}, ${2:replace}, ${3:subject})"
				},
				{
					"string": "str_pad",
					"append": "(${1:input}, ${2:pad_length})"
				},
				{
					"string": "str_repeat",
					"append": "(${1:input}, ${2:multiplier})"
				},
				{
					"string": "str_replace",
					"append": "(${1:search}, ${2:replace}, ${3:subject})"
				},
				{
					"string": "str_rot13",
					"append": "(${1:str})"
				},
				{
					"string": "str_shuffle",
					"append": "(${1:str})"
				},
				{
					"string": "str_split",
					"append": "(${1:string})"
				},
				{
					"string": "str_word_count",
					"append": "(${1:string})"
				},
				{
					"string": "strcasecmp",
					"append": "(${1:str1}, ${2:str2})"
				},
				{
					"string": "strchr",
					"append": "()"
				},
				{
					"string": "strcmp",
					"append": "(${1:str1}, ${2:str2})"
				},
				{
					"string": "strcoll",
					"append": "(${1:str1}, ${2:str2})"
				},
				{
					"string": "strcspn",
					"append": "(${1:str1}, ${2:str2})"
				},
				{
					"string": "stream_bucket_append",
					"append": "(${1:brigade}, ${2:bucket})"
				},
				{
					"string": "stream_bucket_make_writeable",
					"append": "(${1:brigade})"
				},
				{
					"string": "stream_bucket_new",
					"append": "(${1:stream}, ${2:buffer})"
				},
				{
					"string": "stream_bucket_prepend",
					"append": "(${1:brigade}, ${2:bucket})"
				},
				{
					"string": "stream_context_create",
					"append": "()"
				},
				{
					"string": "stream_context_get_default",
					"append": "()"
				},
				{
					"string": "stream_context_get_options",
					"append": "(${1:stream_or_context})"
				},
				{
					"string": "stream_context_get_params",
					"append": "(${1:stream_or_context})"
				},
				{
					"string": "stream_context_set_default",
					"append": "(${1:options})"
				},
				{
					"string": "stream_context_set_option",
					"append": "(${1:stream_or_context}, ${2:wrapper}, ${3:option}, ${4:value})"
				},
				{
					"string": "stream_context_set_params",
					"append": "(${1:stream_or_context}, ${2:params})"
				},
				{
					"string": "stream_copy_to_stream",
					"append": "(${1:source}, ${2:dest})"
				},
				{
					"string": "stream_encoding",
					"append": "(${1:stream})"
				},
				{
					"string": "stream_filter_append",
					"append": "(${1:stream}, ${2:filtername})"
				},
				{
					"string": "stream_filter_prepend",
					"append": "(${1:stream}, ${2:filtername})"
				},
				{
					"string": "stream_filter_register",
					"append": "(${1:filtername}, ${2:classname})"
				},
				{
					"string": "stream_filter_remove",
					"append": "(${1:stream_filter})"
				},
				{
					"string": "stream_get_contents",
					"append": "(${1:handle})"
				},
				{
					"string": "stream_get_filters",
					"append": "(${1:oid})"
				},
				{
					"string": "stream_get_line",
					"append": "(${1:handle}, ${2:length})"
				},
				{
					"string": "stream_get_meta_data",
					"append": "(${1:stream})"
				},
				{
					"string": "stream_get_transports",
					"append": "(${1:oid})"
				},
				{
					"string": "stream_get_wrappers",
					"append": "(${1:oid})"
				},
				{
					"string": "stream_is_local",
					"append": "(${1:stream_or_url})"
				},
				{
					"string": "stream_notification_callback",
					"append": "(${1:notification_code}, ${2:severity}, ${3:message}, ${4:message_code}, ${5:bytes_transferred}, ${6:bytes_max})"
				},
				{
					"string": "stream_register_wrapper",
					"append": "()"
				},
				{
					"string": "stream_resolve_include_path",
					"append": "(${1:filename})"
				},
				{
					"string": "stream_select",
					"append": "(${1:read}, ${2:write}, ${3:except}, ${4:tv_sec})"
				},
				{
					"string": "stream_set_blocking",
					"append": "(${1:stream}, ${2:mode})"
				},
				{
					"string": "stream_set_read_buffer",
					"append": "(${1:stream}, ${2:buffer})"
				},
				{
					"string": "stream_set_timeout",
					"append": "(${1:stream}, ${2:seconds})"
				},
				{
					"string": "stream_set_write_buffer",
					"append": "(${1:stream}, ${2:buffer})"
				},
				{
					"string": "stream_socket_accept",
					"append": "(${1:server_socket})"
				},
				{
					"string": "stream_socket_client",
					"append": "(${1:remote_socket})"
				},
				{
					"string": "stream_socket_enable_crypto",
					"append": "(${1:stream}, ${2:enable})"
				},
				{
					"string": "stream_socket_get_name",
					"append": "(${1:handle}, ${2:want_peer})"
				},
				{
					"string": "stream_socket_pair",
					"append": "(${1:domain}, ${2:type}, ${3:protocol})"
				},
				{
					"string": "stream_socket_recvfrom",
					"append": "(${1:socket}, ${2:length})"
				},
				{
					"string": "stream_socket_sendto",
					"append": "(${1:socket}, ${2:data})"
				},
				{
					"string": "stream_socket_server",
					"append": "(${1:local_socket})"
				},
				{
					"string": "stream_socket_shutdown",
					"append": "(${1:stream}, ${2:how})"
				},
				{
					"string": "stream_supports_lock",
					"append": "(${1:stream})"
				},
				{
					"string": "stream_wrapper_register",
					"append": "(${1:protocol}, ${2:classname})"
				},
				{
					"string": "stream_wrapper_restore",
					"append": "(${1:protocol})"
				},
				{
					"string": "stream_wrapper_unregister",
					"append": "(${1:protocol})"
				},
				{
					"string": "strftime",
					"append": "(${1:format})"
				},
				{
					"string": "strip_tags",
					"append": "(${1:str})"
				},
				{
					"string": "stripcslashes",
					"append": "(${1:str})"
				},
				{
					"string": "stripos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "stripslashes",
					"append": "(${1:str})"
				},
				{
					"string": "stristr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "strlen",
					"append": "(${1:string})"
				},
				{
					"string": "strnatcasecmp",
					"append": "(${1:str1}, ${2:str2})"
				},
				{
					"string": "strnatcmp",
					"append": "(${1:str1}, ${2:str2})"
				},
				{
					"string": "strncasecmp",
					"append": "(${1:str1}, ${2:str2}, ${3:len})"
				},
				{
					"string": "strncmp",
					"append": "(${1:str1}, ${2:str2}, ${3:len})"
				},
				{
					"string": "strpbrk",
					"append": "(${1:haystack}, ${2:char_list})"
				},
				{
					"string": "strpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "strptime",
					"append": "(${1:date}, ${2:format})"
				},
				{
					"string": "strrchr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "strrev",
					"append": "(${1:string})"
				},
				{
					"string": "strripos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "strrpos",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "strspn",
					"append": "(${1:subject}, ${2:mask})"
				},
				{
					"string": "strstr",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "strtok",
					"append": "(${1:str}, ${2:token})"
				},
				{
					"string": "strtolower",
					"append": "(${1:str})"
				},
				{
					"string": "strtotime",
					"append": "(${1:time})"
				},
				{
					"string": "strtoupper",
					"append": "(${1:string})"
				},
				{
					"string": "strtr",
					"append": "(${1:str}, ${2:from}, ${3:to})"
				},
				{
					"string": "strval",
					"append": "(${1:var})"
				},
				{
					"string": "substr",
					"append": "(${1:string}, ${2:start})"
				},
				{
					"string": "substr_compare",
					"append": "(${1:main_str}, ${2:str}, ${3:offset})"
				},
				{
					"string": "substr_count",
					"append": "(${1:haystack}, ${2:needle})"
				},
				{
					"string": "substr_replace",
					"append": "(${1:string}, ${2:replacement}, ${3:start})"
				},
				{
					"string": "svn_add",
					"append": "(${1:path})"
				},
				{
					"string": "svn_auth_get_parameter",
					"append": "(${1:key})"
				},
				{
					"string": "svn_auth_set_parameter",
					"append": "(${1:key}, ${2:value})"
				},
				{
					"string": "svn_blame",
					"append": "(${1:repository_url})"
				},
				{
					"string": "svn_cat",
					"append": "(${1:repos_url})"
				},
				{
					"string": "svn_checkout",
					"append": "(${1:repos}, ${2:targetpath})"
				},
				{
					"string": "svn_cleanup",
					"append": "(${1:workingdir})"
				},
				{
					"string": "svn_client_version",
					"append": "(${1:oid})"
				},
				{
					"string": "svn_commit",
					"append": "(${1:log}, ${2:targets})"
				},
				{
					"string": "svn_delete",
					"append": "(${1:path})"
				},
				{
					"string": "svn_diff",
					"append": "(${1:path1}, ${2:rev1}, ${3:path2}, ${4:rev2})"
				},
				{
					"string": "svn_export",
					"append": "(${1:frompath}, ${2:topath})"
				},
				{
					"string": "svn_fs_abort_txn",
					"append": "(${1:txn})"
				},
				{
					"string": "svn_fs_apply_text",
					"append": "(${1:root}, ${2:path})"
				},
				{
					"string": "svn_fs_begin_txn2",
					"append": "(${1:repos}, ${2:rev})"
				},
				{
					"string": "svn_fs_change_node_prop",
					"append": "(${1:root}, ${2:path}, ${3:name}, ${4:value})"
				},
				{
					"string": "svn_fs_check_path",
					"append": "(${1:fsroot}, ${2:path})"
				},
				{
					"string": "svn_fs_contents_changed",
					"append": "(${1:root1}, ${2:path1}, ${3:root2}, ${4:path2})"
				},
				{
					"string": "svn_fs_copy",
					"append": "(${1:from_root}, ${2:from_path}, ${3:to_root}, ${4:to_path})"
				},
				{
					"string": "svn_fs_delete",
					"append": "(${1:root}, ${2:path})"
				},
				{
					"string": "svn_fs_dir_entries",
					"append": "(${1:fsroot}, ${2:path})"
				},
				{
					"string": "svn_fs_file_contents",
					"append": "(${1:fsroot}, ${2:path})"
				},
				{
					"string": "svn_fs_file_length",
					"append": "(${1:fsroot}, ${2:path})"
				},
				{
					"string": "svn_fs_is_dir",
					"append": "(${1:root}, ${2:path})"
				},
				{
					"string": "svn_fs_is_file",
					"append": "(${1:root}, ${2:path})"
				},
				{
					"string": "svn_fs_make_dir",
					"append": "(${1:root}, ${2:path})"
				},
				{
					"string": "svn_fs_make_file",
					"append": "(${1:root}, ${2:path})"
				},
				{
					"string": "svn_fs_node_created_rev",
					"append": "(${1:fsroot}, ${2:path})"
				},
				{
					"string": "svn_fs_node_prop",
					"append": "(${1:fsroot}, ${2:path}, ${3:propname})"
				},
				{
					"string": "svn_fs_props_changed",
					"append": "(${1:root1}, ${2:path1}, ${3:root2}, ${4:path2})"
				},
				{
					"string": "svn_fs_revision_prop",
					"append": "(${1:fs}, ${2:revnum}, ${3:propname})"
				},
				{
					"string": "svn_fs_revision_root",
					"append": "(${1:fs}, ${2:revnum})"
				},
				{
					"string": "svn_fs_txn_root",
					"append": "(${1:txn})"
				},
				{
					"string": "svn_fs_youngest_rev",
					"append": "(${1:fs})"
				},
				{
					"string": "svn_import",
					"append": "(${1:path}, ${2:url}, ${3:nonrecursive})"
				},
				{
					"string": "svn_log",
					"append": "(${1:repos_url})"
				},
				{
					"string": "svn_ls",
					"append": "(${1:repos_url})"
				},
				{
					"string": "svn_mkdir",
					"append": "(${1:path})"
				},
				{
					"string": "svn_repos_create",
					"append": "(${1:path})"
				},
				{
					"string": "svn_repos_fs",
					"append": "(${1:repos})"
				},
				{
					"string": "svn_repos_fs_begin_txn_for_commit",
					"append": "(${1:repos}, ${2:rev}, ${3:author}, ${4:log_msg})"
				},
				{
					"string": "svn_repos_fs_commit_txn",
					"append": "(${1:txn})"
				},
				{
					"string": "svn_repos_hotcopy",
					"append": "(${1:repospath}, ${2:destpath}, ${3:cleanlogs})"
				},
				{
					"string": "svn_repos_open",
					"append": "(${1:path})"
				},
				{
					"string": "svn_repos_recover",
					"append": "(${1:path})"
				},
				{
					"string": "svn_revert",
					"append": "(${1:path})"
				},
				{
					"string": "svn_status",
					"append": "(${1:path})"
				},
				{
					"string": "svn_update",
					"append": "(${1:path})"
				},
				{
					"string": "swf_actiongeturl",
					"append": "(${1:url}, ${2:target})"
				},
				{
					"string": "swf_actiongotoframe",
					"append": "(${1:framenumber})"
				},
				{
					"string": "swf_actiongotolabel",
					"append": "(${1:label})"
				},
				{
					"string": "swf_actionnextframe",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_actionplay",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_actionprevframe",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_actionsettarget",
					"append": "(${1:target})"
				},
				{
					"string": "swf_actionstop",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_actiontogglequality",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_actionwaitforframe",
					"append": "(${1:framenumber}, ${2:skipcount})"
				},
				{
					"string": "swf_addbuttonrecord",
					"append": "(${1:states}, ${2:shapeid}, ${3:depth})"
				},
				{
					"string": "swf_addcolor",
					"append": "(${1:r}, ${2:g}, ${3:b}, ${4:a})"
				},
				{
					"string": "swf_closefile",
					"append": "()"
				},
				{
					"string": "swf_definebitmap",
					"append": "(${1:objid}, ${2:image_name})"
				},
				{
					"string": "swf_definefont",
					"append": "(${1:fontid}, ${2:fontname})"
				},
				{
					"string": "swf_defineline",
					"append": "(${1:objid}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:width})"
				},
				{
					"string": "swf_definepoly",
					"append": "(${1:objid}, ${2:coords}, ${3:npoints}, ${4:width})"
				},
				{
					"string": "swf_definerect",
					"append": "(${1:objid}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:width})"
				},
				{
					"string": "swf_definetext",
					"append": "(${1:objid}, ${2:str}, ${3:docenter})"
				},
				{
					"string": "swf_endbutton",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_enddoaction",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_endshape",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_endsymbol",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_fontsize",
					"append": "(${1:size})"
				},
				{
					"string": "swf_fontslant",
					"append": "(${1:slant})"
				},
				{
					"string": "swf_fonttracking",
					"append": "(${1:tracking})"
				},
				{
					"string": "swf_getbitmapinfo",
					"append": "(${1:bitmapid})"
				},
				{
					"string": "swf_getfontinfo",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_getframe",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_labelframe",
					"append": "(${1:name})"
				},
				{
					"string": "swf_lookat",
					"append": "(${1:view_x}, ${2:view_y}, ${3:view_z}, ${4:reference_x}, ${5:reference_y}, ${6:reference_z}, ${7:twist})"
				},
				{
					"string": "swf_modifyobject",
					"append": "(${1:depth}, ${2:how})"
				},
				{
					"string": "swf_mulcolor",
					"append": "(${1:r}, ${2:g}, ${3:b}, ${4:a})"
				},
				{
					"string": "swf_nextid",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_oncondition",
					"append": "(${1:transition})"
				},
				{
					"string": "swf_openfile",
					"append": "(${1:filename}, ${2:width}, ${3:height}, ${4:framerate}, ${5:r}, ${6:g}, ${7:b})"
				},
				{
					"string": "swf_ortho",
					"append": "(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax}, ${5:zmin}, ${6:zmax})"
				},
				{
					"string": "swf_ortho2",
					"append": "(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax})"
				},
				{
					"string": "swf_perspective",
					"append": "(${1:fovy}, ${2:aspect}, ${3:near}, ${4:far})"
				},
				{
					"string": "swf_placeobject",
					"append": "(${1:objid}, ${2:depth})"
				},
				{
					"string": "swf_polarview",
					"append": "(${1:dist}, ${2:azimuth}, ${3:incidence}, ${4:twist})"
				},
				{
					"string": "swf_popmatrix",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_posround",
					"append": "(${1:round})"
				},
				{
					"string": "swf_pushmatrix",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_removeobject",
					"append": "(${1:depth})"
				},
				{
					"string": "swf_rotate",
					"append": "(${1:angle}, ${2:axis})"
				},
				{
					"string": "swf_scale",
					"append": "(${1:x}, ${2:y}, ${3:z})"
				},
				{
					"string": "swf_setfont",
					"append": "(${1:fontid})"
				},
				{
					"string": "swf_setframe",
					"append": "(${1:framenumber})"
				},
				{
					"string": "swf_shapearc",
					"append": "(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2})"
				},
				{
					"string": "swf_shapecurveto",
					"append": "(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})"
				},
				{
					"string": "swf_shapecurveto3",
					"append": "(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3})"
				},
				{
					"string": "swf_shapefillbitmapclip",
					"append": "(${1:bitmapid})"
				},
				{
					"string": "swf_shapefillbitmaptile",
					"append": "(${1:bitmapid})"
				},
				{
					"string": "swf_shapefilloff",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_shapefillsolid",
					"append": "(${1:r}, ${2:g}, ${3:b}, ${4:a})"
				},
				{
					"string": "swf_shapelinesolid",
					"append": "(${1:r}, ${2:g}, ${3:b}, ${4:a}, ${5:width})"
				},
				{
					"string": "swf_shapelineto",
					"append": "(${1:x}, ${2:y})"
				},
				{
					"string": "swf_shapemoveto",
					"append": "(${1:x}, ${2:y})"
				},
				{
					"string": "swf_showframe",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_startbutton",
					"append": "(${1:objid}, ${2:type})"
				},
				{
					"string": "swf_startdoaction",
					"append": "(${1:oid})"
				},
				{
					"string": "swf_startshape",
					"append": "(${1:objid})"
				},
				{
					"string": "swf_startsymbol",
					"append": "(${1:objid})"
				},
				{
					"string": "swf_textwidth",
					"append": "(${1:str})"
				},
				{
					"string": "swf_translate",
					"append": "(${1:x}, ${2:y}, ${3:z})"
				},
				{
					"string": "swf_viewport",
					"append": "(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax})"
				},
				{
					"string": "SWFSound",
					"append": "(${1:filename})"
				},
				{
					"string": "sybase_affected_rows",
					"append": "()"
				},
				{
					"string": "sybase_close",
					"append": "()"
				},
				{
					"string": "sybase_connect",
					"append": "()"
				},
				{
					"string": "sybase_data_seek",
					"append": "(${1:result_identifier}, ${2:row_number})"
				},
				{
					"string": "sybase_deadlock_retry_count",
					"append": "(${1:retry_count})"
				},
				{
					"string": "sybase_fetch_array",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_fetch_assoc",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_fetch_field",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_fetch_object",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_fetch_row",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_field_seek",
					"append": "(${1:result}, ${2:field_offset})"
				},
				{
					"string": "sybase_free_result",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_get_last_message",
					"append": "(${1:oid})"
				},
				{
					"string": "sybase_min_client_severity",
					"append": "(${1:severity})"
				},
				{
					"string": "sybase_min_error_severity",
					"append": "(${1:severity})"
				},
				{
					"string": "sybase_min_message_severity",
					"append": "(${1:severity})"
				},
				{
					"string": "sybase_min_server_severity",
					"append": "(${1:severity})"
				},
				{
					"string": "sybase_num_fields",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_num_rows",
					"append": "(${1:result})"
				},
				{
					"string": "sybase_pconnect",
					"append": "()"
				},
				{
					"string": "sybase_query",
					"append": "(${1:query})"
				},
				{
					"string": "sybase_result",
					"append": "(${1:result}, ${2:row}, ${3:field})"
				},
				{
					"string": "sybase_select_db",
					"append": "(${1:database_name})"
				},
				{
					"string": "sybase_set_message_handler",
					"append": "(${1:handler})"
				},
				{
					"string": "sybase_unbuffered_query",
					"append": "(${1:query}, ${2:link_identifier})"
				},
				{
					"string": "symlink",
					"append": "(${1:target}, ${2:link})"
				},
				{
					"string": "sys_get_temp_dir",
					"append": "(${1:oid})"
				},
				{
					"string": "sys_getloadavg",
					"append": "(${1:oid})"
				},
				{
					"string": "syslog",
					"append": "(${1:priority}, ${2:message})"
				},
				{
					"string": "system",
					"append": "(${1:command})"
				},
				{
					"string": "tan",
					"append": "(${1:arg})"
				},
				{
					"string": "tanh",
					"append": "(${1:arg})"
				},
				{
					"string": "tcpwrap_check",
					"append": "(${1:daemon}, ${2:address})"
				},
				{
					"string": "tempnam",
					"append": "(${1:dir}, ${2:prefix})"
				},
				{
					"string": "textdomain",
					"append": "(${1:text_domain})"
				},
				{
					"string": "tidy_access_count",
					"append": "(${1:object})"
				},
				{
					"string": "tidy_config_count",
					"append": "(${1:object})"
				},
				{
					"string": "tidy_error_count",
					"append": "(${1:object})"
				},
				{
					"string": "tidy_get_error_buffer",
					"append": "(${1:object})"
				},
				{
					"string": "tidy_get_output",
					"append": "(${1:object})"
				},
				{
					"string": "tidy_load_config",
					"append": "(${1:filename}, ${2:encoding})"
				},
				{
					"string": "tidy_reset_config",
					"append": "(${1:oid})"
				},
				{
					"string": "tidy_save_config",
					"append": "(${1:filename})"
				},
				{
					"string": "tidy_set_encoding",
					"append": "(${1:encoding})"
				},
				{
					"string": "tidy_setopt",
					"append": "(${1:option}, ${2:value})"
				},
				{
					"string": "tidy_warning_count",
					"append": "(${1:object})"
				},
				{
					"string": "time",
					"append": "(${1:oid})"
				},
				{
					"string": "time_nanosleep",
					"append": "(${1:seconds}, ${2:nanoseconds})"
				},
				{
					"string": "time_sleep_until",
					"append": "(${1:timestamp})"
				},
				{
					"string": "timezone_abbreviations_list",
					"append": "()"
				},
				{
					"string": "timezone_identifiers_list",
					"append": "()"
				},
				{
					"string": "timezone_location_get",
					"append": "()"
				},
				{
					"string": "timezone_name_from_abbr",
					"append": "(${1:abbr})"
				},
				{
					"string": "timezone_name_get",
					"append": "()"
				},
				{
					"string": "timezone_offset_get",
					"append": "()"
				},
				{
					"string": "timezone_open",
					"append": "()"
				},
				{
					"string": "timezone_transitions_get",
					"append": "()"
				},
				{
					"string": "timezone_version_get",
					"append": "(${1:oid})"
				},
				{
					"string": "tmpfile",
					"append": "(${1:oid})"
				},
				{
					"string": "token_get_all",
					"append": "(${1:source})"
				},
				{
					"string": "token_name",
					"append": "(${1:token})"
				},
				{
					"string": "touch",
					"append": "(${1:filename})"
				},
				{
					"string": "trigger_error",
					"append": "(${1:error_msg})"
				},
				{
					"string": "trim",
					"append": "(${1:str})"
				},
				{
					"string": "uasort",
					"append": "(${1:array}, ${2:cmp_function})"
				},
				{
					"string": "ucfirst",
					"append": "(${1:str})"
				},
				{
					"string": "ucwords",
					"append": "(${1:str})"
				},
				{
					"string": "udm_add_search_limit",
					"append": "(${1:agent}, ${2:var}, ${3:val})"
				},
				{
					"string": "udm_alloc_agent",
					"append": "(${1:dbaddr})"
				},
				{
					"string": "udm_alloc_agent_array",
					"append": "(${1:databases})"
				},
				{
					"string": "udm_api_version",
					"append": "(${1:oid})"
				},
				{
					"string": "udm_cat_list",
					"append": "(${1:agent}, ${2:category})"
				},
				{
					"string": "udm_cat_path",
					"append": "(${1:agent}, ${2:category})"
				},
				{
					"string": "udm_check_charset",
					"append": "(${1:agent}, ${2:charset})"
				},
				{
					"string": "udm_check_stored",
					"append": "(${1:agent}, ${2:link}, ${3:doc_id})"
				},
				{
					"string": "udm_clear_search_limits",
					"append": "(${1:agent})"
				},
				{
					"string": "udm_close_stored",
					"append": "(${1:agent}, ${2:link})"
				},
				{
					"string": "udm_crc32",
					"append": "(${1:agent}, ${2:str})"
				},
				{
					"string": "udm_errno",
					"append": "(${1:agent})"
				},
				{
					"string": "udm_error",
					"append": "(${1:agent})"
				},
				{
					"string": "udm_find",
					"append": "(${1:agent}, ${2:query})"
				},
				{
					"string": "udm_free_agent",
					"append": "(${1:agent})"
				},
				{
					"string": "udm_free_ispell_data",
					"append": "(${1:agent})"
				},
				{
					"string": "udm_free_res",
					"append": "(${1:res})"
				},
				{
					"string": "udm_get_doc_count",
					"append": "(${1:agent})"
				},
				{
					"string": "udm_get_res_field",
					"append": "(${1:res}, ${2:row}, ${3:field})"
				},
				{
					"string": "udm_get_res_param",
					"append": "(${1:res}, ${2:param})"
				},
				{
					"string": "udm_hash32",
					"append": "(${1:agent}, ${2:str})"
				},
				{
					"string": "udm_load_ispell_data",
					"append": "(${1:agent}, ${2:var}, ${3:val1}, ${4:val2}, ${5:flag})"
				},
				{
					"string": "udm_open_stored",
					"append": "(${1:agent}, ${2:storedaddr})"
				},
				{
					"string": "udm_set_agent_param",
					"append": "(${1:agent}, ${2:var}, ${3:val})"
				},
				{
					"string": "uksort",
					"append": "(${1:array}, ${2:cmp_function})"
				},
				{
					"string": "umask",
					"append": "()"
				},
				{
					"string": "uniqid",
					"append": "()"
				},
				{
					"string": "unixtojd",
					"append": "()"
				},
				{
					"string": "unlink",
					"append": "(${1:filename})"
				},
				{
					"string": "unpack",
					"append": "(${1:format}, ${2:data})"
				},
				{
					"string": "unregister_tick_function",
					"append": "(${1:function_name})"
				},
				{
					"string": "unserialize",
					"append": "(${1:str})"
				},
				{
					"string": "unset",
					"append": "(${1:var})"
				},
				{
					"string": "urldecode",
					"append": "(${1:str})"
				},
				{
					"string": "urlencode",
					"append": "(${1:str})"
				},
				{
					"string": "use_soap_error_handler",
					"append": "()"
				},
				{
					"string": "user_error",
					"append": "()"
				},
				{
					"string": "usleep",
					"append": "(${1:micro_seconds})"
				},
				{
					"string": "usort",
					"append": "(${1:array}, ${2:cmp_function})"
				},
				{
					"string": "utf8_decode",
					"append": "(${1:data})"
				},
				{
					"string": "utf8_encode",
					"append": "(${1:data})"
				},
				{
					"string": "var_dump",
					"append": "(${1:expression})"
				},
				{
					"string": "var_export",
					"append": "(${1:expression})"
				},
				{
					"string": "variant_abs",
					"append": "(${1:val})"
				},
				{
					"string": "variant_add",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_and",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_cast",
					"append": "(${1:variant}, ${2:type})"
				},
				{
					"string": "variant_cat",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_cmp",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_date_from_timestamp",
					"append": "(${1:timestamp})"
				},
				{
					"string": "variant_date_to_timestamp",
					"append": "(${1:variant})"
				},
				{
					"string": "variant_div",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_eqv",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_fix",
					"append": "(${1:variant})"
				},
				{
					"string": "variant_get_type",
					"append": "(${1:variant})"
				},
				{
					"string": "variant_idiv",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_imp",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_int",
					"append": "(${1:variant})"
				},
				{
					"string": "variant_mod",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_mul",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_neg",
					"append": "(${1:variant})"
				},
				{
					"string": "variant_not",
					"append": "(${1:variant})"
				},
				{
					"string": "variant_or",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_pow",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_round",
					"append": "(${1:variant}, ${2:decimals})"
				},
				{
					"string": "variant_set",
					"append": "(${1:variant}, ${2:value})"
				},
				{
					"string": "variant_set_type",
					"append": "(${1:variant}, ${2:type})"
				},
				{
					"string": "variant_sub",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "variant_xor",
					"append": "(${1:left}, ${2:right})"
				},
				{
					"string": "version_compare",
					"append": "(${1:version1}, ${2:version2})"
				},
				{
					"string": "vfprintf",
					"append": "(${1:handle}, ${2:format}, ${3:args})"
				},
				{
					"string": "virtual",
					"append": "(${1:filename})"
				},
				{
					"string": "vpopmail_add_alias_domain",
					"append": "(${1:domain}, ${2:aliasdomain})"
				},
				{
					"string": "vpopmail_add_alias_domain_ex",
					"append": "(${1:olddomain}, ${2:newdomain})"
				},
				{
					"string": "vpopmail_add_domain",
					"append": "(${1:domain}, ${2:dir}, ${3:uid}, ${4:gid})"
				},
				{
					"string": "vpopmail_add_domain_ex",
					"append": "(${1:domain}, ${2:passwd})"
				},
				{
					"string": "vpopmail_add_user",
					"append": "(${1:user}, ${2:domain}, ${3:password})"
				},
				{
					"string": "vpopmail_alias_add",
					"append": "(${1:user}, ${2:domain}, ${3:alias})"
				},
				{
					"string": "vpopmail_alias_del",
					"append": "(${1:user}, ${2:domain})"
				},
				{
					"string": "vpopmail_alias_del_domain",
					"append": "(${1:domain})"
				},
				{
					"string": "vpopmail_alias_get",
					"append": "(${1:alias}, ${2:domain})"
				},
				{
					"string": "vpopmail_alias_get_all",
					"append": "(${1:domain})"
				},
				{
					"string": "vpopmail_auth_user",
					"append": "(${1:user}, ${2:domain}, ${3:password})"
				},
				{
					"string": "vpopmail_del_domain",
					"append": "(${1:domain})"
				},
				{
					"string": "vpopmail_del_domain_ex",
					"append": "(${1:domain})"
				},
				{
					"string": "vpopmail_del_user",
					"append": "(${1:user}, ${2:domain})"
				},
				{
					"string": "vpopmail_error",
					"append": "(${1:oid})"
				},
				{
					"string": "vpopmail_passwd",
					"append": "(${1:user}, ${2:domain}, ${3:password})"
				},
				{
					"string": "vpopmail_set_user_quota",
					"append": "(${1:user}, ${2:domain}, ${3:quota})"
				},
				{
					"string": "vprintf",
					"append": "(${1:format}, ${2:args})"
				},
				{
					"string": "vsprintf",
					"append": "(${1:format}, ${2:args})"
				},
				{
					"string": "w32api_deftype",
					"append": "(${1:typename}, ${2:member1_type}, ${3:member1_name})"
				},
				{
					"string": "w32api_init_dtype",
					"append": "(${1:typename}, ${2:value})"
				},
				{
					"string": "w32api_invoke_function",
					"append": "(${1:funcname}, ${2:argument})"
				},
				{
					"string": "w32api_register_function",
					"append": "(${1:library}, ${2:function_name}, ${3:return_type})"
				},
				{
					"string": "w32api_set_call_method",
					"append": "(${1:method})"
				},
				{
					"string": "wddx_add_vars",
					"append": "(${1:packet_id}, ${2:var_name})"
				},
				{
					"string": "wddx_deserialize",
					"append": "()"
				},
				{
					"string": "wddx_packet_end",
					"append": "(${1:packet_id})"
				},
				{
					"string": "wddx_packet_start",
					"append": "()"
				},
				{
					"string": "wddx_serialize_value",
					"append": "(${1:var})"
				},
				{
					"string": "wddx_serialize_vars",
					"append": "(${1:var_name})"
				},
				{
					"string": "wddx_unserialize",
					"append": "(${1:packet})"
				},
				{
					"string": "win32_continue_service",
					"append": "(${1:servicename})"
				},
				{
					"string": "win32_create_service",
					"append": "(${1:details})"
				},
				{
					"string": "win32_delete_service",
					"append": "(${1:servicename})"
				},
				{
					"string": "win32_get_last_control_message",
					"append": "(${1:oid})"
				},
				{
					"string": "win32_pause_service",
					"append": "(${1:servicename})"
				},
				{
					"string": "win32_ps_list_procs",
					"append": "(${1:oid})"
				},
				{
					"string": "win32_ps_stat_mem",
					"append": "(${1:oid})"
				},
				{
					"string": "win32_ps_stat_proc",
					"append": "()"
				},
				{
					"string": "win32_query_service_status",
					"append": "(${1:servicename})"
				},
				{
					"string": "win32_set_service_status",
					"append": "(${1:status})"
				},
				{
					"string": "win32_start_service",
					"append": "(${1:servicename})"
				},
				{
					"string": "win32_start_service_ctrl_dispatcher",
					"append": "(${1:name})"
				},
				{
					"string": "win32_stop_service",
					"append": "(${1:servicename})"
				},
				{
					"string": "wincache_fcache_fileinfo",
					"append": "()"
				},
				{
					"string": "wincache_fcache_meminfo",
					"append": "(${1:oid})"
				},
				{
					"string": "wincache_lock",
					"append": "(${1:key})"
				},
				{
					"string": "wincache_ocache_fileinfo",
					"append": "()"
				},
				{
					"string": "wincache_ocache_meminfo",
					"append": "(${1:oid})"
				},
				{
					"string": "wincache_refresh_if_changed",
					"append": "()"
				},
				{
					"string": "wincache_rplist_fileinfo",
					"append": "()"
				},
				{
					"string": "wincache_rplist_meminfo",
					"append": "(${1:oid})"
				},
				{
					"string": "wincache_scache_info",
					"append": "()"
				},
				{
					"string": "wincache_scache_meminfo",
					"append": "(${1:oid})"
				},
				{
					"string": "wincache_ucache_add",
					"append": "(${1:key}, ${2:value})"
				},
				{
					"string": "wincache_ucache_cas",
					"append": "(${1:key}, ${2:old_value}, ${3:new_value})"
				},
				{
					"string": "wincache_ucache_clear",
					"append": "(${1:oid})"
				},
				{
					"string": "wincache_ucache_dec",
					"append": "(${1:key})"
				},
				{
					"string": "wincache_ucache_delete",
					"append": "(${1:key})"
				},
				{
					"string": "wincache_ucache_exists",
					"append": "(${1:key})"
				},
				{
					"string": "wincache_ucache_get",
					"append": "(${1:key})"
				},
				{
					"string": "wincache_ucache_inc",
					"append": "(${1:key})"
				},
				{
					"string": "wincache_ucache_info",
					"append": "()"
				},
				{
					"string": "wincache_ucache_meminfo",
					"append": "(${1:oid})"
				},
				{
					"string": "wincache_ucache_set",
					"append": "(${1:key}, ${2:value})"
				},
				{
					"string": "wincache_unlock",
					"append": "(${1:key})"
				},
				{
					"string": "wordwrap",
					"append": "(${1:str})"
				},
				{
					"string": "xattr_get",
					"append": "(${1:filename}, ${2:name})"
				},
				{
					"string": "xattr_list",
					"append": "(${1:filename})"
				},
				{
					"string": "xattr_remove",
					"append": "(${1:filename}, ${2:name})"
				},
				{
					"string": "xattr_set",
					"append": "(${1:filename}, ${2:name}, ${3:value})"
				},
				{
					"string": "xattr_supported",
					"append": "(${1:filename})"
				},
				{
					"string": "xdiff_file_bdiff",
					"append": "(${1:old_file}, ${2:new_file}, ${3:dest})"
				},
				{
					"string": "xdiff_file_bdiff_size",
					"append": "(${1:file})"
				},
				{
					"string": "xdiff_file_bpatch",
					"append": "(${1:file}, ${2:patch}, ${3:dest})"
				},
				{
					"string": "xdiff_file_diff",
					"append": "(${1:old_file}, ${2:new_file}, ${3:dest})"
				},
				{
					"string": "xdiff_file_diff_binary",
					"append": "(${1:old_file}, ${2:new_file}, ${3:dest})"
				},
				{
					"string": "xdiff_file_merge3",
					"append": "(${1:old_file}, ${2:new_file1}, ${3:new_file2}, ${4:dest})"
				},
				{
					"string": "xdiff_file_patch",
					"append": "(${1:file}, ${2:patch}, ${3:dest})"
				},
				{
					"string": "xdiff_file_patch_binary",
					"append": "(${1:file}, ${2:patch}, ${3:dest})"
				},
				{
					"string": "xdiff_file_rabdiff",
					"append": "(${1:old_file}, ${2:new_file}, ${3:dest})"
				},
				{
					"string": "xdiff_string_bdiff",
					"append": "(${1:old_data}, ${2:new_data})"
				},
				{
					"string": "xdiff_string_bdiff_size",
					"append": "(${1:patch})"
				},
				{
					"string": "xdiff_string_bpatch",
					"append": "(${1:str}, ${2:patch})"
				},
				{
					"string": "xdiff_string_diff",
					"append": "(${1:old_data}, ${2:new_data})"
				},
				{
					"string": "xdiff_string_diff_binary",
					"append": "(${1:old_data}, ${2:new_data})"
				},
				{
					"string": "xdiff_string_merge3",
					"append": "(${1:old_data}, ${2:new_data1}, ${3:new_data2})"
				},
				{
					"string": "xdiff_string_patch",
					"append": "(${1:str}, ${2:patch})"
				},
				{
					"string": "xdiff_string_patch_binary",
					"append": "(${1:str}, ${2:patch})"
				},
				{
					"string": "xdiff_string_rabdiff",
					"append": "(${1:old_data}, ${2:new_data})"
				},
				{
					"string": "xml_error_string",
					"append": "(${1:code})"
				},
				{
					"string": "xml_get_current_byte_index",
					"append": "(${1:parser})"
				},
				{
					"string": "xml_get_current_column_number",
					"append": "(${1:parser})"
				},
				{
					"string": "xml_get_current_line_number",
					"append": "(${1:parser})"
				},
				{
					"string": "xml_get_error_code",
					"append": "(${1:parser})"
				},
				{
					"string": "xml_parse",
					"append": "(${1:parser}, ${2:data})"
				},
				{
					"string": "xml_parse_into_struct",
					"append": "(${1:parser}, ${2:data}, ${3:values})"
				},
				{
					"string": "xml_parser_create",
					"append": "()"
				},
				{
					"string": "xml_parser_create_ns",
					"append": "()"
				},
				{
					"string": "xml_parser_free",
					"append": "(${1:parser})"
				},
				{
					"string": "xml_parser_get_option",
					"append": "(${1:parser}, ${2:option})"
				},
				{
					"string": "xml_parser_set_option",
					"append": "(${1:parser}, ${2:option}, ${3:value})"
				},
				{
					"string": "xml_set_character_data_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xml_set_default_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xml_set_element_handler",
					"append": "(${1:parser}, ${2:start_element_handler}, ${3:end_element_handler})"
				},
				{
					"string": "xml_set_end_namespace_decl_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xml_set_external_entity_ref_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xml_set_notation_decl_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xml_set_object",
					"append": "(${1:parser}, ${2:object})"
				},
				{
					"string": "xml_set_processing_instruction_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xml_set_start_namespace_decl_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xml_set_unparsed_entity_decl_handler",
					"append": "(${1:parser}, ${2:handler})"
				},
				{
					"string": "xmlrpc_decode",
					"append": "(${1:xml})"
				},
				{
					"string": "xmlrpc_decode_request",
					"append": "(${1:xml}, ${2:method})"
				},
				{
					"string": "xmlrpc_encode",
					"append": "(${1:value})"
				},
				{
					"string": "xmlrpc_encode_request",
					"append": "(${1:method}, ${2:params})"
				},
				{
					"string": "xmlrpc_get_type",
					"append": "(${1:value})"
				},
				{
					"string": "xmlrpc_is_fault",
					"append": "(${1:arg})"
				},
				{
					"string": "xmlrpc_parse_method_descriptions",
					"append": "(${1:xml})"
				},
				{
					"string": "xmlrpc_server_add_introspection_data",
					"append": "(${1:server}, ${2:desc})"
				},
				{
					"string": "xmlrpc_server_call_method",
					"append": "(${1:server}, ${2:xml}, ${3:user_data})"
				},
				{
					"string": "xmlrpc_server_create",
					"append": "(${1:oid})"
				},
				{
					"string": "xmlrpc_server_destroy",
					"append": "(${1:server})"
				},
				{
					"string": "xmlrpc_server_register_introspection_callback",
					"append": "(${1:server}, ${2:function})"
				},
				{
					"string": "xmlrpc_server_register_method",
					"append": "(${1:server}, ${2:method_name}, ${3:function})"
				},
				{
					"string": "xmlrpc_set_type",
					"append": "(${1:value}, ${2:type})"
				},
				{
					"string": "xpath_eval",
					"append": "(${1:xpath_expression})"
				},
				{
					"string": "xpath_eval_expression",
					"append": "(${1:expression})"
				},
				{
					"string": "xpath_new_context",
					"append": "(${1:dom_document})"
				},
				{
					"string": "xpath_register_ns",
					"append": "(${1:xpath_context}, ${2:prefix}, ${3:uri})"
				},
				{
					"string": "xpath_register_ns_auto",
					"append": "(${1:xpath_context})"
				},
				{
					"string": "xptr_eval",
					"append": "(${1:eval_str})"
				},
				{
					"string": "xptr_new_context",
					"append": "(${1:oid})"
				},
				{
					"string": "xslt_backend_info",
					"append": "(${1:oid})"
				},
				{
					"string": "xslt_backend_name",
					"append": "(${1:oid})"
				},
				{
					"string": "xslt_backend_version",
					"append": "(${1:oid})"
				},
				{
					"string": "xslt_create",
					"append": "(${1:oid})"
				},
				{
					"string": "xslt_errno",
					"append": "(${1:xh})"
				},
				{
					"string": "xslt_error",
					"append": "(${1:xh})"
				},
				{
					"string": "xslt_free",
					"append": "(${1:xh})"
				},
				{
					"string": "xslt_getopt",
					"append": "(${1:processor})"
				},
				{
					"string": "xslt_process",
					"append": "(${1:xh}, ${2:xmlcontainer}, ${3:xslcontainer})"
				},
				{
					"string": "xslt_set_base",
					"append": "(${1:xh}, ${2:uri})"
				},
				{
					"string": "xslt_set_encoding",
					"append": "(${1:xh}, ${2:encoding})"
				},
				{
					"string": "xslt_set_error_handler",
					"append": "(${1:xh}, ${2:handler})"
				},
				{
					"string": "xslt_set_log",
					"append": "(${1:xh})"
				},
				{
					"string": "xslt_set_object",
					"append": "(${1:processor}, ${2:obj})"
				},
				{
					"string": "xslt_set_sax_handler",
					"append": "(${1:xh}, ${2:handlers})"
				},
				{
					"string": "xslt_set_sax_handlers",
					"append": "(${1:processor}, ${2:handlers})"
				},
				{
					"string": "xslt_set_scheme_handler",
					"append": "(${1:xh}, ${2:handlers})"
				},
				{
					"string": "xslt_set_scheme_handlers",
					"append": "(${1:xh}, ${2:handlers})"
				},
				{
					"string": "xslt_setopt",
					"append": "(${1:processor}, ${2:newmask})"
				},
				{
					"string": "yaml_emit",
					"append": "(${1:data})"
				},
				{
					"string": "yaml_emit_file",
					"append": "(${1:filename}, ${2:data})"
				},
				{
					"string": "yaml_parse",
					"append": "(${1:input})"
				},
				{
					"string": "yaml_parse_file",
					"append": "(${1:filename})"
				},
				{
					"string": "yaml_parse_url",
					"append": "(${1:url})"
				},
				{
					"string": "yaz_addinfo",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_ccl_conf",
					"append": "(${1:id}, ${2:config})"
				},
				{
					"string": "yaz_ccl_parse",
					"append": "(${1:id}, ${2:query}, ${3:result})"
				},
				{
					"string": "yaz_close",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_connect",
					"append": "(${1:zurl})"
				},
				{
					"string": "yaz_database",
					"append": "(${1:id}, ${2:databases})"
				},
				{
					"string": "yaz_element",
					"append": "(${1:id}, ${2:elementset})"
				},
				{
					"string": "yaz_errno",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_error",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_es",
					"append": "(${1:id}, ${2:type}, ${3:args})"
				},
				{
					"string": "yaz_es_result",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_get_option",
					"append": "(${1:id}, ${2:name})"
				},
				{
					"string": "yaz_hits",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_itemorder",
					"append": "(${1:id}, ${2:args})"
				},
				{
					"string": "yaz_present",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_range",
					"append": "(${1:id}, ${2:start}, ${3:number})"
				},
				{
					"string": "yaz_record",
					"append": "(${1:id}, ${2:pos}, ${3:type})"
				},
				{
					"string": "yaz_scan",
					"append": "(${1:id}, ${2:type}, ${3:startterm})"
				},
				{
					"string": "yaz_scan_result",
					"append": "(${1:id})"
				},
				{
					"string": "yaz_schema",
					"append": "(${1:id}, ${2:schema})"
				},
				{
					"string": "yaz_search",
					"append": "(${1:id}, ${2:type}, ${3:query})"
				},
				{
					"string": "yaz_set_option",
					"append": "(${1:id}, ${2:name}, ${3:value})"
				},
				{
					"string": "yaz_sort",
					"append": "(${1:id}, ${2:criteria})"
				},
				{
					"string": "yaz_syntax",
					"append": "(${1:id}, ${2:syntax})"
				},
				{
					"string": "yaz_wait",
					"append": "()"
				},
				{
					"string": "yp_all",
					"append": "(${1:domain}, ${2:map}, ${3:callback})"
				},
				{
					"string": "yp_cat",
					"append": "(${1:domain}, ${2:map})"
				},
				{
					"string": "yp_err_string",
					"append": "(${1:errorcode})"
				},
				{
					"string": "yp_errno",
					"append": "(${1:oid})"
				},
				{
					"string": "yp_first",
					"append": "(${1:domain}, ${2:map})"
				},
				{
					"string": "yp_get_default_domain",
					"append": "(${1:oid})"
				},
				{
					"string": "yp_master",
					"append": "(${1:domain}, ${2:map})"
				},
				{
					"string": "yp_match",
					"append": "(${1:domain}, ${2:map}, ${3:key})"
				},
				{
					"string": "yp_next",
					"append": "(${1:domain}, ${2:map}, ${3:key})"
				},
				{
					"string": "yp_order",
					"append": "(${1:domain}, ${2:map})"
				},
				{
					"string": "zend_logo_guid",
					"append": "(${1:oid})"
				},
				{
					"string": "zend_thread_id",
					"append": "(${1:oid})"
				},
				{
					"string": "zend_version",
					"append": "(${1:oid})"
				},
				{
					"string": "zip_close",
					"append": "(${1:zip})"
				},
				{
					"string": "zip_entry_close",
					"append": "(${1:zip_entry})"
				},
				{
					"string": "zip_entry_compressedsize",
					"append": "(${1:zip_entry})"
				},
				{
					"string": "zip_entry_compressionmethod",
					"append": "(${1:zip_entry})"
				},
				{
					"string": "zip_entry_filesize",
					"append": "(${1:zip_entry})"
				},
				{
					"string": "zip_entry_name",
					"append": "(${1:zip_entry})"
				},
				{
					"string": "zip_entry_open",
					"append": "(${1:zip}, ${2:zip_entry})"
				},
				{
					"string": "zip_entry_read",
					"append": "(${1:zip_entry})"
				},
				{
					"string": "zip_open",
					"append": "(${1:filename})"
				},
				{
					"string": "zip_read",
					"append": "(${1:zip})"
				},
				{
					"string": "zlib_get_coding_type",
					"append": "(${1:oid})"
				}
			]
		},
		{
			"name": "php.keywords",
			"strings": [
				"cfunction",
				{
					"string": "class",
					"append": " ${1:ClassName} {\n\t$0\n}"
				},
				"extends",
				"const",
				{
					"string": "interface",
					"append": " ${1:InterfaceName} {\n\t$0\n}"
				},
				{
					"string": "function",
					"append": " ${1:function_name}($2) {\n\t$0\n}"
				},
				"old_function",
				"var",
				// scope
				"abstract",
				"global",
				"final",
				"private",
				"protected",
				"public",
				"static",
				// control
				"as",
				{
					"string": "break",
					"append": ";"
				},
				{
					"string": "case",
					"append": " ${1:condition}: "
				},
				{
					"string": "continue",
					"append": ";"
				},
				{
					"string": "declare",
					"append": " ($1)"
				},
				{
					"string": "default",
					"append": ":"
				},
				{
					"string": "do",
					"append": " {\n\t$0\n} while ($1);"
				},
				{
					"string": "else",
					"append": " {\n\t$0\n}"
				},
				{
					"string": "elseif",
					"append": " ($1) {\n\t$0\n}"
				},
				{
					"string": "for",
					"append": " (${1:\\$i = 0}; \\$i ${3:< count}; ${4:\\$i++}) {\n\t$0\n}"
				},
				{
					"string": "foreach",
					"append": " (${1:\\$array} as ${2:${3:\\$key} => }${4:\\$value}) {\n\t$0\n}"
				},
				{
					"string": "goto",
					"append": " ${1:label};"
				},
				{
					"string": "if",
					"append": " ($1) {\n\t$0\n}"
				},
				"namespace",
				{
					"string": "switch",
					"append": " ($1) {\n\t$0\n}"
				},
				"use",
				{
					"string": "while",
					"append": " ($1) {\n\t$2\n}"
				},
				"return",
				// alternate end
				{
					"string": "endfor",
					"append": ";"
				},
				{
					"string": "endforeach",
					"append": ";"
				},
				{
					"string": "endif",
					"append": ";"
				},
				{
					"string": "endswitch",
					"append": ";"
				},
				{
					"string": "endwhile",
					"append": ";"
				},
				// exception
				{
					"string": "catch",
					"append": " (${1:\\$exception}) {\n\t$0\n}"
				},
				{
					"string": "try",
					"append": " {\n\t$0\n}"
				},
				"throw",
				"exception",
				// operators
				"new",
				"clone",
				"true",
				"false",
				"TRUE",
				"FALSE",
				"NULL"
			]
		},
		{
			"name": "php.global-variables",
			"defaultAppend": "[$1]",
			"strings": [
				"_SERVER",
				"_GET",
				"_POST",
				"_FILES",
				"_COOKIE",
				"_SESSION",
				"_REQUEST",
				"_ENV"
			]
		}
	],
	"contexts": [{
			"description": "PHP function completion",
			"scope": "source.php - variable.other.php - comment - string",
			"pattern": "(?<!<\\?)\\b([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)",
			"completionCaptureIndex": 1,
			"completionSetNames": [
				"php.functions",
				"php.keywords"
			]
		},
		{
			"description": "PHP global variables",
			"scope": "source.php - comment - string",
			"pattern": "\\$([a-zA-Z_]*)",
			"completionCaptureIndex": 1,
			"completionSetNames": [
				"php.global-variables"
			]
		}
	]
}